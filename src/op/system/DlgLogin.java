/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 */
package op.system;

import com.jgoodies.forms.factories.*;
import com.jgoodies.forms.layout.*;
import entity.system.SYSLoginTools;
import op.OPDE;
import op.threads.DisplayMessage;
import op.tools.MyJDialog;
import org.apache.commons.collections.Closure;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;

/**
 * @author __USER__
 */
public class DlgLogin extends MyJDialog {
    private Closure actionBlock;

    private void btnExitActionPerformed(ActionEvent e) {
        dispose();
    }

    public DlgLogin(Closure actionBlock) {
        super();
        OPDE.setLogin(null);

        this.actionBlock = actionBlock;

        try {
            if (OPDE.getDb() != null && !OPDE.getDb().db.isClosed()) {
                OPDE.getDb().db.close();
            }
        } catch (SQLException se) {
            System.out.println(se.getMessage());
        }

        initComponents();

        String defaultlogin = "";

        String defaultpw = "";
        if (OPDE.getLocalProps().containsKey("defaultlogin")) {
            defaultlogin = OPDE.getLocalProps().getProperty("defaultlogin");
        }
        if (OPDE.getLocalProps().containsKey("defaultpw")) {
            defaultpw = OPDE.getLocalProps().getProperty("defaultpw");
        }
        txtUsername.setText(defaultlogin);
        txtPassword.setText(defaultpw);

//        try {
//            linkOPDE.setURI(new URI("http://www.offene-pflege.de"));
//            linkOPDE.setText("Offene-Pflege.de");
//        } catch (URISyntaxException ex) {
//            new DlgException(ex);
//        }

        txtUsername.requestFocus();

        setVisible(true);

    }


//    private void animateLogo() {
//        thread = new Thread() {
//
//            public void run() {
//
//                int maxIconsNum = 85;
//
//                try {
//                    int i = 0;
//                    while (true) {
//                        if (i == OPDE.getAnimationCache().size()) {
//                            OPDE.getAnimationCache().add(new ImageIcon(getClass().getResource("/artwork/animation/opde-" + (i + 1) + ".png")));
//                        }
//                        btnAbout.setIcon(OPDE.getAnimationCache().get(i));
//
//                        Thread.sleep(55);
//                        if (i == maxIconsNum) {
//                            i = 0;
//                        } else {
//                            i++;
//                        }
//                    }
//                } catch (InterruptedException e) {
//                }
//            }
//        };
//        thread.start();
//    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new JPanel();
        jLabel2 = new JLabel();
        txtUsername = new JTextField();
        jLabel1 = new JLabel();
        txtPassword = new JPasswordField();
        jPanel2 = new JPanel();
        btnAbout = new JButton();
        jLabel4 = new JLabel();
        lblOPDE = new JLabel();
        panel1 = new JPanel();
        btnExit = new JButton();
        hSpacer1 = new JPanel(null);
        btnLogin = new JButton();

        //======== this ========
        setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        Container contentPane = getContentPane();
        contentPane.setLayout(new FormLayout(
            "18dlu, default, $lcgap, 18dlu",
            "18dlu, $lgap, 48dlu, 2*($lgap, fill:default), $lgap, 18dlu"));

        //======== jPanel1 ========
        {
            jPanel1.setBorder(new EmptyBorder(5, 5, 5, 5));
            jPanel1.setOpaque(false);
            jPanel1.setLayout(new FormLayout(
                "default, $lcgap, default:grow",
                "fill:default, $lgap, fill:default"));

            //---- jLabel2 ----
            jLabel2.setText("Benutzername");
            jLabel2.setFont(new Font("Arial", Font.PLAIN, 14));
            jPanel1.add(jLabel2, CC.xy(1, 1));

            //---- txtUsername ----
            txtUsername.setFont(new Font("Arial", Font.PLAIN, 14));
            txtUsername.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    txtUsernameActionPerformed(e);
                }
            });
            txtUsername.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    txtUsernameFocusGained(e);
                }
            });
            jPanel1.add(txtUsername, CC.xy(3, 1));

            //---- jLabel1 ----
            jLabel1.setText("Passwort");
            jLabel1.setPreferredSize(new Dimension(4, 19));
            jLabel1.setFont(new Font("Arial", Font.PLAIN, 14));
            jPanel1.add(jLabel1, CC.xy(1, 3));

            //---- txtPassword ----
            txtPassword.setFont(new Font("Arial", Font.PLAIN, 14));
            txtPassword.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    txtPasswordActionPerformed(e);
                }
            });
            txtPassword.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    txtPasswordFocusGained(e);
                }
            });
            jPanel1.add(txtPassword, CC.xy(3, 3));
        }
        contentPane.add(jPanel1, CC.xy(2, 5));

        //======== jPanel2 ========
        {
            jPanel2.setBorder(new EmptyBorder(5, 5, 5, 5));
            jPanel2.setOpaque(false);
            jPanel2.setLayout(new FormLayout(
                "default, $lcgap, default",
                "fill:default:grow, $lgap, fill:default:grow"));

            //---- btnAbout ----
            btnAbout.setIcon(new ImageIcon(getClass().getResource("/artwork/64x64/opde-metal.png")));
            btnAbout.setToolTipText("\u00dcber Offene-Pflege.de...");
            btnAbout.setBorderPainted(false);
            btnAbout.setBorder(null);
            btnAbout.setOpaque(false);
            btnAbout.setContentAreaFilled(false);
            btnAbout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            btnAbout.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnAboutActionPerformed(e);
                }
            });
            jPanel2.add(btnAbout, CC.xywh(1, 1, 1, 3));

            //---- jLabel4 ----
            jLabel4.setFont(new Font("Arial", Font.PLAIN, 13));
            jLabel4.setHorizontalAlignment(SwingConstants.CENTER);
            jLabel4.setText("So viel Pflege wie m\u00f6glich, so viel Technik wie n\u00f6tig. ");
            jPanel2.add(jLabel4, CC.xy(3, 3));

            //---- lblOPDE ----
            lblOPDE.setText("Offene-Pflege.de");
            lblOPDE.setFont(new Font("Arial", Font.PLAIN, 24));
            lblOPDE.setHorizontalAlignment(SwingConstants.CENTER);
            jPanel2.add(lblOPDE, CC.xy(3, 1));
        }
        contentPane.add(jPanel2, CC.xy(2, 3));

        //======== panel1 ========
        {
            panel1.setLayout(new BoxLayout(panel1, BoxLayout.X_AXIS));

            //---- btnExit ----
            btnExit.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/exit.png")));
            btnExit.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnExitActionPerformed(e);
                }
            });
            panel1.add(btnExit);
            panel1.add(hSpacer1);

            //---- btnLogin ----
            btnLogin.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
            btnLogin.setActionCommand("btnLogin");
            btnLogin.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    DoLogin(e);
                }
            });
            panel1.add(btnLogin);
        }
        contentPane.add(panel1, CC.xy(2, 7, CC.RIGHT, CC.DEFAULT));
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtUsernameFocusGained


    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        btnLogin.doClick();
    }//GEN-LAST:event_txtPasswordActionPerformed

    @Override
    public void dispose() {
        actionBlock.execute(OPDE.getLogin());
//        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        txtPassword.requestFocus();
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void DoLogin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoLogin
        String username = txtUsername.getText().trim();
//            char[] password = txtPassword.getPassword();

        try {

//            OPDE.initDB();

            // Hier wird erst geprüft, ob Username und Passwort stimmen.
            registerLogin();
            if (OPDE.getLogin() == null) {
                OPDE.getDisplayManager().addSubMessage(new DisplayMessage("Benutzername oder Passwort falsch.", 2));
                OPDE.info("Falsches Passwort eingegeben.");
            } else {

//                OPDE.newOCSec();

                OPDE.initProps();

                OPDE.info("Anmeldung erfolgt: UKennung: " + username);
                OPDE.info("LoginID: " + OPDE.getLogin().getUser().getUID());

                dispose();
            }

        } catch (Exception se) {
            OPDE.fatal(se);
            System.exit(1);
        }
    }//GEN-LAST:event_DoLogin

    private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(new URI("http://www.offene-pflege.de"));
            } catch (IOException ioe) {
                ioe.printStackTrace();
            } catch (URISyntaxException use) {
                use.printStackTrace();

            }
        }
    }//GEN-LAST:event_btnAboutActionPerformed
//
//    @Override
//    public void setVisible(boolean b) {
//
//        super.setVisible(b);    //To change body of overridden methods use File | Settings | File Templates.
//    }

    /**
     * Trägt ein DlgLogin ein. Es werden alte, zerstörte DlgLogin Reste ebenfalls entfernt und zwar nach dem folgendem Muster:
     * <p/>
     * <li>	Es wird nach DlgLogin Einträgen gesucht, bei denen LOGOUT auf BAW steht. Das bedeutet, dass sie bei der letzten Anmeldung nicht ordnungsgemäß
     * abgeschlossen wurden. Bei diesen Records wird Logout auf LPOL gesetzt. Was ja auch halbwegs der Wahrheit entspricht. Die Sitzung war beendet
     * als die Station abstürzte und das wiederum war kurz nach dem letzten Lebenszeichen.</li>
     * <p/>
     * <li> Alle WorkingOn Einträge dieser (kaputten) LoginID werden auf LPOL gesetzt. Liegt LPOL allerdings weniger als <b>2 Minuten zurück</b>, dann wird
     * der Eintrag verweigert. Dann läuft wohl noch eine andere Sitzung.</li>
     *
     * @return true, wenn die Anmeldung erlaubt ist, false, wenn man noch warten muss.
     */
    private void registerLogin() {
        //long loginid;
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());

        OPDE.setLogin(SYSLoginTools.login(username, password));
//
//        try {
//
//
//            // Gibt es noch laufende Sitzungen, die sich innerhalb der vergangenen 2 Minuten als
//            // lebendig gemeldet haben ?
////            String sqlRunningSessions = "SELECT OCLoginID FROM OCLogin "
////                    + "WHERE UKennung=? AND IP=? AND Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 2 MINUTE) > now()";
////            PreparedStatement stmt = OPDE.getDb().db.prepareStatement(sqlRunningSessions);
////            stmt.setString(1, username);
////            stmt.setString(2, OPDE.getProps().getProperty("ip"));
////            ResultSet rsRunningSessions = stmt.executeQuery();
//
////            if (!rsRunningSessions.first()) { // Die Luft ist rein.... Schnell anmelden ;-)
////                String sqlNewSession = "INSERT INTO OCLogin (UKennung, HOST, IP, Login, LPOL, Logout) VALUES (?, ?, ?, NOW(), NOW(), '9999-12-31 23:59:59')";
////                PreparedStatement stmtNewSession = OPDE.getDb().db.prepareStatement(sqlNewSession);
////                stmtNewSession.setString(1, username);
////                stmtNewSession.setString(2, OPDE.getLocalProps().getProperty("hostname"));
////                stmtNewSession.setString(3, OPDE.getLocalProps().getProperty("ip"));
////                stmtNewSession.executeUpdate();
////
////                loginid = OPDE.getDb().getLastInsertedID();
//
//            // Aufräumen
//            // Zuerst OCWorkingOn von alten Trümmer Einträgen befreien.
////                String sqlWOCleanupSession = "UPDATE OCWorkingOn SET Finish=NOW()  WHERE OCLoginID IN ( SELECT OCLoginID FROM OCLogin WHERE Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 3 MINUTE) <= now() )";
////                PreparedStatement stmtWOCleanupSession = OPDE.getDb().db.prepareStatement(sqlWOCleanupSession);
////                stmtWOCleanupSession.executeUpdate();
////
////                // OCMessages löschen, die von toten Logins stammen. Damit ein evtl. BHPImport nicht ewig darauf wartet.
////                String sqlMessageCleanupSession = "DELETE FROM OCMessage WHERE Receiver IN ( SELECT OCLoginID FROM OCLogin WHERE Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 3 MINUTE) <= now() )";
////                PreparedStatement stmtMessageCleanupSession = OPDE.getDb().db.prepareStatement(sqlMessageCleanupSession);
////                stmtMessageCleanupSession.executeUpdate();
//
////            // Dann Verordnungen zur BHP, die aus alten Trümmersitzungen stammen löschen.
////            String sqlBHPCleanupSession = "DELETE FROM BHPPlanung WHERE tmp IN ( SELECT l.LoginID FROM SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now() )";
////            PreparedStatement stmtBHPCleanupSession = OPDE.getDb().db.prepareStatement(sqlBHPCleanupSession);
////            stmtBHPCleanupSession.executeUpdate();
////
////            // Dann InterventionSchedulee löschen, die aus alten Trümmersitzungen stammen löschen.
////            String sqlInterventionScheduleCleanupSession = "DELETE FROM InterventionSchedule WHERE tmp IN ( SELECT l.LoginID FROM SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now() )";
////            PreparedStatement stmtInterventionScheduleCleanupSession = OPDE.getDb().db.prepareStatement(sqlInterventionScheduleCleanupSession);
////            stmtInterventionScheduleCleanupSession.executeUpdate();
//
//            // Dann OCLogin bereinigen.
////            String sqlCleanupSession = "UPDATE SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID SET l.Logout=LPOL WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now()";
////            PreparedStatement stmtCleanupSession = OPDE.getDb().db.prepareStatement(sqlCleanupSession);
////            stmtCleanupSession.executeUpdate();
//
////            } else {
////                JOptionPane.showMessageDialog(this, "Sie sind bereits an diesem Computer angemeldet.\n\nFalls Sie den Rechner gerade neu gestartet haben,\ndann warten Sie ca. 1 Minute und versuchen es dann nochmal.", "Anmeldefehler", JOptionPane.INFORMATION_MESSAGE);
////                loginid = 0;
////            }
//        } // try
//        catch (Exception se) {
//            OPDE.fatal(se);
//        } // catch
        //return (loginid);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel1;
    private JLabel jLabel2;
    private JTextField txtUsername;
    private JLabel jLabel1;
    private JPasswordField txtPassword;
    private JPanel jPanel2;
    private JButton btnAbout;
    private JLabel jLabel4;
    private JLabel lblOPDE;
    private JPanel panel1;
    private JButton btnExit;
    private JPanel hSpacer1;
    private JButton btnLogin;
    // End of variables declaration//GEN-END:variables
}

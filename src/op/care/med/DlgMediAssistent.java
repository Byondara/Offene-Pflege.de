/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.med;

import java.awt.event.*;
import javax.swing.border.*;
import javax.swing.event.*;
import entity.verordnungen.MedHersteller;
import op.OPDE;
import op.tools.*;

import javax.swing.*;
import java.awt.*;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class DlgMediAssistent extends javax.swing.JDialog {

    private boolean ignore = false;
    private ArrayList result;
    private int okUntilTab; // Bis zu welchem Tab sind die Eingaben in Ordnung.
    private boolean[] punchedOutTabs = {false, false, false, false, false, false, false, false};
    private JTabSelectionTool jtst;
    private Component parent;
    private boolean initInfo1;
    private boolean initZusatz;
    private boolean initInfo2;
    private boolean initForm;
    private boolean initPackung;
    private boolean initHersteller;
    private HashMap form;
    //private HashMap savedata;
    private HashMap mpprodukte;
    private HashMap mpdarreichung;
    private HashMap mppackung;
    private String pzn = "";
    private String initialMedName = "";
    private double apv = 1d;

    public DlgMediAssistent(java.awt.Frame parent) {
        this(parent, new ArrayList());
    }

    public DlgMediAssistent(JDialog parent) {
        this(parent, new ArrayList());
    }

    /**
     * Creates new form DlgMediAssistent
     */
    public DlgMediAssistent(java.awt.Frame parent, ArrayList result) {
        super(parent, true);
        this.result = result;
        this.parent = parent;
        okUntilTab = 1;
        initDialog();
        this.setVisible(true);
    }

    /**
     * Creates new form DlgMediAssistent
     */
    public DlgMediAssistent(JDialog parent, ArrayList result) {
        super(parent, true);
        this.parent = parent;
        this.result = result;
        okUntilTab = 1;
        initDialog();
        this.setVisible(true);
    }

    private void initDialog() {
        initInfo1 = false;
        initZusatz = false;
        initInfo2 = false;
        initForm = false;
        initPackung = false;
        initHersteller = false;
        form = new HashMap();
        initComponents();
        jtst = new JTabSelectionTool(tabPane);
        // TODO: das hier muss wieder rein
//        cmbForm.setModel(DBRetrieve.getMPFormen());

        if (result.size() > 0) {
            txtName.setText(result.get(0).toString());
        }
        tabPane.setSelectedIndex(0);

        SYSTools.centerOnParent(this.parent, this);
        setTabsEnabled();
        setTitle(SYSTools.getWindowTitle("Medikamenten-Assistent"));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new JLabel();
        tabPane = new JTabbedPane();
        jPanel4 = new JPanel();
        jLabel5 = new JLabel();
        jScrollPane1 = new JScrollPane();
        txtPaneWillkommen = new JTextPane();
        jPanel1 = new JPanel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        txtName = new JTextField();
        jLabel16 = new JLabel();
        jPanel5 = new JPanel();
        lblVorhanden = new JLabel();
        jScrollPane2 = new JScrollPane();
        lstMedVorhanden = new JList();
        cbMedNichtVorhanden = new JCheckBox();
        jPanel2 = new JPanel();
        jLabel4 = new JLabel();
        txtZusatz = new JTextField();
        jLabel6 = new JLabel();
        jLabel11 = new JLabel();
        jLabel12 = new JLabel();
        jSeparator1 = new JSeparator();
        cmbForm = new JComboBox();
        lblMedName = new JLabel();
        jPanel6 = new JPanel();
        lblZusatz = new JLabel();
        cbZusatzNichtVorhanden = new JCheckBox();
        jScrollPane3 = new JScrollPane();
        lstDaf = new JList();
        jPanel7 = new JPanel();
        jLabel7 = new JLabel();
        cbKeinePackung = new JCheckBox();
        pnlPackung = new JPanel();
        jLabel13 = new JLabel();
        txtPZN = new javax.swing.JFormattedTextField(new DecimalFormat("0000000"));;
        jLabel14 = new JLabel();
        cmbGroesse = new JComboBox();
        jLabel15 = new JLabel();
        lblPackEinheit = new JLabel();
        lblPack1 = new JLabel();
        lblPack2 = new JLabel();
        txtInhalt = new JTextField();
        jPanel8 = new JPanel();
        cmbHersteller = new JComboBox();
        btnEditHersteller = new JButton();
        jLabel17 = new JLabel();
        jLabel10 = new JLabel();
        jPanel9 = new JPanel();
        jScrollPane4 = new JScrollPane();
        txtPaneFertig = new JTextPane();
        btnCancel = new JButton();
        btnNext = new JButton();
        btnBack = new JButton();
        btnApply = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        Container contentPane = getContentPane();

        //---- jLabel1 ----
        jLabel1.setFont(new Font("Dialog", Font.BOLD, 18));
        jLabel1.setText("Medikamenten Assistent");

        //======== tabPane ========
        {
            tabPane.setTabPlacement(SwingConstants.BOTTOM);
            tabPane.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    tabPaneStateChanged(e);
                }
            });

            //======== jPanel4 ========
            {

                //---- jLabel5 ----
                jLabel5.setFont(new Font("Dialog", Font.BOLD, 14));
                jLabel5.setIcon(new ImageIcon(getClass().getResource("/artwork/48x48/wizard.png")));
                jLabel5.setText("Willkommen");

                //======== jScrollPane1 ========
                {
                    jScrollPane1.setViewportView(txtPaneWillkommen);
                }

                GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                    jPanel4Layout.createParallelGroup()
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel4Layout.createParallelGroup()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addContainerGap())
                );
                jPanel4Layout.setVerticalGroup(
                    jPanel4Layout.createParallelGroup()
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel5)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }
            tabPane.addTab("Willkommen", jPanel4);


            //======== jPanel1 ========
            {

                //---- jLabel2 ----
                jLabel2.setText("Wie heisst das Medikament. Bitte geben Sie den vollst\u00e4ndigen Namen ein.");

                //---- jLabel3 ----
                jLabel3.setFont(new Font("Dialog", Font.PLAIN, 12));
                jLabel3.setText("Lassen Sie Zusatzbezeichnungen wie \"40\", \"10mg\", \"retard\" etc. weg.");

                //---- txtName ----
                txtName.addCaretListener(new CaretListener() {
                    @Override
                    public void caretUpdate(CaretEvent e) {
                        txtNameCaretUpdate(e);
                    }
                });
                txtName.addFocusListener(new FocusAdapter() {
                    @Override
                    public void focusLost(FocusEvent e) {
                        txtNameFocusLost(e);
                    }
                });

                //---- jLabel16 ----
                jLabel16.setText("Produkt:");

                GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addGap(23, 23, 23)
                                    .addComponent(txtName, GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)))
                            .addContainerGap())
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel2)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel3)
                            .addGap(58, 58, 58)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(txtName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addContainerGap(127, Short.MAX_VALUE))
                );
            }
            tabPane.addTab("Name", jPanel1);


            //======== jPanel5 ========
            {

                //---- lblVorhanden ----
                lblVorhanden.setText("Es gibt bereits Medikamente,die so \u00e4hnlich heissen. Ist es vielleicht eins von diesen ?");

                //======== jScrollPane2 ========
                {

                    //---- lstMedVorhanden ----
                    lstMedVorhanden.setModel(new AbstractListModel() {
                        String[] values = {
                            "Eintrag 1",
                            "Eintrag 2",
                            "Eintrag 3",
                            "Eintrag 4",
                            "Eintrag 5"
                        };
                        @Override
                        public int getSize() { return values.length; }
                        @Override
                        public Object getElementAt(int i) { return values[i]; }
                    });
                    lstMedVorhanden.addListSelectionListener(new ListSelectionListener() {
                        @Override
                        public void valueChanged(ListSelectionEvent e) {
                            lstMedVorhandenValueChanged(e);
                        }
                    });
                    jScrollPane2.setViewportView(lstMedVorhanden);
                }

                //---- cbMedNichtVorhanden ----
                cbMedNichtVorhanden.setText("Nein, das gew\u00fcnschte Medikament ist nicht dabei. Ich m\u00f6chte ein neues eingeben.");
                cbMedNichtVorhanden.setBorder(BorderFactory.createEmptyBorder());
                cbMedNichtVorhanden.setMargin(new Insets(0, 0, 0, 0));
                cbMedNichtVorhanden.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cbMedNichtVorhandenItemStateChanged(e);
                    }
                });
                cbMedNichtVorhanden.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        cbMedNichtVorhandenActionPerformed(e);
                    }
                });

                GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                    jPanel5Layout.createParallelGroup()
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, GroupLayout.Alignment.LEADING)
                                .addComponent(lblVorhanden, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbMedNichtVorhanden, GroupLayout.Alignment.LEADING))
                            .addContainerGap(186, Short.MAX_VALUE))
                );
                jPanel5Layout.setVerticalGroup(
                    jPanel5Layout.createParallelGroup()
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblVorhanden)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbMedNichtVorhanden)
                            .addContainerGap())
                );
            }
            tabPane.addTab("Info1", jPanel5);


            //======== jPanel2 ========
            {

                //---- jLabel4 ----
                jLabel4.setText("Geben Sie jetzt die evtl. vorhandene Zusatzbezeichnungen ein.");

                //---- txtZusatz ----
                txtZusatz.addCaretListener(new CaretListener() {
                    @Override
                    public void caretUpdate(CaretEvent e) {
                        txtZusatzCaretUpdate(e);
                    }
                });

                //---- jLabel6 ----
                jLabel6.setFont(new Font("Dialog", Font.PLAIN, 12));
                jLabel6.setText("Das kann z.B. sein \"10mg\", \"retard\", \"forte\" etc... H\u00e4ufig handelt es sich um Angaben");

                //---- jLabel11 ----
                jLabel11.setFont(new Font("Dialog", Font.PLAIN, 12));
                jLabel11.setText("zur St\u00e4rke oder zur Wirkstoffentfaltung.");

                //---- jLabel12 ----
                jLabel12.setText("Geben Sie an, welche Darreichungsform vorliegt:");

                //---- cmbForm ----
                cmbForm.setModel(new DefaultComboBoxModel(new String[] {
                    "Eintrag 1",
                    "Eintrag 2",
                    "Eintrag 3",
                    "Eintrag 4"
                }));
                cmbForm.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cmbFormItemStateChanged(e);
                    }
                });

                //---- lblMedName ----
                lblMedName.setFont(new Font("Dialog", Font.BOLD, 14));
                lblMedName.setForeground(new Color(51, 51, 255));
                lblMedName.setText("jLabel10");

                GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup()
                                .addComponent(lblMedName)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6)
                                .addComponent(jLabel11)
                                .addComponent(txtZusatz, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbForm, 0, 387, Short.MAX_VALUE)))
                            .addContainerGap())
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblMedName)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel6)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel11)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtZusatz, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(cmbForm, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(76, Short.MAX_VALUE))
                );
            }
            tabPane.addTab("Zusatz", jPanel2);


            //======== jPanel6 ========
            {

                //---- lblZusatz ----
                lblZusatz.setText("Es gibt bereits Zus\u00e4tze, die so \u00e4hnlich heissen. Ist es vielleicht einer von diesen ?");

                //---- cbZusatzNichtVorhanden ----
                cbZusatzNichtVorhanden.setText("Nein, keiner von denen.");
                cbZusatzNichtVorhanden.setBorder(BorderFactory.createEmptyBorder());
                cbZusatzNichtVorhanden.setMargin(new Insets(0, 0, 0, 0));
                cbZusatzNichtVorhanden.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cbZusatzNichtVorhandenItemStateChanged(e);
                    }
                });

                //======== jScrollPane3 ========
                {

                    //---- lstDaf ----
                    lstDaf.setModel(new AbstractListModel() {
                        String[] values = {
                            "Eintrag 1",
                            "Eintrag 2",
                            "Eintrag 3",
                            "Eintrag 4",
                            "Eintrag 5"
                        };
                        @Override
                        public int getSize() { return values.length; }
                        @Override
                        public Object getElementAt(int i) { return values[i]; }
                    });
                    lstDaf.addListSelectionListener(new ListSelectionListener() {
                        @Override
                        public void valueChanged(ListSelectionEvent e) {
                            lstDafValueChanged(e);
                        }
                    });
                    jScrollPane3.setViewportView(lstDaf);
                }

                GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
                jPanel6.setLayout(jPanel6Layout);
                jPanel6Layout.setHorizontalGroup(
                    jPanel6Layout.createParallelGroup()
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel6Layout.createParallelGroup()
                                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                                .addComponent(lblZusatz, GroupLayout.PREFERRED_SIZE, 511, GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbZusatzNichtVorhanden))
                            .addContainerGap())
                );
                jPanel6Layout.setVerticalGroup(
                    jPanel6Layout.createParallelGroup()
                        .addGroup(jPanel6Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblZusatz)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbZusatzNichtVorhanden)
                            .addContainerGap())
                );
            }
            tabPane.addTab("Info2", jPanel6);


            //======== jPanel7 ========
            {

                //---- jLabel7 ----
                jLabel7.setText("M\u00f6chten Sie direkt eine Verpackungsgr\u00f6\u00dfe eingeben ?");

                //---- cbKeinePackung ----
                cbKeinePackung.setSelected(true);
                cbKeinePackung.setText("Nein, jetzt nicht.");
                cbKeinePackung.setBorder(BorderFactory.createEmptyBorder());
                cbKeinePackung.setMargin(new Insets(0, 0, 0, 0));
                cbKeinePackung.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cbKeinePackungItemStateChanged(e);
                    }
                });

                //======== pnlPackung ========
                {
                    pnlPackung.setBorder(new EtchedBorder());

                    //---- jLabel13 ----
                    jLabel13.setText("PZN:");

                    //---- txtPZN ----
                    txtPZN.addCaretListener(new CaretListener() {
                        @Override
                        public void caretUpdate(CaretEvent e) {
                            txtPZNCaretUpdate(e);
                        }
                    });
                    txtPZN.addFocusListener(new FocusAdapter() {
                        @Override
                        public void focusGained(FocusEvent e) {
                            txtPZNFocusGained(e);
                        }
                        @Override
                        public void focusLost(FocusEvent e) {
                            txtPZNFocusLost(e);
                        }
                    });

                    //---- jLabel14 ----
                    jLabel14.setText("Gr\u00f6\u00dfe:");

                    //---- cmbGroesse ----
                    cmbGroesse.setModel(new DefaultComboBoxModel(new String[] {
                        "Item 1",
                        "Item 2",
                        "Item 3",
                        "Item 4"
                    }));

                    //---- jLabel15 ----
                    jLabel15.setText("Inhalt:");

                    //---- lblPackEinheit ----
                    lblPackEinheit.setText("jLabel5");

                    //---- lblPack1 ----
                    lblPack1.setForeground(Color.red);
                    lblPack1.setText("Eine Packung mit dieser PZN ist schon vorhanden. Sie brauchen keine neue");

                    //---- lblPack2 ----
                    lblPack2.setForeground(Color.red);
                    lblPack2.setText("einzugeben. Am besten Sie brechen die Bearbeitung hier einfach ab.");

                    //---- txtInhalt ----
                    txtInhalt.setHorizontalAlignment(SwingConstants.RIGHT);
                    txtInhalt.setText("0");
                    txtInhalt.addFocusListener(new FocusAdapter() {
                        @Override
                        public void focusGained(FocusEvent e) {
                            txtInhaltFocusGained(e);
                        }
                        @Override
                        public void focusLost(FocusEvent e) {
                            txtInhaltFocusLost(e);
                        }
                    });

                    GroupLayout pnlPackungLayout = new GroupLayout(pnlPackung);
                    pnlPackung.setLayout(pnlPackungLayout);
                    pnlPackungLayout.setHorizontalGroup(
                        pnlPackungLayout.createParallelGroup()
                            .addGroup(pnlPackungLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlPackungLayout.createParallelGroup()
                                    .addGroup(pnlPackungLayout.createSequentialGroup()
                                        .addGroup(pnlPackungLayout.createParallelGroup()
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel15))
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(pnlPackungLayout.createParallelGroup()
                                            .addComponent(cmbGroesse, 0, 599, Short.MAX_VALUE)
                                            .addComponent(txtPZN, GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                                            .addGroup(pnlPackungLayout.createSequentialGroup()
                                                .addComponent(txtInhalt, GroupLayout.PREFERRED_SIZE, 94, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblPackEinheit))))
                                    .addComponent(lblPack1)
                                    .addComponent(lblPack2))
                                .addContainerGap())
                    );
                    pnlPackungLayout.setVerticalGroup(
                        pnlPackungLayout.createParallelGroup()
                            .addGroup(pnlPackungLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(pnlPackungLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(txtPZN, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlPackungLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(cmbGroesse, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(pnlPackungLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lblPackEinheit)
                                    .addComponent(txtInhalt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPack1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPack2)
                                .addContainerGap(52, Short.MAX_VALUE))
                    );
                }

                GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
                jPanel7.setLayout(jPanel7Layout);
                jPanel7Layout.setHorizontalGroup(
                    jPanel7Layout.createParallelGroup()
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel7Layout.createParallelGroup()
                                .addComponent(pnlPackung, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbKeinePackung)
                                .addComponent(jLabel7))
                            .addContainerGap())
                );
                jPanel7Layout.setVerticalGroup(
                    jPanel7Layout.createParallelGroup()
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel7)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbKeinePackung)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlPackung, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }
            tabPane.addTab("Packung", jPanel7);


            //======== jPanel8 ========
            {

                //---- cmbHersteller ----
                cmbHersteller.setModel(new DefaultComboBoxModel(new String[] {
                    "Eintrag 1",
                    "Eintrag 2",
                    "Eintrag 3",
                    "Eintrag 4"
                }));
                cmbHersteller.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cmbHerstellerItemStateChanged(e);
                    }
                });

                //---- btnEditHersteller ----
                btnEditHersteller.setBackground(Color.white);
                btnEditHersteller.setIcon(new ImageIcon(getClass().getResource("/artwork/16x16/edit.png")));
                btnEditHersteller.setToolTipText("Neuen Hersteller eingeben.");
                btnEditHersteller.setBorderPainted(false);
                btnEditHersteller.setOpaque(false);
                btnEditHersteller.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btnEditHerstellerActionPerformed(e);
                    }
                });

                //---- jLabel17 ----
                jLabel17.setText("Bitte geben Sie den Hersteller des Produktes an. Sollte er sich nicht in der Liste befinden,");

                //---- jLabel10 ----
                jLabel10.setText("dann geben Sie bitte einen neuen ein.");

                GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
                jPanel8.setLayout(jPanel8Layout);
                jPanel8Layout.setHorizontalGroup(
                    jPanel8Layout.createParallelGroup()
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel8Layout.createParallelGroup()
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addComponent(cmbHersteller, GroupLayout.PREFERRED_SIZE, 561, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnEditHersteller, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel17)
                                .addComponent(jLabel10))
                            .addContainerGap(96, Short.MAX_VALUE))
                );
                jPanel8Layout.setVerticalGroup(
                    jPanel8Layout.createParallelGroup()
                        .addGroup(jPanel8Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel8Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(btnEditHersteller)
                                .addGroup(jPanel8Layout.createSequentialGroup()
                                    .addComponent(jLabel17)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel10)
                                    .addGap(32, 32, 32)
                                    .addComponent(cmbHersteller, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap(155, Short.MAX_VALUE))
                );
            }
            tabPane.addTab("Hersteller", jPanel8);


            //======== jPanel9 ========
            {

                //======== jScrollPane4 ========
                {
                    jScrollPane4.setViewportView(txtPaneFertig);
                }

                GroupLayout jPanel9Layout = new GroupLayout(jPanel9);
                jPanel9.setLayout(jPanel9Layout);
                jPanel9Layout.setHorizontalGroup(
                    jPanel9Layout.createParallelGroup()
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                            .addContainerGap())
                );
                jPanel9Layout.setVerticalGroup(
                    jPanel9Layout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                            .addContainerGap())
                );
            }
            tabPane.addTab("Fertig", jPanel9);

        }

        //---- btnCancel ----
        btnCancel.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
        btnCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnCancelActionPerformed(e);
            }
        });

        //---- btnNext ----
        btnNext.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/1rightarrow.png")));
        btnNext.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnNextActionPerformed(e);
            }
        });

        //---- btnBack ----
        btnBack.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/1leftarrow.png")));
        btnBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnBackActionPerformed(e);
            }
        });

        //---- btnApply ----
        btnApply.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
        btnApply.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnApplyActionPerformed(e);
            }
        });

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addComponent(btnBack)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnNext)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCancel)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnApply))
                        .addComponent(tabPane, GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(tabPane, GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(btnApply)
                        .addComponent(btnCancel)
                        .addComponent(btnNext)
                        .addComponent(btnBack))
                    .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHerstellerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbHerstellerItemStateChanged
        if (cmbHersteller.getSelectedIndex() > 0) {
            okUntilTab = jtst.getIndex("Fertig");
            btnNext.setEnabled(true);
        } else {
            okUntilTab = jtst.getIndex("Hersteller");
            btnNext.setEnabled(false);
        }
    }//GEN-LAST:event_cmbHerstellerItemStateChanged

    private void btnEditHerstellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditHerstellerActionPerformed
//        MedHersteller hersteller = new MedHersteller()
//        new DlgMedHersteller(this);
//        //ResultSet rs1 = op.tools.DBRetrieve.getResultSet("MPHersteller", new String[]{"MPHID", "Firma", "Ort"}, new String[]{"Firma", "Ort"});
//        cmbHersteller.setModel(SYSTools.rs2cmb(rs1, true));
//        okUntilTab = jtst.getIndex("Hersteller");
//        btnNext.setEnabled(false);

    }//GEN-LAST:event_btnEditHerstellerActionPerformed

    private void txtPZNFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPZNFocusLost
        txtPZN.setText(pzn);
        OPDE.debug(txtPZN.getText());
    }//GEN-LAST:event_txtPZNFocusLost

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        try {
            // Hier beginnt eine Transaktion
            OPDE.getDb().db.setAutoCommit(false);
            OPDE.getDb().db.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
            OPDE.getDb().db.commit();

            long medpid = 0;
            if (mpprodukte != null) {
                medpid = op.tools.DBHandling.insertRecord("MProdukte", mpprodukte);
                mpprodukte.clear();
                if (medpid < 0) {
                    throw new SQLException();
                }
            }
            long dafid = 0;
            if (mpdarreichung != null) {
                if (medpid > 0) {
                    mpdarreichung.put("MedPID", medpid);
                }
                dafid = op.tools.DBHandling.insertRecord("MPDarreichung", mpdarreichung);
                mpdarreichung.clear();
//                DBHandling.setAPV(dafid, apv, cbTauschen.isSelected());
                if (dafid < 0) {
                    throw new SQLException();
                }
            }
            if (mppackung != null) {
                if (dafid > 0) {
                    mppackung.put("DafID", dafid);
                }
                long mpid = op.tools.DBHandling.insertRecord("MPackung", mppackung);
                mppackung.clear();
                if (mpid < 0) {
                    throw new SQLException();
                }
            }

            OPDE.getDb().db.commit();
            OPDE.getDb().db.setAutoCommit(true);


        } catch (SQLException ex) {
            try {
                OPDE.getDb().db.rollback();
            } catch (SQLException ex1) {
                ex1.printStackTrace();
                System.exit(1);
            }
        }
        result.add(0, txtName.getText());
        this.dispose();
    }//GEN-LAST:event_btnApplyActionPerformed

    private void txtPZNCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPZNCaretUpdate
        if (ignore) {
            return;
        }
        if (txtPZN.getText().matches("^ß?\\d{7}")) { // Hier sucht man nach einer PZN. Im Barcode ist das führende 'ß' enthalten.
            pzn = txtPZN.getText();
            pzn = (pzn.startsWith("ß") ? pzn.substring(1) : pzn);
            //ignore = true; txtPZN.setText(pzn); ignore = false;
            HashMap pznsuche = op.tools.DBRetrieve.getSingleRecord("MPackung", "PZN", pzn);
            lblPack1.setVisible(pznsuche != null);
            lblPack2.setVisible(pznsuche != null);

        } else {
            lblPack1.setVisible(false);
            lblPack2.setVisible(false);
        }
        packValid();
    }//GEN-LAST:event_txtPZNCaretUpdate

    private void cbKeinePackungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbKeinePackungItemStateChanged
        pnlPackung.setVisible(!cbKeinePackung.isSelected());
        packValid();
        txtPZN.requestFocus();
    }//GEN-LAST:event_cbKeinePackungItemStateChanged

    private void txtAPVFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAPVFocusLost
        try {
//            apv = Double.parseDouble(txtAPV.getText());
        } catch (NumberFormatException ex) {
//            txtAPV.setText("1.0");
            apv = 1d;
        }

    }//GEN-LAST:event_txtAPVFocusLost

    private void packValid() {
        boolean valid;
        valid = cbKeinePackung.isSelected() ||
                (txtPZN.getText().matches("^ß?\\d{7}") && !lblPack1.isVisible());
        if (valid) {
            // Wenn man ein neues Medikament eingibt, muss man auch einen Hersteller zuordnen.
            if (!initInfo1 || cbMedNichtVorhanden.isSelected()) {
                punchedOutTabs[jtst.getIndex("Hersteller")] = false;
                okUntilTab = jtst.getIndex("Hersteller");
            } else {
                punchedOutTabs[jtst.getIndex("Hersteller")] = true;
                okUntilTab = jtst.getIndex("Fertig");
            }

            btnNext.setEnabled(true);
        } else {
            okUntilTab = jtst.getIndex("Packung");
            btnNext.setEnabled(false);
        }
        setTabsEnabled();
    }

    //    private void nameValid(){
//        boolean valid;
//        valid =
//                !txtName.getText().equals("")
//                &&
//                cmbHersteller.getSelectedIndex() > 0;
//        setTabsEnabled();
//    }
    private void cmbFormItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFormItemStateChanged
        ListElement leFormID = (ListElement) cmbForm.getSelectedItem();
        form.clear();
        form = DBRetrieve.getSingleRecord("MPFormen", "FormID", leFormID.getPk());
        int packEinheit = ((Integer) form.get("PackEinheit")).intValue();
//        int anwEinheit = ((Integer) form.get("AnwEinheit")).intValue();
//        boolean apvNoetig = packEinheit != anwEinheit;
//        okUntilTab = jtst.getIndex(apvNoetig ? "Form" : "Packung");
//        punchedOutTabs[jtst.getIndex("Form")] = !apvNoetig;
//        setTabsEnabled();
        txtZusatzCaretUpdate(null);
//        int formstatus = DBHandling.getFormStatusFormID(leFormID.getPk());
//        cbTauschen.setSelected(false);
//        cbTauschen.setEnabled(formstatus == DBHandling.FORMSTATUS_APV_PER_DAF);
        String zubereitung = SYSTools.catchNull(form.get("Zubereitung").toString());
        String anwtext = SYSTools.catchNull(form.get("AnwText").toString());
        String daf = (zubereitung.equals("") ? anwtext : zubereitung);
        lblPackEinheit.setText(SYSConst.EINHEIT[packEinheit] + " " + daf);
        initForm = false;
        initInfo2 = false;
        initPackung = false;
        initHersteller = false;
    }//GEN-LAST:event_cmbFormItemStateChanged

    private void lstDafValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstDafValueChanged
        if (ignore) {
            return;
        }
        ignore = true;
        cbZusatzNichtVorhanden.setSelected(lstDaf.getSelectionModel().isSelectionEmpty());
        if (!lstDaf.getSelectionModel().isSelectionEmpty()) {
            okUntilTab = jtst.getIndex("Packung");
            punchedOutTabs[jtst.getIndex("Form")] = true;
        } else {
            okUntilTab = jtst.getIndex("Form");
            punchedOutTabs[jtst.getIndex("Form")] = false;
        }
        btnNext.setEnabled(true);
        setTabsEnabled();

        ListElement leDafID = (ListElement) lstDaf.getSelectedValue();
        long formid = ((BigInteger) DBRetrieve.getSingleValue("MPDarreichung", "FormID", "DafID", leDafID.getPk())).longValue();
        apv = DBHandling.getAPV(leDafID.getPk(), "");

        form.clear();
        form = DBRetrieve.getSingleRecord("MPFormen", "FormID", formid);
        ignore = false;
        initForm = false;
        initPackung = false;
        initHersteller = false;
    }//GEN-LAST:event_lstDafValueChanged

    private void cbZusatzNichtVorhandenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbZusatzNichtVorhandenItemStateChanged
        if (ignore) {
            return;
        }
        ignore = true;
        if (cbZusatzNichtVorhanden.isSelected()) {
            lstDaf.getSelectionModel().clearSelection();
        } else {
            lstDaf.setSelectedIndex(0);
        }
        btnNext.setEnabled(true);
        ignore = false;
        initForm = false;
        initPackung = false;
        initHersteller = false;
    }//GEN-LAST:event_cbZusatzNichtVorhandenItemStateChanged

    private void cbMedNichtVorhandenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbMedNichtVorhandenItemStateChanged
        if (ignore) {
            return;
        }
        ignore = true;
        if (cbMedNichtVorhanden.isSelected()) {
            lstMedVorhanden.getSelectionModel().clearSelection();
            txtName.setText(initialMedName);
        } else {
            lstMedVorhanden.setSelectedIndex(0);
            txtName.setText(((ListElement) lstMedVorhanden.getSelectedValue()).getValue());
        }
        btnNext.setEnabled(true);
        okUntilTab = jtst.getIndex("Zusatz");
        setTabsEnabled();
        ignore = false;
        initForm = false;
        initInfo2 = false;
        initPackung = false;
        initHersteller = false;
        initZusatz = false;
    }//GEN-LAST:event_cbMedNichtVorhandenItemStateChanged

    private void txtNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtNameCaretUpdate
        if (ignore) {
            return;
        }
        if (txtName.getText().equalsIgnoreCase("")) {
            okUntilTab = jtst.getIndex("Name");
            btnNext.setEnabled(false);
        } else {
            HashMap where = new HashMap();
            where.put("Bezeichnung", new Object[]{"%" + txtName.getText() + "%", "like"});
            long count = ((Long) op.tools.DBRetrieve.getSingleValue("MProdukte", "count(*)", where)).longValue();
            punchedOutTabs[jtst.getIndex("Info1")] = count == 0;
            okUntilTab = jtst.getIndex(count == 0 ? "Zusatz" : "Info1");
            btnNext.setEnabled(true);
        }
        setTabsEnabled();
        initForm = false;
        initInfo1 = false;
        initInfo2 = false;
        initPackung = false;
        initHersteller = false;
        initZusatz = false;
        initialMedName = txtName.getText();
    }//GEN-LAST:event_txtNameCaretUpdate

    private void cbMedNichtVorhandenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMedNichtVorhandenActionPerformed
    }//GEN-LAST:event_cbMedNichtVorhandenActionPerformed

    private void lstMedVorhandenValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMedVorhandenValueChanged
        if (ignore) {
            return;
        }
        ignore = true;
        cbMedNichtVorhanden.setSelected(lstMedVorhanden.getSelectionModel().isSelectionEmpty());
        txtName.setText(lstMedVorhanden.getSelectedValue().toString());
        if (!lstMedVorhanden.getSelectionModel().isSelectionEmpty()) {
            btnNext.setEnabled(true);
            okUntilTab = jtst.getIndex("Zusatz");
            setTabsEnabled();
        }
        ignore = false;
        initForm = false;
        initInfo2 = false;
        initPackung = false;
        initHersteller = false;
        initZusatz = false;
    }//GEN-LAST:event_lstMedVorhandenValueChanged

    private void txtNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNameFocusLost
    }//GEN-LAST:event_txtNameFocusLost

    private void setTabsEnabled() {
        for (int i = 0; i < tabPane.getTabCount(); i++) {
            tabPane.setEnabledAt(i, i <= okUntilTab && !punchedOutTabs[i]);
        }
    }

    private void tabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPaneStateChanged
        String title = tabPane.getTitleAt(tabPane.getSelectedIndex());
        if (title.equalsIgnoreCase("Willkommen")) {
            txtPaneWillkommen.setContentType("text/html");
            txtPaneWillkommen.setText("<html><body>" +
                    "Mit diesem Programm können Sie:" +
                    "<ul>" +
                    "<li>neue Medikamente im System eintragen</li>" +
                    "<li>die Darreichungsform bestimmen</li>" +
                    "<li>Packungsgrößen eingeben</li>" +
                    "</ul>" +
                    "Sie werden hierzu Schritt für Schritt durch die Eingabe geführt." +
                    "<p>" +
                    "Sie können jederzeit die Bearbeitung abbrechen, indem Sie auf den <b>X</b> Knopf " +
                    "unten rechts drücken. Drücken Sie auf die blauen <b>Pfeil</b>-Knöpfe um zur nächsten Frage" +
                    "zu gelangen." +
                    "</body></html>");
            btnBack.setEnabled(false);
        } else if (title.equalsIgnoreCase("Name")) {
            txtName.requestFocus();
        } else if (title.equalsIgnoreCase("Info1")) {
            if (!initInfo1) {
                initInfo1 = true;
                String medName = txtName.getText();
                HashMap where = new HashMap();
                where.put("Bezeichnung", new Object[]{"%" + medName + "%", "like"});
                ResultSet rs = op.tools.DBRetrieve.getResultSet("MProdukte", new String[]{"MedPID", "Bezeichnung"}, where, new String[]{"Bezeichnung"});
                boolean exactMatch = op.tools.DBRetrieve.getSingleValue("MProdukte", "MedPID", "Bezeichnung", medName) != null;
                ignore = true;
                lstMedVorhanden.setModel(SYSTools.rs2lst(rs));
                ListElement le = (ListElement) lstMedVorhanden.getSelectedValue();
                lstMedVorhanden.setSelectedIndex(0);
                cbMedNichtVorhanden.setSelected(false);
                cbMedNichtVorhanden.setEnabled(!exactMatch);
                ignore = false;
                lstMedVorhandenValueChanged(null);
            }
        } else if (title.equalsIgnoreCase("Zusatz")) {
            if (!initZusatz) {
                if (initInfo1 && !cbMedNichtVorhanden.isSelected()) {
                    lblMedName.setText(lstMedVorhanden.getSelectedValue().toString());
                    cmbHersteller.setEnabled(false);
                } else {
                    lblMedName.setText(txtName.getText());
                    cmbHersteller.setEnabled(true);
                }
                initZusatz = true;
                //txtZusatzCaretUpdate(null);
                cmbFormItemStateChanged(null);
                txtZusatzCaretUpdate(null);
                txtZusatz.requestFocus();
            }
        } else if (title.equalsIgnoreCase("Info2")) {
            if (!initInfo2) {
                initInfo2 = true;

                ListElement leMedPID = (ListElement) lstMedVorhanden.getSelectedValue();
                ListElement leFormID = (ListElement) cmbForm.getSelectedItem();
                String zusatz = txtZusatz.getText();
                if (!zusatz.equalsIgnoreCase("")) {
                    zusatz = "%" + zusatz + "%";
                }
                try {
                    PreparedStatement stmt;
                    ResultSet rs;
                    String sql =
                            " SELECT DafID, Concat(Zusatz,', ', if(Zubereitung = '', AnwText, Zubereitung), if(Zubereitung = '', '', if(AnwText = '', " +
                                    " CASE PackEinheit WHEN 1 THEN 'Stück' WHEN 2 THEN 'ml' WHEN 3 THEN 'l' WHEN 4 THEN 'mg' WHEN 5 " +
                                    " THEN 'g' WHEN 6 THEN 'cm' WHEN 7 THEN 'm' ELSE '!FEHLER!' END, AnwText))) text FROM MPDarreichung D " +
                                    " INNER JOIN MPFormen F ON F.FormID = D.FormID " +
                                    " WHERE D.MedPID = ? AND D.FormID = ? AND D.Zusatz like ? ";
                    stmt = OPDE.getDb().db.prepareStatement(sql);
                    stmt.setLong(1, leMedPID.getPk());
                    stmt.setLong(2, leFormID.getPk());
                    stmt.setString(3, zusatz);
                    rs = stmt.executeQuery();
                    lstDaf.setModel(SYSTools.rs2lst(rs));
                    lstDaf.setSelectedIndex(0);
                    lstDafValueChanged(null);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        } else if (title.equalsIgnoreCase("Form")) {
            if (!initForm) {
                initForm = true;
                int packEinheit = ((Integer) form.get("PackEinheit")).intValue();
                int anwEinheit = ((Integer) form.get("AnwEinheit")).intValue();
                String anwtext = SYSTools.catchNull(form.get("AnwText").toString());
                String daf = (anwtext.equals("") ? SYSConst.EINHEIT[anwEinheit] : anwtext);
//                lblAPV.setText(daf + " entsprechen 1 " + SYSConst.EINHEIT[packEinheit]);
//                txtAPV.setText("1");
                okUntilTab = jtst.getIndex("Packung");
                setTabsEnabled();
                btnNext.setEnabled(true);
            }
        } else if (title.equalsIgnoreCase("Packung")) {
            if (initPackung) {
                if (!cbKeinePackung.isSelected()) {
                    cbKeinePackungItemStateChanged(null);
                }
            } else {
                initPackung = true;
                cbKeinePackung.setSelected(true);
                cbKeinePackungItemStateChanged(null);
                lblPack1.setVisible(false);
                lblPack2.setVisible(false);
                txtInhalt.setText("1");
            }
            if (initInfo2 && lstDaf.getSelectedIndex() > -1) {
                cbKeinePackung.setSelected(false);
                cbKeinePackung.setEnabled(false);
                cbKeinePackungItemStateChanged(null);
            } else {
                cbKeinePackung.setEnabled(true);
            }
        } else if (title.equalsIgnoreCase("Hersteller")) {
            if (!initHersteller) {
                initHersteller = true;
                ResultSet rs1 = op.tools.DBRetrieve.getResultSet("MPHersteller", new String[]{"MPHID", "Firma", "Ort"}, new String[]{"Firma", "Ort"});
                cmbHersteller.setModel(SYSTools.rs2cmb(rs1, true));
                okUntilTab = jtst.getIndex("Hersteller");
                btnNext.setEnabled(false);
            }
        } else if (title.equalsIgnoreCase("Fertig")) {
            mpprodukte = null;
            mpdarreichung = null;
            mppackung = null;
            long medpid = 0;

            String medikament;
            if (initInfo1 && !cbMedNichtVorhanden.isSelected()) {
                medikament = lstMedVorhanden.getSelectedValue().toString() + " <i>(bereits vorhanden)</i>";
                medpid = ((ListElement) lstMedVorhanden.getSelectedValue()).getPk();
            } else {
                mpprodukte = new HashMap();
                mpprodukte.put("Bezeichnung", txtName.getText());
                mpprodukte.put("UKennung", OPDE.getLogin().getUser().getUKennung());
                ListElement hersteller = (ListElement) cmbHersteller.getSelectedItem();
                mpprodukte.put("MPHID", hersteller.getPk());
                medikament = txtName.getText() + " <i>(wird neu eingetragen)</i>";
            }
            int packEinheit = ((Integer) form.get("PackEinheit")).intValue();
            int anwEinheit = ((Integer) form.get("AnwEinheit")).intValue();

            String verhältnis = "";
            if (anwEinheit != packEinheit) {
                verhältnis = apv + " " + SYSConst.EINHEIT[anwEinheit] + " entspricht 1 " + SYSConst.EINHEIT[packEinheit];
                verhältnis = " <i>(" + verhältnis + ")</i>";
            }


            long dafid = 0;
            String zubereitung = SYSTools.catchNull(form.get("Zubereitung").toString());
            String anwtext = SYSTools.catchNull(form.get("AnwText").toString());

            String daf = (zubereitung.equals("") ? anwtext : zubereitung + " " + anwtext);

            if (initInfo2 && !cbZusatzNichtVorhanden.isSelected()) {
                daf = lstDaf.getSelectedValue().toString() + " <i>(bereits vorhanden)</i>";
                dafid = ((ListElement) lstDaf.getSelectedValue()).getPk();
            } else {
                String zusatz = (txtZusatz.getText().equals("") ? "" : "\"" + txtZusatz.getText() + "\"");
                daf = zusatz + " " + daf + " <i>(wird neu eingetragen)</i>";

                mpdarreichung = new HashMap();
                mpdarreichung.put("Zusatz", txtZusatz.getText());
                mpdarreichung.put("MedPID", medpid);
                mpdarreichung.put("FormID", form.get("FormID"));
                //mpdarreichung.put("APV", apv);
                //mpdarreichung.put("Kalkulieren", form.get("Kalkulieren"));
                mpdarreichung.put("UKennung", OPDE.getLogin().getUser().getUKennung());
            }

            String packung = "";
            if (!cbKeinePackung.isSelected()) {
                packung = "PZN: " + txtPZN.getText() + ", Größe: " + cmbGroesse.getSelectedItem().toString() +
                        ", Inhalt: " + txtInhalt.getText() + " " + lblPackEinheit.getText();
                mppackung = new HashMap();
                mppackung.put("DafID", dafid);
                mppackung.put("PZN", txtPZN.getText());
                mppackung.put("Groesse", cmbGroesse.getSelectedIndex());
                double inhalt = Double.parseDouble(txtInhalt.getText().replace(",", "."));
                mppackung.put("Inhalt", inhalt);
                mppackung.put("UKennung", OPDE.getLogin().getUser().getUKennung());
            } else {
                packung = "Sie haben keine Packungen eingegeben.";
            }

            txtPaneFertig.setContentType("text/html");
            String result = "<html><body><h2>Wir sind fast fertig.</h2>";
            result += "<h3>Folgendes haben Sie eingeben:</h3>";
            result += "<ul>";
            result += "<li>Medikament: <b>" + medikament + "</b></li>";
            if (cmbHersteller.getSelectedIndex() > 0) {
                result += "<li>Hersteller: <b>" + cmbHersteller.getSelectedItem().toString() + "</b></li>";
            }
            result += "<li>Zusatzbezeichnung und Darreichungsform: <b>" + daf + "</b></li>";
            result += (packEinheit != anwEinheit ? "<li>Umrechnungsverhältnis: <b>" + verhältnis + "</b></li>" : "");
            result += "<li>Packungen: <b>" + packung + "</b></li>";
            result += "</ul>";
            result += "<br/>";
            result += "<h3/>Wenn Sie sicher sind, dann drücken Sie jetzt auf den grünen Bestätigungsknopf.</h3>";
            result += "</body></html>";
            txtPaneFertig.setText(result);
        }
        btnApply.setEnabled(tabPane.getTitleAt(tabPane.getSelectedIndex()).equalsIgnoreCase("Fertig"));
    }//GEN-LAST:event_tabPaneStateChanged

    private void txtPZNFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPZNFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtPZNFocusGained

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        int newIndex = tabPane.getSelectedIndex() + 1;
        while (newIndex <= okUntilTab && punchedOutTabs[newIndex]) {
            newIndex++;
        }
        if (newIndex <= okUntilTab) { //Hat geklappt.
            tabPane.setSelectedIndex(newIndex);
        }
        btnNext.setEnabled(tabPane.getSelectedIndex() < okUntilTab);
        btnBack.setEnabled(tabPane.getSelectedIndex() > 0);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int newIndex = tabPane.getSelectedIndex() - 1;
        while (newIndex >= 0 && punchedOutTabs[newIndex]) {
            newIndex--;
        }
        if (newIndex >= 0) { //Hat geklappt.
            tabPane.setSelectedIndex(newIndex);
        }
        btnBack.setEnabled(tabPane.getSelectedIndex() > 0);
        btnNext.setEnabled(tabPane.getSelectedIndex() < okUntilTab);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtZusatzCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtZusatzCaretUpdate
        // Eine Prüfung von vorhandenen Zusätzen ist nur Nötig,
        // wenn wir uns auf ein bereits bestehendes Medikament beziehen.
        if (initInfo1 && !cbMedNichtVorhanden.isSelected()) {
            String zusatz = txtZusatz.getText();
            if (!zusatz.equalsIgnoreCase("")) {
                zusatz = "%" + zusatz + "%";
            }
            ListElement leMedPID = (ListElement) lstMedVorhanden.getSelectedValue();
            ListElement leFormID = (ListElement) cmbForm.getSelectedItem();
            HashMap where = new HashMap();
            where.put("MedPID", new Object[]{leMedPID.getPk(), "="});
            where.put("FormID", new Object[]{leFormID.getPk(), "="});
            where.put("Zusatz", new Object[]{zusatz, "like"});
            long count = ((Long) op.tools.DBRetrieve.getSingleValue("MPDarreichung", "count(*)", where)).longValue();
            punchedOutTabs[jtst.getIndex("Info2")] = count == 0;
        } else {
            punchedOutTabs[jtst.getIndex("Info2")] = true;
        }
        int packEinheit = ((Integer) form.get("PackEinheit")).intValue();
        int anwEinheit = ((Integer) form.get("AnwEinheit")).intValue();
        boolean apvNoetig = packEinheit != anwEinheit;
        okUntilTab = jtst.getIndex(apvNoetig ? "Form" : "Packung");
        punchedOutTabs[jtst.getIndex("Form")] = !apvNoetig;
        btnNext.setEnabled(true);
        setTabsEnabled();
        initForm = false;
        initInfo2 = false;
        initPackung = false;
        initHersteller = false;
    }//GEN-LAST:event_txtZusatzCaretUpdate

    private void txtInhaltFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInhaltFocusLost
        try {
            double inhalt = Double.parseDouble(txtInhalt.getText().replace(",", "."));
            if (inhalt <= 0d) {
                txtInhalt.setText("1");
            }
        } catch (NumberFormatException ex) {
            txtInhalt.setText("1");
        }
    }//GEN-LAST:event_txtInhaltFocusLost

    private void txtInhaltFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInhaltFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtInhaltFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JTabbedPane tabPane;
    private JPanel jPanel4;
    private JLabel jLabel5;
    private JScrollPane jScrollPane1;
    private JTextPane txtPaneWillkommen;
    private JPanel jPanel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JTextField txtName;
    private JLabel jLabel16;
    private JPanel jPanel5;
    private JLabel lblVorhanden;
    private JScrollPane jScrollPane2;
    private JList lstMedVorhanden;
    private JCheckBox cbMedNichtVorhanden;
    private JPanel jPanel2;
    private JLabel jLabel4;
    private JTextField txtZusatz;
    private JLabel jLabel6;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JSeparator jSeparator1;
    private JComboBox cmbForm;
    private JLabel lblMedName;
    private JPanel jPanel6;
    private JLabel lblZusatz;
    private JCheckBox cbZusatzNichtVorhanden;
    private JScrollPane jScrollPane3;
    private JList lstDaf;
    private JPanel jPanel7;
    private JLabel jLabel7;
    private JCheckBox cbKeinePackung;
    private JPanel pnlPackung;
    private JLabel jLabel13;
    private JFormattedTextField txtPZN;
    private JLabel jLabel14;
    private JComboBox cmbGroesse;
    private JLabel jLabel15;
    private JLabel lblPackEinheit;
    private JLabel lblPack1;
    private JLabel lblPack2;
    private JTextField txtInhalt;
    private JPanel jPanel8;
    private JComboBox cmbHersteller;
    private JButton btnEditHersteller;
    private JLabel jLabel17;
    private JLabel jLabel10;
    private JPanel jPanel9;
    private JScrollPane jScrollPane4;
    private JTextPane txtPaneFertig;
    private JButton btnCancel;
    private JButton btnNext;
    private JButton btnBack;
    private JButton btnApply;
    // End of variables declaration//GEN-END:variables
}

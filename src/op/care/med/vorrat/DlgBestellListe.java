/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */

package op.care.med.vorrat;

import op.OCSec;
import op.OPDE;
import op.tools.DBHandling;
import op.tools.SYSTools;
import tablerenderer.RNDStandard;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ComponentEvent;

/**
 * @author root
 */
public class DlgBestellListe extends javax.swing.JDialog {
    private ListSelectionListener lsl;
    private OCSec ocs;
    private JPopupMenu menu;
    private JDialog thisDialog;
    private Component parent;

    /**
     * Creates new form DlgBestellListe
     */
    public DlgBestellListe(java.awt.Frame parent) {
        super(parent, true);
        this.parent = parent;
        initDialog();
    }

    private void initDialog() {
        ocs = OPDE.getOCSec();
        thisDialog = this;
        initComponents();
        loadTable();
        SYSTools.centerOnParent(parent, this);
        setVisible(true);
    }

    public void dispose() {
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void loadTable() {
        ListSelectionModel lsm = tblBestell.getSelectionModel();
        if (lsl != null) lsm.removeListSelectionListener(lsl);
        lsl = new HandleSelections();

        tblBestell.setModel(new TMBestellung());
        tblBestell.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        lsm.addListSelectionListener(lsl);

        jspBestell.dispatchEvent(new ComponentEvent(jspBestell, ComponentEvent.COMPONENT_RESIZED));
        tblBestell.getColumnModel().getColumn(0).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(1).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(2).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(3).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(4).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(5).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(6).setCellRenderer(new RNDStandard());
        tblBestell.getColumnModel().getColumn(7).setCellRenderer(new RNDStandard());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblFrage = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jspBestell = new javax.swing.JScrollPane();
        tblBestell = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        btnPrint = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        lblFrage.setFont(new java.awt.Font("Dialog", 1, 24));
        lblFrage.setText("Bestellungen \u00dcbersicht");

        tblBestell.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Titel 1", "Titel 2", "Titel 3", "Titel 4"
                }
        ));
        tblBestell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblBestellMousePressed(evt);
            }
        });

        jspBestell.setViewportView(tblBestell);

        jToolBar1.setFloatable(false);
        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/fileprint.png")));
        btnPrint.setText("Drucken");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        jToolBar1.add(btnPrint);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
        btnClose.setText("Schlie\u00dfen");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jToolBar1.add(btnClose);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jspBestell, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                                        .addComponent(lblFrage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE))
                                .addContainerGap())
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFrage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jspBestell, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblBestellMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBestellMousePressed
        if (!evt.isPopupTrigger()) return;
        final ListSelectionModel lsm = tblBestell.getSelectionModel();
        Point p = evt.getPoint();

        int col = tblBestell.columnAtPoint(p);
        int row = tblBestell.rowAtPoint(p);

        if (lsm.isSelectionEmpty()) {
            lsm.setSelectionInterval(row, row);
        }

        SYSTools.unregisterListeners(menu);
        menu = new JPopupMenu();

        JMenuItem itemPopupDelete = new JMenuItem("Löschen");
        itemPopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (lsm.getMinSelectionIndex() == lsm.getMaxSelectionIndex() || // Mehr als einer ausgewaählt. Dann lieber nachfragen.
                        JOptionPane.showConfirmDialog(thisDialog, "Sind sie sicher ?") == JOptionPane.YES_OPTION) {
                    for (int i = 0; i < tblBestell.getModel().getRowCount(); i++) {
                        if (lsm.isSelectedIndex(i)) {
                            DBHandling.deleteRecords("MPBestellung", "BestellID", tblBestell.getModel().getValueAt(i, TMBestellung.COL_BESTELLID));
                        }
                    }
                }
                loadTable();
            }
        });

        menu.add(itemPopupDelete);
        ocs.setEnabled(this, "itemPopupDelete", itemPopupDelete, true);

        menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());
    }//GEN-LAST:event_tblBestellMousePressed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
//        HashMap tmcolassign = new HashMap();
//        tmcolassign.put("bestellid", new Integer(TMBestellung.COL_BESTELLID));
//        tmcolassign.put("arztid", new Integer(TMBestellung.COL_ARZTID));
//        tmcolassign.put("arztname", new Integer(TMBestellung.COL_ARZT));
//        tmcolassign.put("bwname", new Integer(TMBestellung.COL_BW));
//        tmcolassign.put("vorrat", new Integer(TMBestellung.COL_VORRAT));
//        tmcolassign.put("bemerkung", new Integer(TMBestellung.COL_TEXT));
//////        HashMap einrichtung = op.tools.DBRetrieve.getEinrichtung();
//////        String ein = einrichtung.get("Bezeichnung").toString()+", " +
//////                einrichtung.get("Strasse").toString()+", " +
//////                einrichtung.get("PLZ").toString()+" "+ einrichtung.get("Ort").toString()+", " +
//////                "Tel.:"+einrichtung.get("Tel").toString()+", " +
//////                "Fax.:"+einrichtung.get("Fax").toString();
//////        einrichtung.clear();
////        HashMap params = new HashMap();
////        params.put("einrichtung", ein);
////        params.put("prtInfo", "Gedruckt am: "+SYSCalendar.printGCGermanStyle(new GregorianCalendar())+ " // "+OPDE.getLogin().getUser().getUKennung());
//        SYSPrint.printReport(false, tblBestell.getModel(), tmcolassign, params, "medibestellung");
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed


    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnPrint;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane jspBestell;
    private javax.swing.JLabel lblFrage;
    private javax.swing.JTable tblBestell;
    // Ende der Variablendeklaration//GEN-END:variables

    class HandleSelections implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent lse) {
            // Erst reagieren wenn der Auswahl-Vorgang abgeschlossen ist.
            TableModel tm = tblBestell.getModel();
            if (tm.getRowCount() <= 0) {
                return;
            }
            if (!lse.getValueIsAdjusting()) {
                DefaultListSelectionModel lsm = (DefaultListSelectionModel) lse.getSource();
                if (lsm.isSelectionEmpty()) {

                } else {

                }
            }

        }
    }
}

/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */

package op.care.med.vorrat;

import op.OPDE;
import op.care.med.DBHandling;
import op.tools.*;

import javax.swing.*;
import java.awt.*;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class DlgEditBestand extends javax.swing.JDialog {
    private long vorid;
    private Component parent;
    private boolean ignoreEvent;
    private long currentDafID;
    private long currentMPID;
    private double menge = 0d;

    /**
     * Creates new form DlgEditBestand
     */
    public DlgEditBestand(JDialog parent, long vorid) {
        super(parent, true);
        this.vorid = vorid;
        this.parent = parent;
        this.currentDafID = 0;
        this.currentMPID = 0;
        initDialog();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cmbDAF = new javax.swing.JComboBox();
        cmbPack = new javax.swing.JComboBox();
        jdcIN = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBemerkung = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtMenge = new javax.swing.JTextField();
        lblEinheit = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16));
        jLabel1.setText("Bestand");

        cmbDAF.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbDAF.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDAFItemStateChanged(evt);
            }
        });

        cmbPack.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbPack.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPackItemStateChanged(evt);
            }
        });

        jLabel2.setText("Eingang:");

        txtBemerkung.setColumns(20);
        txtBemerkung.setRows(5);
        jScrollPane1.setViewportView(txtBemerkung);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
        btnSave.setText("Speichern");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel3.setText("Menge:");

        txtMenge.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtMenge.setText("jTextField1");
        txtMenge.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtMengeCaretUpdate(evt);
            }
        });
        txtMenge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMengeFocusLost(evt);
            }
        });

        lblEinheit.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblEinheit.setText("jLabel4");

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
        btnCancel.setText("Abbrechen");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                                        .addComponent(cmbDAF, javax.swing.GroupLayout.Alignment.TRAILING, 0, 520, Short.MAX_VALUE)
                                        .addComponent(cmbPack, 0, 520, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(17, 17, 17)
                                                .addComponent(jdcIN, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtMenge, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblEinheit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnSave)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCancel)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbDAF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbPack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jdcIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3)
                                                .addComponent(txtMenge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblEinheit)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCancel)
                                        .addComponent(btnSave))
                                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtMengeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMengeFocusLost
        txtMenge.setText(Double.toString(menge));
    }//GEN-LAST:event_txtMengeFocusLost

    private void txtMengeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtMengeCaretUpdate
        menge = GuiChecks.checkDouble(evt, true);
    }//GEN-LAST:event_txtMengeCaretUpdate

    private void cmbPackItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPackItemStateChanged
        ListElement e = (ListElement) cmbPack.getSelectedItem();
        currentMPID = e.getPk();
        BigDecimal bd = (BigDecimal) op.tools.DBRetrieve.getSingleValue("MPackung", "Inhalt", "MPID", currentMPID);
        txtMenge.setText(Double.toString(bd.doubleValue()));
    }//GEN-LAST:event_cmbPackItemStateChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        save();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cmbDAFItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDAFItemStateChanged
        ListElement e = (ListElement) cmbDAF.getSelectedItem();
        currentDafID = e.getPk();
        lblEinheit.setText(DBHandling.getPackEinheit(currentDafID));
        initCmbPack();
    }//GEN-LAST:event_cmbDAFItemStateChanged

    private void save() {
        Connection db = OPDE.getDb().db;
        try {

            // Hier beginnt eine Transaktion            
            db.setAutoCommit(false);
            db.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
            db.commit();

            HashMap hm = new HashMap();

            hm.put("DafID", currentDafID);
            hm.put("MPID", currentMPID);
            hm.put("Ein", jdcIN.getDate());
            hm.put("Anbruch", "!BAW!");
            hm.put("Aus", "!BAW!");
            hm.put("Text", txtBemerkung.getText());
            hm.put("UKennung", OPDE.getLogin().getUser().getUKennung());
            hm.put("VorID", vorid);

            long bestid = op.tools.DBHandling.insertRecord("MPBestand", hm);
            if (bestid <= 0) {
                throw new SQLException();
            }

            HashMap hm2 = new HashMap();
            hm2.put("Menge", menge);
            hm2.put("BestID", bestid);
            hm2.put("UKennung", OPDE.getLogin().getUser().getUKennung());
            hm2.put("PIT", "!NOW!");

            if (op.tools.DBHandling.insertRecord("MPBuchung", hm2) <= 0) {
                throw new SQLException();
            }

            db.commit();
            db.setAutoCommit(true);

        } catch (SQLException ex) {
            try {
                db.rollback();
            } catch (SQLException ex1) {
                new DlgException(ex1);
                ex1.printStackTrace();
                System.exit(1);
            }
            new DlgException(ex);
        }
    }

    private void initDialog() {
        setTitle(SYSTools.getWindowTitle("Einzelbestand"));
        initComponents();
        ignoreEvent = true;
        initCmbDAF();
        ignoreEvent = false;
        jdcIN.setDate(SYSCalendar.today_date());
        SYSTools.centerOnParent(parent, this);
        txtMenge.setText("0.00");
        setVisible(true);

    }

    public void dispose() {
        jdcIN.cleanup();
        SYSTools.unregisterListeners(jdcIN);
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void initCmbDAF() {
        cmbDAF.setModel(SYSTools.rs2cmb(DBHandling.getDAF2Vorrat(vorid)));
        cmbDAFItemStateChanged(null);
    }

    private void initCmbPack() {
        ResultSet rs = null;
        try {
            if (vorid > 0) {
                String sql = "SELECT P.MPID, " +
                        " CONCAT(P.Inhalt, ' ', " +
                        " CASE f.PackEinheit WHEN 1 THEN 'Stück' WHEN 2 THEN 'ml' WHEN 3 THEN 'l' WHEN 4 THEN 'mg' WHEN 5 " +
                        " THEN 'g' WHEN 6 THEN 'cm' WHEN 7 THEN 'm' ELSE '!FEHLER!' END ) Einheit, " +
                        " CASE P.Groesse WHEN 0 THEN 'N1' WHEN 1 THEN 'N2' " +
                        " WHEN 2 THEN 'N3' WHEN 3 THEN 'AP' WHEN 4 THEN 'OP' ELSE " +
                        " '' END Groesse," +
                        " CONCAT('PZN: ', P.PZN) PZN" +
                        " FROM MPackung P " +
                        " INNER JOIN MPDarreichung daf ON daf.DafID = P.DafID" +
                        " INNER JOIN MPFormen f ON f.FormID = daf.FormID " +
                        " WHERE P.DafID = ?" +
                        " ORDER BY P.Groesse";

                PreparedStatement stmt = OPDE.getDb().db.prepareStatement(sql);
                stmt.setLong(1, currentDafID);
                rs = stmt.executeQuery();
            }
        } catch (SQLException ex) {
            new DlgException(ex);
        }

        cmbPack.setModel(SYSTools.rs2cmb(rs, true));
    }

    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbDAF;
    private javax.swing.JComboBox cmbPack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JDateChooser jdcIN;
    private javax.swing.JLabel lblEinheit;
    private javax.swing.JTextArea txtBemerkung;
    private javax.swing.JTextField txtMenge;
    // Ende der Variablendeklaration//GEN-END:variables

}

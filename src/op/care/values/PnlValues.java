/*
 * OffenePflege
 * Copyright (C) 2006-2012 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.values;

import com.jidesoft.pane.CollapsiblePane;
import com.jidesoft.pane.CollapsiblePanes;
import com.jidesoft.pane.event.CollapsiblePaneAdapter;
import com.jidesoft.pane.event.CollapsiblePaneEvent;
import com.jidesoft.swing.JideBoxLayout;
import entity.info.Resident;
import entity.info.ResidentTools;
import entity.values.ResValue;
import entity.values.ResValueTools;
import entity.values.ResValueType;
import op.OPDE;
import op.tools.*;
import org.jdesktop.swingx.VerticalLayout;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.text.DateFormat;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class PnlValues extends NursingRecordsPanel {

    private Resident resident;

    private boolean initPhase;
    private JPopupMenu menu;
    public static final String internalClassID = "nursingrecords.vitalparameters";

    private JScrollPane jspSearch;
    private CollapsiblePanes searchPanes;
    private JToggleButton tbShowReplaced;

    private ArrayList<ResValueType> lstValueTypes;
    private HashMap<String, CollapsiblePane> cpMap;
    private HashMap<String, JPanel> contentmap;
    private HashMap<ResValue, JPanel> linemap;
    private HashMap<String, ArrayList<ResValue>> valuecache;

    private Color[] color1, color2;
    Format monthFormatter = new SimpleDateFormat("MMMM yyyy");


    /**
     * Creates new form pnlVitalwerte
     */
    public PnlValues(Resident resident, JScrollPane jspSearch) {
        initPhase = true;
        this.resident = resident;
        this.jspSearch = jspSearch;

        initComponents();
        initPanel();
//        prepareSearchArea();
        switchResident(resident);
        initPhase = false;
    }

    private void initPanel() {
        cpMap = new HashMap<String, CollapsiblePane>();
        contentmap = new HashMap<String, JPanel>();
        linemap = new HashMap<ResValue, JPanel>();
        valuecache = new HashMap<String, ArrayList<ResValue>>();

        EntityManager em = OPDE.createEM();
        Query query = em.createQuery("SELECT t FROM ResValueType t ORDER BY t.text");
        lstValueTypes = new ArrayList<ResValueType>(query.getResultList());
        em.close();

        color1 = SYSConst.blue1;
        color2 = SYSConst.greyscale;

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jspValues = new JScrollPane();
        cpsValues = new CollapsiblePanes();

        //======== this ========
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

        //======== jspValues ========
        {

            //======== cpsValues ========
            {
                cpsValues.setLayout(new BoxLayout(cpsValues, BoxLayout.X_AXIS));
            }
            jspValues.setViewportView(cpsValues);
        }
        add(jspValues);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void switchResident(Resident resident) {
        this.resident = resident;
        OPDE.getDisplayManager().setMainMessage(ResidentTools.getLabelText(resident));
        reloadDisplay();
    }

    @Override
    public void reload() {
        reloadDisplay();
    }

    private void reloadDisplay() {
        /***
         *               _                 _ ____  _           _
         *      _ __ ___| | ___   __ _  __| |  _ \(_)___ _ __ | | __ _ _   _
         *     | '__/ _ \ |/ _ \ / _` |/ _` | | | | / __| '_ \| |/ _` | | | |
         *     | | |  __/ | (_) | (_| | (_| | |_| | \__ \ |_) | | (_| | |_| |
         *     |_|  \___|_|\___/ \__,_|\__,_|____/|_|___/ .__/|_|\__,_|\__, |
         *                                              |_|            |___/
         */


        final boolean withworker = false;
        cpsValues.removeAll();
        cpMap.clear();


        if (withworker) {

//            OPDE.getMainframe().setBlocked(true);
//            OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), -1, 100));
//
//            SwingWorker worker = new SwingWorker() {
//
//                @Override
//                protected Object doInBackground() throws Exception {
//                    int progress = -1;
//                    OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), progress, lstPrescriptions.size()));
//
//                    lstPrescriptions = PrescriptionTools.getAll(resident);
//                    Collections.sort(lstPrescriptions);
//
//                    for (Prescription prescription : lstPrescriptions) {
//                        progress++;
//                        createCP4(prescription);
//                        OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), progress, lstPrescriptions.size()));
//                    }
//
//                    return null;
//                }
//
//                @Override
//                protected void done() {
//                    buildPanel();
//                    OPDE.getDisplayManager().setProgressBarMessage(null);
//                    OPDE.getMainframe().setBlocked(false);
//                }
//            };
//            worker.execute();

        } else {
//
            for (ResValueType vtype : lstValueTypes) {
                createCP4(vtype);
            }

            buildPanel();
        }

    }


    private CollapsiblePane createCP4(final ResValueType vtype) {
        /***
         *                          _        ____ ____  _  _    ____     __    _           _____               __
         *       ___ _ __ ___  __ _| |_ ___ / ___|  _ \| || |  / /\ \   / /_ _| |_   _  __|_   _|   _ _ __   __\ \
         *      / __| '__/ _ \/ _` | __/ _ \ |   | |_) | || |_| |  \ \ / / _` | | | | |/ _ \| || | | | '_ \ / _ \ |
         *     | (__| | |  __/ (_| | ||  __/ |___|  __/|__   _| |   \ V / (_| | | |_| |  __/| || |_| | |_) |  __/ |
         *      \___|_|  \___|\__,_|\__\___|\____|_|      |_| | |    \_/ \__,_|_|\__,_|\___||_| \__, | .__/ \___| |
         *                                                     \_\                              |___/|_|       /_/
         */
        final String key = vtype.getID() + ".xtypes";
        if (!cpMap.containsKey(key)) {
            cpMap.put(key, new CollapsiblePane());
            try {
                cpMap.get(key).setCollapsed(true);
            } catch (PropertyVetoException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }
        final CollapsiblePane cpType = cpMap.get(key);

        String title = "<html><font size=+1>" +
                vtype.getText() +
                "</font></html>";

        DefaultCPTitle cptitle = new DefaultCPTitle(title, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    cpType.setCollapsed(!cpType.isCollapsed());
                } catch (PropertyVetoException pve) {
                    // BAH!
                }
            }
        });
        cpType.setTitleLabelComponent(cptitle.getMain());
        cpType.setSlidingDirection(SwingConstants.SOUTH);

        /***
         *      _____    _ _ _
         *     | ____|__| (_) |_
         *     |  _| / _` | | __|
         *     | |__| (_| | | |_
         *     |_____\__,_|_|\__|
         *
         */
        final JButton btnAdd = new JButton(SYSConst.icon22add);
        btnAdd.setPressedIcon(SYSConst.icon22edit1Pressed);
        btnAdd.setAlignmentX(Component.RIGHT_ALIGNMENT);
        btnAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setBorder(null);
        btnAdd.setToolTipText(OPDE.lang.getString(internalClassID + ".btnAdd.tooltip") + " (" + vtype.getText() + ")");
        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {


            }
        });
        cptitle.getRight().add(btnAdd);

        cpType.addCollapsiblePaneListener(new CollapsiblePaneAdapter() {
            @Override
            public void paneExpanded(CollapsiblePaneEvent collapsiblePaneEvent) {
                cpType.setContentPane(createContentPanel4(vtype));
            }
        });

        if (!cpType.isCollapsed()) {
            cpType.setContentPane(createContentPanel4(vtype));
        }

        cpType.setHorizontalAlignment(SwingConstants.LEADING);
        cpType.setOpaque(false);
        cpType.setBackground(getColor(vtype, SYSConst.medium1));

        return cpType;
    }


    private JPanel createContentPanel4(final ResValueType vtype) {
        JPanel pnlContent = new JPanel(new VerticalLayout());
        Pair<DateTime, DateTime> minmax = ResValueTools.getMinMax(resident, vtype);

        if (minmax != null) {
            DateMidnight start = minmax.getFirst().toDateMidnight().dayOfMonth().withMinimumValue();
            DateMidnight end = resident.isActive() ? new DateMidnight() : minmax.getSecond().toDateMidnight().dayOfMonth().withMinimumValue();
            for (int year = end.getYear(); year >= start.getYear(); year--) {
                pnlContent.add(createCP4(vtype, year, start, end));
            }
        }
        return pnlContent;
    }


    private CollapsiblePane createCP4(final ResValueType vtype, final int year, DateMidnight min, DateMidnight max) {
        /***
         *                          _        ____ ____  _  _    ______           _     _            _       _       _ __
         *       ___ _ __ ___  __ _| |_ ___ / ___|  _ \| || |  / /  _ \ ___  ___(_) __| | ___ _ __ | |_    (_)_ __ | |\ \
         *      / __| '__/ _ \/ _` | __/ _ \ |   | |_) | || |_| || |_) / _ \/ __| |/ _` |/ _ \ '_ \| __|   | | '_ \| __| |
         *     | (__| | |  __/ (_| | ||  __/ |___|  __/|__   _| ||  _ <  __/\__ \ | (_| |  __/ | | | |_ _  | | | | | |_| |
         *      \___|_|  \___|\__,_|\__\___|\____|_|      |_| | ||_| \_\___||___/_|\__,_|\___|_| |_|\__( ) |_|_| |_|\__| |
         *                                                     \_\                                     |/             /_/
         */

        final DateMidnight start = new DateMidnight(year, 1, 1).isBefore(min.dayOfMonth().withMinimumValue()) ? min.dayOfMonth().withMinimumValue() : new DateMidnight(year, 1, 1);
        final DateMidnight end = new DateMidnight(year, 12, 31).isAfter(max.dayOfMonth().withMaximumValue()) ? max.dayOfMonth().withMaximumValue() : new DateMidnight(year, 12, 31);

        final String key = vtype.getID() + ".xtypes." + Integer.toString(year) + ".year";
        if (!cpMap.containsKey(key)) {
            cpMap.put(key, new CollapsiblePane());
            try {
                cpMap.get(key).setCollapsed(true);
            } catch (PropertyVetoException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }

        }


        final CollapsiblePane cpYear = cpMap.get(key);


        String title = "<html><font size=+1>" +
                "<b>" + Integer.toString(year) + "</b>" +
                "</font></html>";

        DefaultCPTitle cptitle = new DefaultCPTitle(title, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    cpYear.setCollapsed(!cpYear.isCollapsed());
                } catch (PropertyVetoException pve) {
                    // BAH!
                }
            }
        });


        final JButton btnExpandAll = new JButton(SYSConst.icon22expand);
        btnExpandAll.setPressedIcon(SYSConst.icon22addPressed);
        btnExpandAll.setAlignmentX(Component.RIGHT_ALIGNMENT);
        btnExpandAll.setContentAreaFilled(false);
        btnExpandAll.setBorder(null);
        btnExpandAll.setToolTipText(OPDE.lang.getString("misc.msg.expandall"));
        btnExpandAll.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    GUITools.setCollapsed(cpYear, false);
                } catch (PropertyVetoException e) {
                    // bah!
                }
            }


        });
        cptitle.getRight().add(btnExpandAll);

        final JButton btnCollapseAll = new JButton(SYSConst.icon22collapse);
        btnCollapseAll.setPressedIcon(SYSConst.icon22addPressed);
        btnCollapseAll.setAlignmentX(Component.RIGHT_ALIGNMENT);
        btnCollapseAll.setContentAreaFilled(false);
        btnCollapseAll.setBorder(null);
        btnCollapseAll.setToolTipText(OPDE.lang.getString("misc.msg.collapseall"));
        btnCollapseAll.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    GUITools.setCollapsed(cpYear, true);
                } catch (PropertyVetoException e) {
                    // bah!
                }
            }


        });
        cptitle.getRight().add(btnCollapseAll);

        cpYear.setTitleLabelComponent(cptitle.getMain());
        cpYear.setSlidingDirection(SwingConstants.SOUTH);


        /***
         *           _ _      _            _
         *       ___| (_) ___| | _____  __| |   ___  _ __    _   _  ___  __ _ _ __
         *      / __| | |/ __| |/ / _ \/ _` |  / _ \| '_ \  | | | |/ _ \/ _` | '__|
         *     | (__| | | (__|   <  __/ (_| | | (_) | | | | | |_| |  __/ (_| | |
         *      \___|_|_|\___|_|\_\___|\__,_|  \___/|_| |_|  \__, |\___|\__,_|_|
         *                                                   |___/
         */
        cpYear.addCollapsiblePaneListener(new CollapsiblePaneAdapter() {
            @Override
            public void paneExpanded(CollapsiblePaneEvent collapsiblePaneEvent) {
                JPanel pnlContent = new JPanel(new VerticalLayout());

                // somebody clicked on the year
                for (DateMidnight month = end; month.compareTo(start) >= 0; month = month.minusMonths(1)) {
                    pnlContent.add(createCP4(vtype, month));
                }

                cpYear.setContentPane(pnlContent);
                cpYear.setOpaque(false);
            }
        });
        cpYear.setBackground(getColor(vtype, SYSConst.light4));

//        if (!cpYear.isCollapsed()) {
//            JPanel pnlContent = new JPanel(new VerticalLayout());
//            for (DateMidnight month = end; month.compareTo(start) > 0; month = month.minusMonths(1)) {
//                pnlContent.add(createCP4(resident, month));
//            }
//            cpYear.setContentPane(pnlContent);
//        }

        cpYear.setHorizontalAlignment(SwingConstants.LEADING);
        cpYear.setOpaque(false);

        return cpYear;
    }


    private CollapsiblePane createCP4(final ResValueType vtype, final DateMidnight month) {
        /***
         *                          _        ____ ____  _  _    ______           _     _            _       ____        _      _____ _              __
         *       ___ _ __ ___  __ _| |_ ___ / ___|  _ \| || |  / /  _ \ ___  ___(_) __| | ___ _ __ | |_    |  _ \  __ _| |_ __|_   _(_)_ __ ___   __\ \
         *      / __| '__/ _ \/ _` | __/ _ \ |   | |_) | || |_| || |_) / _ \/ __| |/ _` |/ _ \ '_ \| __|   | | | |/ _` | __/ _ \| | | | '_ ` _ \ / _ \ |
         *     | (__| | |  __/ (_| | ||  __/ |___|  __/|__   _| ||  _ <  __/\__ \ | (_| |  __/ | | | |_ _  | |_| | (_| | ||  __/| | | | | | | | |  __/ |
         *      \___|_|  \___|\__,_|\__\___|\____|_|      |_| | ||_| \_\___||___/_|\__,_|\___|_| |_|\__( ) |____/ \__,_|\__\___||_| |_|_| |_| |_|\___| |
         *                                                     \_\                                     |/                                           /_/
         */
        final String key = vtype.getID() + ".xtypes." + monthFormatter.format(month.toDate()) + ".month";
        if (!cpMap.containsKey(key)) {
            cpMap.put(key, new CollapsiblePane());
            try {
                cpMap.get(key).setCollapsed(true);
            } catch (PropertyVetoException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }

        }
        final CollapsiblePane cpMonth = cpMap.get(key);

        String title = "<html>" +
                monthFormatter.format(month.toDate()) +
                "</html>";

        DefaultCPTitle cptitle = new DefaultCPTitle(title, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    cpMonth.setCollapsed(!cpMonth.isCollapsed());
                } catch (PropertyVetoException pve) {
                    // BAH!
                }
            }
        });

        /***
         *      ____       _       _   __  __             _   _
         *     |  _ \ _ __(_)_ __ | |_|  \/  | ___  _ __ | |_| |__
         *     | |_) | '__| | '_ \| __| |\/| |/ _ \| '_ \| __| '_ \
         *     |  __/| |  | | | | | |_| |  | | (_) | | | | |_| | | |
         *     |_|   |_|  |_|_| |_|\__|_|  |_|\___/|_| |_|\__|_| |_|
         *
         */
        final JButton btnPrintMonth = new JButton(SYSConst.icon22print2);
        btnPrintMonth.setPressedIcon(SYSConst.icon22print2Pressed);
        btnPrintMonth.setAlignmentX(Component.RIGHT_ALIGNMENT);
        btnPrintMonth.setContentAreaFilled(false);
        btnPrintMonth.setBorder(null);
        btnPrintMonth.setToolTipText(OPDE.lang.getString("misc.tooltips.btnprintmonth"));
        btnPrintMonth.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {

//                if (!cashmap.containsKey(key)) {
//                    cashmap.put(key, AllowanceTools.getMonth(resident, month.toDate()));
//                }
//                SYSFilesTools.print(AllowanceTools.getAsHTML(cashmap.get(key), carry, currentResident), true);
            }
        });
        cptitle.getRight().add(btnPrintMonth);

        cpMonth.setTitleLabelComponent(cptitle.getMain());
        cpMonth.setSlidingDirection(SwingConstants.SOUTH);
        cpMonth.setOpaque(false);
        cpMonth.setBackground(getColor(vtype, SYSConst.light3));

        /***
         *           _ _      _            _                                       _   _
         *       ___| (_) ___| | _____  __| |   ___  _ __    _ __ ___   ___  _ __ | |_| |__
         *      / __| | |/ __| |/ / _ \/ _` |  / _ \| '_ \  | '_ ` _ \ / _ \| '_ \| __| '_ \
         *     | (__| | | (__|   <  __/ (_| | | (_) | | | | | | | | | | (_) | | | | |_| | | |
         *      \___|_|_|\___|_|\_\___|\__,_|  \___/|_| |_| |_| |_| |_|\___/|_| |_|\__|_| |_|
         *
         */
        cpMonth.addCollapsiblePaneListener(new CollapsiblePaneAdapter() {
            @Override
            public void paneExpanded(CollapsiblePaneEvent collapsiblePaneEvent) {
                cpMonth.setContentPane(createContentPanel4(vtype, month));
            }
        });

        if (!cpMonth.isCollapsed()) {
            cpMonth.setContentPane(createContentPanel4(vtype, month));
        }

        cpMonth.setHorizontalAlignment(SwingConstants.LEADING);
        cpMonth.setOpaque(false);

        return cpMonth;
    }

    private JPanel createContentPanel4(final ResValueType vtype, DateMidnight month) {
        final String key = vtype.getID() + ".xtypes." + monthFormatter.format(month.toDate()) + ".month";

        if (!contentmap.containsKey(key)) {

            JPanel pnlMonth = new JPanel(new VerticalLayout());

            pnlMonth.setBackground(getColor(vtype, SYSConst.light2));
            pnlMonth.setOpaque(false);

            valuecache.put(key, ResValueTools.getResValues(resident, vtype, month.toDateTime()));

            for (final ResValue resValue : valuecache.get(key)) {
                String title = "<html><table border=\"0\">" +
                        "<tr>" +
                        "<td width=\"200\" align=\"left\">" + DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.SHORT).format(resValue.getPit()) + "</td>" +
                        "<td width=\"130\" align=\"left\">" + resValue.getType().getText() + "</td>" +
                        "<td width=\"240\" align=\"left\">" + ResValueTools.getValueAsHTML(resValue) + "</td>" +
                        "<td width=\"200\" align=\"left\">" + resValue.getUser().getFullname() + "</td>" +
                        "</tr>" +
                        "</table>" +
                        "</html>";
                final DefaultCPTitle pnlTitle = new DefaultCPTitle(title, null);


//                /***
//                 *      _____    _ _ _
//                 *     | ____|__| (_) |_
//                 *     |  _| / _` | | __|
//                 *     | |__| (_| | | |_
//                 *     |_____\__,_|_|\__|
//                 *
//                 */
//                final JButton btnEdit = new JButton(SYSConst.icon22edit1);
//                btnEdit.setPressedIcon(SYSConst.icon22edit1Pressed);
//                btnEdit.setAlignmentX(Component.RIGHT_ALIGNMENT);
//                btnEdit.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
//                btnEdit.setContentAreaFilled(false);
//                btnEdit.setBorder(null);
//                btnEdit.setToolTipText(OPDE.lang.getString(internalClassID + ".btnedit.tooltip"));
//                btnEdit.addActionListener(new ActionListener() {
//                    @Override
//                    public void actionPerformed(ActionEvent actionEvent) {
//
//                        final JidePopup popupTX = new JidePopup();
//                        popupTX.setMovable(false);
//                        PnlTX pnlTX = new PnlTX(allowance, new Closure() {
//                            @Override
//                            public void execute(Object o) {
//                                OPDE.debug(o);
//                                if (o != null) {
//
//                                    EntityManager em = OPDE.createEM();
//                                    try {
//                                        em.getTransaction().begin();
//                                        Allowance myAllowance = em.merge((Allowance) o);
//                                        em.lock(em.merge(myAllowance.getResident()), LockModeType.OPTIMISTIC);
//                                        em.lock(myAllowance, LockModeType.OPTIMISTIC);
//                                        em.getTransaction().commit();
//
//                                        DateTime txDate = new DateTime(myAllowance.getDate());
//
//                                        final String keyMonth = myAllowance.getResident().getRID() + "-" + txDate.getYear() + "-" + txDate.getMonthOfYear();
//                                        contentmap.remove(keyMonth);
//                                        cpMap.remove(keyMonth);
//                                        cashmap.get(keyMonth).remove(allowance);
//                                        cashmap.get(keyMonth).add(myAllowance);
//                                        Collections.sort(cashmap.get(keyMonth));
//                                        createCP4(myAllowance.getResident());
//
//                                        try {
//                                            cpMap.get(keyMonth).setCollapsed(false);
//                                        } catch (PropertyVetoException e) {
//                                            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
//                                        }
//
//                                        buildPanel();
//                                    } catch (OptimisticLockException ole) {
//                                        if (em.getTransaction().isActive()) {
//                                            em.getTransaction().rollback();
//                                        }
//                                        if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
//                                            OPDE.getMainframe().emptyFrame();
//                                            OPDE.getMainframe().afterLogin();
//                                        }
//                                        OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
//                                    } catch (Exception e) {
//                                        if (em.getTransaction().isActive()) {
//                                            em.getTransaction().rollback();
//                                        }
//                                        OPDE.fatal(e);
//                                    } finally {
//                                        em.close();
//                                    }
//
//                                }
//                            }
//                        });
//                        popupTX.setContentPane(pnlTX);
//                        popupTX.removeExcludedComponent(pnlTX);
//                        popupTX.setDefaultFocusComponent(pnlTX);
//
//                        popupTX.setOwner(btnEdit);
//                        GUITools.showPopup(popupTX, SwingConstants.WEST);
//
//                    }
//                });
//                singlePaneRight.add(btnEdit);
//
//                /***
//                 *      ____       _      _
//                 *     |  _ \  ___| | ___| |_ ___
//                 *     | | | |/ _ \ |/ _ \ __/ _ \
//                 *     | |_| |  __/ |  __/ ||  __/
//                 *     |____/ \___|_|\___|\__\___|
//                 *
//                 */
//                final JButton btnDelete = new JButton(SYSConst.icon22delete);
//                btnDelete.setPressedIcon(SYSConst.icon22deletePressed);
//                btnDelete.setAlignmentX(Component.RIGHT_ALIGNMENT);
//                btnDelete.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
//                btnDelete.setContentAreaFilled(false);
//                btnDelete.setBorder(null);
//                btnDelete.setToolTipText(OPDE.lang.getString(internalClassID + ".btndelete.tooltip"));
//                btnDelete.addActionListener(new ActionListener() {
//                    @Override
//                    public void actionPerformed(ActionEvent actionEvent) {
//                        new DlgYesNo(OPDE.lang.getString("misc.questions.delete1") + "<br/><i>" + allowance.getText() + "&nbsp;" + cf.format(allowance.getAmount()) + "</i><br/>" + OPDE.lang.getString("misc.questions.delete2"), SYSConst.icon48delete, new Closure() {
//                            @Override
//                            public void execute(Object answer) {
//                                if (answer.equals(JOptionPane.YES_OPTION)) {
//                                    EntityManager em = OPDE.createEM();
//                                    try {
//                                        em.getTransaction().begin();
//                                        Allowance myAllowance = em.merge(allowance);
//                                        em.lock(em.merge(myAllowance.getResident()), LockModeType.OPTIMISTIC);
//                                        em.remove(myAllowance);
//                                        em.getTransaction().commit();
//
//                                        DateTime txDate = new DateTime(myAllowance.getDate());
//                                        final String keyMonth = myAllowance.getResident().getRID() + "-" + txDate.getYear() + "-" + txDate.getMonthOfYear();
//
//                                        contentmap.remove(keyMonth);
//                                        cpMap.remove(keyMonth);
//                                        cashmap.get(keyMonth).remove(myAllowance);
//                                        createCP4(myAllowance.getResident());
//
//                                        try {
//                                            cpMap.get(keyMonth).setCollapsed(false);
//                                        } catch (PropertyVetoException e) {
//                                            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
//                                        }
//
//                                        buildPanel();
//                                    } catch (OptimisticLockException ole) {
//                                        if (em.getTransaction().isActive()) {
//                                            em.getTransaction().rollback();
//                                        }
//                                        if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
//                                            OPDE.getMainframe().emptyFrame();
//                                            OPDE.getMainframe().afterLogin();
//                                        }
//                                        OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
//                                    } catch (Exception e) {
//                                        if (em.getTransaction().isActive()) {
//                                            em.getTransaction().rollback();
//                                        }
//                                        OPDE.fatal(e);
//                                    } finally {
//                                        em.close();
//                                    }
//                                }
//                            }
//                        });
//
//
//                    }
//                });
//                singlePaneRight.add(btnDelete);
//
                pnlMonth.add(pnlTitle.getMain());
                linemap.put(resValue, pnlTitle.getMain());
//
//                rowsum = rowsum.subtract(allowance.getAmount());
//            }
            }
            contentmap.put(key, pnlMonth);
        }
        return contentmap.get(key);
    }


    private Color getColor(ResValueType vtype, int level) {
        if (lstValueTypes.indexOf(vtype) % 2 == 0) {
            return color1[level];
        } else {
            return color2[level];
        }
    }


    @Override
    public void cleanup() {
        SYSTools.unregisterListeners(this);
    }

//    private void jspTblVWComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspTblVWComponentResized
//        JViewport jv = (JViewport) tblVital.getParent();
//        JScrollPane jsp = (JScrollPane) jv.getParent();
//        Dimension dim = jsp.getSize();
//        // Größe der Massnahmen Spalten ändern.
//        int width = dim.width - 200; // größe - der fixen spalten
//        TableColumnModel tcm1 = tblVital.getColumnModel();
//
//        // Zu Beginn der Applikation steht noch ein standardmodell drin.
//        // das hat nur 4 Spalten. solange braucht sich dieser handler nicht
//        // damit zu befassen.
//        if (tcm1.getColumnCount() < 3) {
//            return;
//        }
//
//        tcm1.getColumn(0).setPreferredWidth(200);
//        tcm1.getColumn(1).setPreferredWidth(width / 3 * 1);
//        tcm1.getColumn(2).setPreferredWidth(width / 3 * 2);
//
//        tcm1.getColumn(0).setHeaderValue(OPDE.lang.getString(internalClassID + ".tabheader1"));
//        tcm1.getColumn(1).setHeaderValue(OPDE.lang.getString(internalClassID + ".tabheader2"));
//        tcm1.getColumn(2).setHeaderValue(OPDE.lang.getString(internalClassID + ".tabheader3"));
//
//
//    }//GEN-LAST:event_jspTblVWComponentResized
//
//    private void reloadTable() {
//        OPDE.getMainframe().setBlocked(true);
//        OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), -1, 100));
//        TableModel oldmodel = tblVital.getModel();
//        tblVital.setModel(new DefaultTableModel());
//        if (oldmodel != null && oldmodel instanceof TMWerte) {
//            ((TMWerte) oldmodel).cleanup();
//        }
//
//        SwingWorker worker = new SwingWorker() {
//            TableModel model;
//
//            @Override
//            protected Object doInBackground() throws Exception {
//                model = new TMWerte(jdcVon.getDate(), resident, cmbAuswahl.getSelectedIndex(), tbShowReplaced.isSelected(), tbShowIDs.isSelected());
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                OPDE.getDisplayManager().setProgressBarMessage(null);
//                OPDE.getMainframe().setBlocked(false);
//                tblVital.setModel(model);
//                tblVital.getColumnModel().getColumn(0).setCellRenderer(new RNDHTML());
//                tblVital.getColumnModel().getColumn(1).setCellRenderer(new RNDHTML());
//                tblVital.getColumnModel().getColumn(2).setCellRenderer(new RNDHTML());
//                jspTblVW.dispatchEvent(new ComponentEvent(jspTblVW, ComponentEvent.COMPONENT_RESIZED));
//            }
//        };
//        worker.execute();
//    }
//
//    private void tblVitalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVitalMousePressed
//
//        Point p = evt.getPoint();
//        Point p2 = evt.getPoint();
//        // Convert a coordinate relative to a component's bounds to screen coordinates
//        SwingUtilities.convertPointToScreen(p2, tblVital);
//        final Point screenposition = p2;
//
//        ListSelectionModel lsm = tblVital.getSelectionModel();
//
//        boolean singleRowSelected = lsm.getMaxSelectionIndex() == lsm.getMinSelectionIndex();
//
//        final int row = tblVital.rowAtPoint(p);
//        final int col = tblVital.columnAtPoint(p);
//
//        if (singleRowSelected) {
//            lsm.setSelectionInterval(row, row);
//        }
//
//        SYSTools.unregisterListeners(menu);
//        menu = new JPopupMenu();
//
//        TMWerte tm = (TMWerte) tblVital.getModel();
//        if (tm.getRowCount() > 0 && row > -1) {
//            final ResValue wert = tm.getBWert(lsm.getLeadSelectionIndex());
//            boolean bearbeitenMoeglich = !wert.isReplaced() && !wert.isDeleted() && singleRowSelected;
//
//            if (evt.isPopupTrigger()) {
//
//                if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.UPDATE)) {
//
////                // KORRIGIEREN
//                    JMenuItem itemPopupEdit = new JMenuItem(OPDE.lang.getString("misc.commands.edit"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/edit.png")));
//                    itemPopupEdit.addActionListener(new java.awt.event.ActionListener() {
//
//                        public void actionPerformed(java.awt.event.ActionEvent evt) {
//
//                            final JidePopup popup = new JidePopup();
//                            popup.setMovable(false);
//                            popup.getContentPane().setLayout(new BoxLayout(popup.getContentPane(), BoxLayout.PAGE_AXIS));
//
//                            final JComponent editor;
//
//                            switch (col) {
//                                case TMWerte.COL_PIT: {
//                                    editor = new PnlUhrzeitDatum(wert.getPit());
//                                    break;
//                                }
//
//                                case TMWerte.COL_CONTENT: {
//
//                                    if (wert.getType() == ResValueTools.RR) {
//                                        editor = new DlgValue(wert.getValue1(), wert.getValue2(), wert.getValue3(), ResValueTools.RRSYS, ResValueTools.UNITS[ResValueTools.RR], ResValueTools.RRDIA, ResValueTools.UNITS[ResValueTools.RR], ResValueTools.VALUES[ResValueTools.PULSE], ResValueTools.UNITS[ResValueTools.PULSE]);
//                                    } else if (wert.isWithoutValue()) {
//                                        editor = null;
//                                    } else {
//                                        editor = new DlgValue(wert.getValue1(), ResValueTools.VALUES[wert.getType()], ResValueTools.UNITS[wert.getType()]);
//                                    }
//                                    break;
//                                }
//
//                                case TMWerte.COL_COMMENT: {
//                                    editor = new JTextArea(SYSTools.catchNull(wert.getText()), 10, 40);
//                                    ((JTextArea) editor).setLineWrap(true);
//                                    ((JTextArea) editor).setWrapStyleWord(true);
//                                    ((JTextArea) editor).setEditable(true);
//                                    break;
//                                }
//                                default: {
//                                    editor = null;
//                                }
//                            }
//
//                            if (editor != null) {
//
//                                JScrollPane pnlEditor = new JScrollPane(editor);
//
//                                JPanel pnl = new JPanel(new BorderLayout(10, 10));
//
//                                pnl.add(pnlEditor, BorderLayout.CENTER);
//
//
//                                final JButton saveButton = new JButton(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
//                                saveButton.addActionListener(new ActionListener() {
//                                    @Override
//                                    public void actionPerformed(ActionEvent actionEvent) {
//
//                                        ResValue newOne = wert.clone();
//                                        popup.hidePopup();
//
//                                        switch (col) {
//                                            case TMWerte.COL_PIT: {
//                                                newOne.setPit(((PnlUhrzeitDatum) editor).getPIT());
//                                                break;
//                                            }
//                                            case TMWerte.COL_CONTENT: {
//                                                DlgValue pnl123 = (DlgValue) editor;
//                                                newOne.setWert(pnl123.getWert1());
//                                                newOne.setValue2(pnl123.getValue2());
//                                                newOne.setValue3(pnl123.getValue3());
//                                                break;
//                                            }
//                                            case TMWerte.COL_COMMENT: {
//                                                newOne.setText(((JTextArea) editor).getText().trim());
//                                                break;
//                                            }
//                                            default: {
//                                                newOne = null;
//                                            }
//                                        }
//
//                                        if (newOne.isWrongValues()) {
//                                            OPDE.getDisplayManager().addSubMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wrongentry"), DisplayMessage.WARNING));
//                                        } else if (col == TMWerte.COL_COMMENT && newOne.getText().equals(wert.getText())) {
//                                            OPDE.getDisplayManager().addSubMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.nochanges"), DisplayMessage.WARNING));
//                                        } else {
//                                            newOne = ResValueTools.changeWert(wert, newOne);
//                                            reloadTable();
//                                        }
//                                    }
//                                });
//
//                                saveButton.setHorizontalAlignment(SwingConstants.RIGHT);
//
//                                JPanel buttonPanel = new JPanel();
//                                buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.LINE_AXIS));
//                                buttonPanel.add(saveButton);
//                                pnl.setBorder(new EmptyBorder(10, 10, 10, 10));
//                                pnl.add(buttonPanel, BorderLayout.SOUTH);
//
//                                popup.setOwner(tblVital);
//                                popup.removeExcludedComponent(tblVital);
//                                popup.getContentPane().add(pnl);
//
//                                popup.setDefaultFocusComponent(editor);
//                                popup.showPopup(screenposition.x, screenposition.y);
//                            }
//                        }
//
//                    });
//                    menu.add(itemPopupEdit);
//                    itemPopupEdit.setEnabled(bearbeitenMoeglich && (!wert.isWithoutValue() || col != TMWerte.COL_CONTENT));
//                }
//
//
//                // Löschen
//                if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.DELETE)) {
//
//
//                    JMenuItem itemPopupDelete = new JMenuItem(OPDE.lang.getString("misc.commands.delete"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/trashcan_empty.png")));
//                    itemPopupDelete.addActionListener(new java.awt.event.ActionListener()
//
//                    {
//
//                        public void actionPerformed
//                                (java.awt.event.ActionEvent
//                                         evt) {
//                            new DlgYesNo(OPDE.lang.getString("misc.questions.delete"), new ImageIcon(getClass().getResource("/artwork/48x48/bw/trashcan_empty.png")), new Closure() {
//                                @Override
//                                public void execute(Object answer) {
//                                    if (answer.equals(JOptionPane.YES_OPTION)) {
//                                        ResValue mywert = ResValueTools.deleteWert(wert);
//                                        ((TMWerte) tblVital.getModel()).setBWert(row, mywert);
//
//                                        if (!tbShowReplaced.isSelected()) {
//                                            reloadTable();
//                                        }
//                                    }
//                                }
//                            });
//                        }
//                    }
//
//                    );
//                    menu.add(itemPopupDelete);
//                    itemPopupDelete.setEnabled(bearbeitenMoeglich);
//                }
//
//                if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.PRINT)) {
//                    JMenuItem itemPopupPrint = new JMenuItem("Markierte Werte drucken", new ImageIcon(getClass().getResource("/artwork/22x22/bw/printer.png")));
//                    itemPopupPrint.addActionListener(new java.awt.event.ActionListener() {
//
//                        public void actionPerformed(java.awt.event.ActionEvent evt) {
//                            int[] sel = tblVital.getSelectedRows();
//                            printWerte(sel);
//                        }
//                    });
//                    menu.add(itemPopupPrint);
//                }
//            }
//
//
////                if (!alreadyEdited && singleRowSelected) {
////                    menu.add(new JSeparator());
////                    // #0000003
////                    menu.add(op.share.process.DBHandling.getVorgangContextMenu(parent, "ResValue", bwid, currentBW, fileActionListener));
////
////                    Query query = em.createNamedQuery("ResValue.findByBwid");
////                    query.setParameter("bwid", bwid);
////                    entity.values.ResValue bwert = (entity.values.ResValue) query.getSingleResult();
////                    menu.add(SYSFilesTools.getSYSFilesContextMenu(parent, bwert, fileActionListener));
////
////                    // #0000035
////                    //menu.add(SYSFiles.getOPFilesContextMenu(parent, "ResValue", bwid, currentBW, tblVital, true, true, SYSFiles.CODE_BERICHTE, fileActionListener));
////                }
//
//
////                if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.SELECT) && !alreadyEdited && singleRowSelected) {
////                    menu.add(new JSeparator());
////                    menu.add(QProcessTools.getVorgangContextMenu(parent, aktuellerWert, resident, standardActionListener));
////                }
//
//
//        }
//
//        menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());
//    }//GEN-LAST:event_tblVitalMousePressed
//
//
//    private void prepareSearchArea() {
//        searchPanes = new CollapsiblePanes();
//        searchPanes.setLayout(new JideBoxLayout(searchPanes, JideBoxLayout.Y_AXIS));
//        jspSearch.setViewportView(searchPanes);
//
//        JPanel mypanel = new JPanel();
//        mypanel.setLayout(new VerticalLayout(3));
//        mypanel.setBackground(Color.WHITE);
//
//        CollapsiblePane searchPane = new CollapsiblePane(OPDE.lang.getString(internalClassID));
//        searchPane.setStyle(CollapsiblePane.PLAIN_STYLE);
//        searchPane.setCollapsible(false);
//
//        try {
//            searchPane.setCollapsed(false);
//        } catch (PropertyVetoException e) {
//            OPDE.error(e);
//        }
//
//        GUITools.addAllComponents(mypanel, addCommands());
//        GUITools.addAllComponents(mypanel, addFilters());
//
//        searchPane.setContentPane(mypanel);
//
//        searchPanes.add(searchPane);
//        searchPanes.addExpansion();
//    }
//
//
//    private java.util.List<Component> addFilters() {
//        java.util.List<Component> list = new ArrayList<Component>();
//
//        tbShowReplaced = GUITools.getNiceToggleButton(OPDE.lang.getString("misc.filters.showreplaced"));
//        SYSPropsTools.restoreState(internalClassID + ":tbShowReplaced", tbShowReplaced);
//        tbShowReplaced.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent itemEvent) {
//                if (initPhase || itemEvent.getStateChange() != ItemEvent.SELECTED) return;
//                SYSPropsTools.storeState(internalClassID + ":tbShowReplaced", tbShowReplaced);
//                reloadTable();
//            }
//        });
//        tbShowReplaced.setHorizontalAlignment(SwingConstants.LEFT);
//        list.add(tbShowReplaced);
//
//        return list;
//    }
//
//    private java.util.List<Component> addCommands() {
//        java.util.List<Component> list = new ArrayList<Component>();
//
//        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.UPDATE)) {
//            JideButton addButton = GUITools.createHyperlinkButton(OPDE.lang.getString("misc.commands.new"), SYSConst.icon22add, new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent actionEvent) {
//
//                    new DlgValue(new ResValue(resident, OPDE.getLogin().getUser()), new Closure() {
//                        @Override
//                        public void execute(Object o) {
//                            if (o != null) {
//                                EntityManager em = OPDE.createEM();
//                                try {
//                                    em.getTransaction().begin();
//                                    em.merge(o);
//                                    em.getTransaction().commit();
//                                } catch (Exception e) {
//                                    if (em.getTransaction().isActive()) {
//                                        em.getTransaction().rollback();
//                                    }
//                                    OPDE.fatal(e);
//                                } finally {
//                                    em.close();
//                                }
//                                reloadTable();
//                            }
//                        }
//                    });
//                }
//            });
//            list.add(addButton);
//        }
//
//        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.PRINT)) {
//            JideButton printButton = GUITools.createHyperlinkButton(OPDE.lang.getString("misc.commands.print"), SYSConst.icon22print2, new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent actionEvent) {
//                    printWerte(null);
//                }
//            });
//            list.add(printButton);
//        }
//
//        return list;
//    }


    private void buildPanel() {
        cpsValues.removeAll();
        cpsValues.setLayout(new JideBoxLayout(cpsValues, JideBoxLayout.Y_AXIS));

        for (ResValueType vtype : lstValueTypes) {

            cpsValues.add(cpMap.get(vtype.getID() + ".xtypes"));

        }


        cpsValues.addExpansion();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jspValues;
    private CollapsiblePanes cpsValues;
    // End of variables declaration//GEN-END:variables
}

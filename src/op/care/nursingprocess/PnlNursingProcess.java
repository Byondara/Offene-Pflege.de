/*
 * OffenePflege
 * Copyright (C) 2006-2012 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.nursingprocess;

import com.jidesoft.pane.CollapsiblePane;
import com.jidesoft.pane.CollapsiblePanes;
import com.jidesoft.popup.JidePopup;
import com.jidesoft.swing.JideBoxLayout;
import com.jidesoft.swing.JideButton;
import entity.info.Resident;
import entity.info.ResInfoCategory;
import entity.info.ResInfoCategoryTools;
import entity.nursingprocess.*;
import entity.system.SYSPropsTools;
import entity.system.Unique;
import entity.system.UniqueTools;
import op.OPDE;
import op.system.InternalClassACL;
import op.threads.DisplayManager;
import op.threads.DisplayMessage;
import op.tools.*;
import org.apache.commons.collections.Closure;
import org.jdesktop.swingx.JXSearchField;
import org.jdesktop.swingx.VerticalLayout;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;

import javax.persistence.EntityManager;
import javax.persistence.LockModeType;
import javax.persistence.OptimisticLockException;
import javax.persistence.Query;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyVetoException;
import java.text.DateFormat;
import java.util.*;
import java.util.List;

/**
 * @author tloehr
 */
public class PnlNursingProcess extends NursingRecordsPanel {
    public static final String internalClassID = "nursingrecords.nursingprocess";
    private boolean initPhase;

    private Resident bewohner;
    private JScrollPane jspSearch;
    private CollapsiblePanes searchPanes;


    private HashMap<NursingProcess, CollapsiblePane> planungCollapsiblePaneMap;
    private HashMap<ResInfoCategory, java.util.List<NursingProcess>> planungen;
    private java.util.List<ResInfoCategory> kategorien;

    private JToggleButton tbInactive;
    private JXSearchField txtSearch;

    /**
     * Creates new form PnlNursingProcess
     */
    public PnlNursingProcess(Resident bewohner, JScrollPane jspSearch) {
        initPhase = true;
        this.jspSearch = jspSearch;
//        standardActionListener = new ActionListener() {
//
//            public void actionPerformed(ActionEvent e) {
//                reloadTable();
//            }
//        };
        initComponents();
        initPanel();
        initPhase = false;

        switchResident(bewohner);

    }

    private void initPanel() {
        planungCollapsiblePaneMap = new HashMap<NursingProcess, CollapsiblePane>();
//        categoryCPMap = new HashMap<ResInfoCategory, CollapsiblePane>();
        planungen = new HashMap<ResInfoCategory, java.util.List<NursingProcess>>();
        kategorien = new ArrayList<ResInfoCategory>();
        prepareSearchArea();
    }

    @Override
    public void cleanup() {

    }

    @Override
    public void reload() {
        reloadDisplay();
    }

    @Override
    public void switchResident(Resident bewohner) {
        this.bewohner = bewohner;
        GUITools.setBWDisplay(bewohner);
//        categoryCPMap.clear();
        planungCollapsiblePaneMap.clear();
        planungen.clear();
        kategorien.clear();
        reloadDisplay();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jspPlanung = new JScrollPane();
        cpPlan = new CollapsiblePanes();

        //======== this ========
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

        //======== jspPlanung ========
        {

            //======== cpPlan ========
            {
                cpPlan.setLayout(new BoxLayout(cpPlan, BoxLayout.X_AXIS));
            }
            jspPlanung.setViewportView(cpPlan);
        }
        add(jspPlanung);
    }// </editor-fold>//GEN-END:initComponents


    private void reloadDisplay() {
        /***
         *               _                 _ ____  _           _
         *      _ __ ___| | ___   __ _  __| |  _ \(_)___ _ __ | | __ _ _   _
         *     | '__/ _ \ |/ _ \ / _` |/ _` | | | | / __| '_ \| |/ _` | | | |
         *     | | |  __/ | (_) | (_| | (_| | |_| | \__ \ |_) | | (_| | |_| |
         *     |_|  \___|_|\___/ \__,_|\__,_|____/|_|___/ .__/|_|\__,_|\__, |
         *                                              |_|            |___/
         */
        initPhase = true;

        final boolean withworker = true;
        if (withworker) {

            OPDE.getMainframe().setBlocked(true);
            OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), -1, 100));

            cpPlan.removeAll();

            SwingWorker worker = new SwingWorker() {

                @Override
                protected Object doInBackground() throws Exception {
                    try {
                        int progress = 0;

                        if (kategorien.isEmpty()) {
                            // Elmininate empty categories
                            for (final ResInfoCategory kat : ResInfoCategoryTools.getAll()) {
                                if (!NursingProcessTools.findByKategorieAndBewohner(bewohner, kat).isEmpty()) {
                                    kategorien.add(kat);
                                }
                            }
                        }

                        cpPlan.setLayout(new JideBoxLayout(cpPlan, JideBoxLayout.Y_AXIS));
                        for (ResInfoCategory kat : kategorien) {
                            progress++;
                            OPDE.getDisplayManager().setProgressBarMessage(new DisplayMessage(OPDE.lang.getString("misc.msg.wait"), progress, kategorien.size()));
                            cpPlan.add(createCollapsiblePanesFor(kat));
                        }


                    } catch (Exception e) {
                        OPDE.fatal(e);
                    }
                    return null;
                }

                @Override
                protected void done() {
                    cpPlan.addExpansion();
                    initPhase = false;
                    OPDE.getDisplayManager().setProgressBarMessage(null);
                    OPDE.getMainframe().setBlocked(false);
                }
            };
            worker.execute();

        } else {

            cpPlan.removeAll();

            if (kategorien.isEmpty()) {
                // Elmininate empty categories
                for (final ResInfoCategory category : ResInfoCategoryTools.getAll()) {
                    if (!NursingProcessTools.findByKategorieAndBewohner(bewohner, category).isEmpty()) {
                        kategorien.add(category);
                    }
                }
            }

            cpPlan.setLayout(new JideBoxLayout(cpPlan, JideBoxLayout.Y_AXIS));
            for (ResInfoCategory category : kategorien) {
                cpPlan.add(createCollapsiblePanesFor(category));
            }
            cpPlan.addExpansion();
        }
        initPhase = false;

    }

//    private void reloadTable() {
//
//        tblPlanung.setModel(new TMPlanungen(bwkennung, cbPast.isSelected(), cbDetails.isSelected()));
//
//        tblPlanung.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
////        lsm.addListSelectionListener(lsl);
//        jspPlanung.dispatchEvent(new ComponentEvent(jspPlanung, ComponentEvent.COMPONENT_RESIZED));
//
//        tblPlanung.getColumnModel().getColumn(0).setCellRenderer(new RNDPlanungen());
//        tblPlanung.getColumnModel().getColumn(1).setCellRenderer(new RNDPlanungen());
//        tblPlanung.getColumnModel().getColumn(2).setCellRenderer(new RNDPlanungen());
//        tblPlanung.getColumnModel().getColumn(3).setCellRenderer(new RNDPlanungen());
//
//
//    }


    private CollapsiblePane createCollapsiblePanesFor(final ResInfoCategory category) {
        final CollapsiblePane katpane = new CollapsiblePane(category.getBezeichnung());
//        categoryCPMap.put(category, katpane);

        katpane.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                try {
                    if (katpane.isCollapsed()) {
                        katpane.setCollapsed(false);
                    } else {
                        // collapse all children
                        for (NursingProcess planung : planungen.get(category)) {
                            planungCollapsiblePaneMap.get(planung).setCollapsed(true);
                        }
                        katpane.setCollapsed(true);
                    }
                } catch (PropertyVetoException e) {
                    OPDE.error(e);
                }
            }
        });
        katpane.setSlidingDirection(SwingConstants.SOUTH);
        katpane.setBackground(category.getBackgroundHeader());
        katpane.setForeground(category.getForegroundHeader());
        katpane.setOpaque(false);
        JPanel katPanel = new JPanel();

        if (!planungen.containsKey(category)) {
            planungen.put(category, NursingProcessTools.findByKategorieAndBewohner(bewohner, category));
        }

        katPanel.setLayout(new VerticalLayout());
        for (NursingProcess planung : planungen.get(category)) {
            CollapsiblePane panel = createPanelFor(planung);
            katPanel.add(panel);
            planungCollapsiblePaneMap.put(planung, panel);
        }
        katpane.setContentPane(katPanel);

        try {
            katpane.setCollapsed(true);
        } catch (PropertyVetoException e) {
            OPDE.error(e);
        }
        return katpane;
    }


    private CollapsiblePane createPanelFor(final NursingProcess planung) {
        final CollapsiblePane panelForPlanung = new CollapsiblePane();
        long numDFNs = DFNTools.getNumDFNs(planung);

        /***
         *      _   _ _____    _    ____  _____ ____
         *     | | | | ____|  / \  |  _ \| ____|  _ \
         *     | |_| |  _|   / _ \ | | | |  _| | |_) |
         *     |  _  | |___ / ___ \| |_| | |___|  _ <
         *     |_| |_|_____/_/   \_\____/|_____|_| \_\
         *
         */

        JPanel titlePanelleft = new JPanel();
        titlePanelleft.setLayout(new BoxLayout(titlePanelleft, BoxLayout.LINE_AXIS));

        /***
         *      _     _       _    _           _   _                _   _                _
         *     | |   (_)_ __ | | _| |__  _   _| |_| |_ ___  _ __   | | | | ___  __ _  __| | ___ _ __
         *     | |   | | '_ \| |/ / '_ \| | | | __| __/ _ \| '_ \  | |_| |/ _ \/ _` |/ _` |/ _ \ '__|
         *     | |___| | | | |   <| |_) | |_| | |_| || (_) | | | | |  _  |  __/ (_| | (_| |  __/ |
         *     |_____|_|_| |_|_|\_\_.__/ \__,_|\__|\__\___/|_| |_| |_| |_|\___|\__,_|\__,_|\___|_|
         *
         */
        JideButton title = GUITools.createHyperlinkButton(getHyperlinkButtonTextFor(planung), null, null);
//        title.addMouseListener(GUITools.getHyperlinkStyleMouseAdapter());
        title.setAlignmentX(Component.LEFT_ALIGNMENT);
        title.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    panelForPlanung.setCollapsed(!panelForPlanung.isCollapsed());
                } catch (PropertyVetoException e) {
                    OPDE.error(e);
                }
            }
        });
        titlePanelleft.add(title);


        JPanel titlePanelright = new JPanel();
        titlePanelright.setLayout(new BoxLayout(titlePanelright, BoxLayout.LINE_AXIS));


        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.INSERT)) { // => ACL_MATRIX

            /***
             *      ____        _   _                   _       _     _
             *     | __ ) _   _| |_| |_ ___  _ __      / \   __| | __| |
             *     |  _ \| | | | __| __/ _ \| '_ \    / _ \ / _` |/ _` |
             *     | |_) | |_| | |_| || (_) | | | |  / ___ \ (_| | (_| |
             *     |____/ \__,_|\__|\__\___/|_| |_| /_/   \_\__,_|\__,_|
             *
             */

            JButton btnAdd = new JButton(SYSConst.icon22add);
            btnAdd.setPressedIcon(SYSConst.icon22addPressed);
            btnAdd.setAlignmentX(Component.RIGHT_ALIGNMENT);
            btnAdd.setContentAreaFilled(false);
            btnAdd.setBorder(null);
            btnAdd.setToolTipText(OPDE.lang.getString(internalClassID + ".btnadd.tooltip"));
            btnAdd.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    NursingProcess template = planung.clone();
                    template.setBis(SYSConst.DATE_BIS_AUF_WEITERES);
                    template.setAbgesetztDurch(null);
                    template.setAngesetztDurch(OPDE.getLogin().getUser());
                    template.setNKontrolle(new DateTime().plusWeeks(4).toDate());
                    new DlgNursingProcess(template, new Closure() {
                        @Override
                        public void execute(Object o) {
                            if (o != null) {
                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    em.lock(em.merge(bewohner), LockModeType.OPTIMISTIC);

                                    // Fetch the new Plan from the PAIR
                                    NursingProcess myNewNP = em.merge(((Pair<NursingProcess, ArrayList<InterventionSchedule>>) o).getFirst());
                                    NursingProcess myOldNP = em.merge(planung);
                                    em.lock(myOldNP, LockModeType.OPTIMISTIC);

                                    // Close old NP
                                    myOldNP.setAbgesetztDurch(em.merge(OPDE.getLogin().getUser()));
                                    myOldNP.setBis(new DateTime().minusSeconds(1).toDate());
                                    NPControl lastValidation = em.merge(new NPControl(myNewNP.getSituation(), myOldNP));
                                    myOldNP.getKontrollen().add(lastValidation);

                                    // Starts 1 second after the old one stopped
                                    myNewNP.setVon(new DateTime(myOldNP.getBis()).plusSeconds(1).toDate());

                                    // DFNs to delete
                                    Query delQuery = em.createQuery("DELETE FROM DFN dfn WHERE dfn.nursingProcess = :nursingprocess AND dfn.status = :status ");
                                    delQuery.setParameter("nursingprocess", myOldNP);
                                    delQuery.setParameter("status", DFNTools.STATE_OPEN);
                                    delQuery.executeUpdate();

                                    // Create new DFNs according to plan
                                    DFNTools.generate(em, myNewNP.getInterventionSchedule(), new DateMidnight(), true);
                                    em.getTransaction().commit();
                                    // Refresh Display
                                    planungen.get(planung.getKategorie()).remove(planung);
                                    planungen.get(planung.getKategorie()).add(myOldNP);
                                    addNursingProcessToDisplay(myNewNP);
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(planung.getStichwort(), "changed"));
                                    reloadDisplay();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }
//                                reloadTable();
                            }
                        }
                    });

                }
            });
            titlePanelright.add(btnAdd);
            btnAdd.setEnabled(!planung.isAbgesetzt());

            /***
             *      ____  _         _____            _
             *     | __ )| |_ _ __ | ____|_   ____ _| |
             *     |  _ \| __| '_ \|  _| \ \ / / _` | |
             *     | |_) | |_| | | | |___ \ V / (_| | |
             *     |____/ \__|_| |_|_____| \_/ \__,_|_|
             *
             */
            final JButton btnEval = new JButton(SYSConst.icon22redo);
            btnEval.setPressedIcon(SYSConst.icon22redoPressed);
            btnEval.setAlignmentX(Component.RIGHT_ALIGNMENT);
            btnEval.setContentAreaFilled(false);
            btnEval.setBorder(null);
            btnEval.setToolTipText(OPDE.lang.getString(internalClassID + ".btneval.tooltip"));
            btnEval.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    final JidePopup popup = new JidePopup();

                    JPanel dlg = new PnlEval(planung, new Closure() {
                        @Override
                        public void execute(Object o) {
                            if (o != null) {
                                popup.hidePopup();

                                Pair<NursingProcess, String> result = (Pair<NursingProcess, String>) o;

                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    em.lock(em.merge(bewohner), LockModeType.OPTIMISTIC);

                                    NursingProcess evaluatedNP = em.merge(result.getFirst());
                                    em.lock(evaluatedNP, LockModeType.OPTIMISTIC);

                                    NPControl newEvaluation = em.merge(new NPControl(result.getSecond(), evaluatedNP));
                                    evaluatedNP.getKontrollen().add(newEvaluation);

                                    // Refresh Display
                                    planungen.get(planung.getKategorie()).remove(planung);
                                    planungen.get(planung.getKategorie()).add(evaluatedNP);
                                    Collections.sort(planungen.get(planung.getKategorie()));

                                    em.getTransaction().commit();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }

                                OPDE.getDisplayManager().addSubMessage(new DisplayMessage(OPDE.lang.getString(internalClassID + ".success.neweval")));
                                reloadDisplay();
                            }
                        }
                    });

                    popup.setMovable(false);
                    popup.getContentPane().setLayout(new BoxLayout(popup.getContentPane(), BoxLayout.LINE_AXIS));
                    popup.getContentPane().add(dlg);
                    popup.setOwner(btnEval);
                    popup.removeExcludedComponent(btnEval);
                    popup.setDefaultFocusComponent(dlg);

                    GUITools.showPopup(popup, SwingConstants.WEST);
                }
            });
            btnEval.setEnabled(!planung.isAbgesetzt());
            titlePanelright.add(btnEval);
        }

        /***
         *      ____        _   _                _____    _ _ _
         *     | __ ) _   _| |_| |_ ___  _ __   | ____|__| (_) |_
         *     |  _ \| | | | __| __/ _ \| '_ \  |  _| / _` | | __|
         *     | |_) | |_| | |_| || (_) | | | | | |__| (_| | | |_
         *     |____/ \__,_|\__|\__\___/|_| |_| |_____\__,_|_|\__|
         *
         */
        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.UPDATE)) {  // => ACL_MATRIX
            JButton btnEdit = new JButton(SYSConst.icon22edit);
            btnEdit.setPressedIcon(SYSConst.icon22editPressed);
            btnEdit.setAlignmentX(Component.RIGHT_ALIGNMENT);
            btnEdit.setContentAreaFilled(false);
            btnEdit.setBorder(null);
            btnEdit.setToolTipText(OPDE.lang.getString(internalClassID + ".btnedit.tooltip"));
            btnEdit.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    new DlgNursingProcess(planung, new Closure() {
                        @Override
                        public void execute(Object planung) {
                            if (planung != null) {
                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    em.lock(em.merge(bewohner), LockModeType.OPTIMISTIC);
                                    NursingProcess mynp = em.merge(((Pair<NursingProcess, ArrayList<InterventionSchedule>>) planung).getFirst());
                                    em.lock(mynp, LockModeType.OPTIMISTIC);
                                    // Schedules to delete
                                    for (InterventionSchedule is : ((Pair<NursingProcess, ArrayList<InterventionSchedule>>) planung).getSecond()) {
                                        em.remove(em.merge(is));
                                    }
                                    // No unused DFNs to delete
                                    Query delQuery = em.createQuery("DELETE FROM DFN dfn WHERE dfn.nursingProcess = :nursingprocess ");
                                    delQuery.setParameter("nursingprocess", mynp);
                                    delQuery.executeUpdate();
                                    // Create new DFNs according to plan
                                    DFNTools.generate(em, mynp.getInterventionSchedule(), new DateMidnight(), true);
                                    em.getTransaction().commit();
                                    Collections.sort(planungen.get(mynp.getKategorie()));
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(mynp.getStichwort(), "edited"));
                                    reloadDisplay();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }
//                                reloadTable();
                            }
                        }
                    });
                }
            });
            titlePanelright.add(btnEdit);
            btnEdit.setEnabled(!planung.isAbgesetzt() && numDFNs == 0);
        }


        /***
         *      ____        _   _                ____  _
         *     | __ ) _   _| |_| |_ ___  _ __   / ___|| |_ ___  _ __
         *     |  _ \| | | | __| __/ _ \| '_ \  \___ \| __/ _ \| '_ \
         *     | |_) | |_| | |_| || (_) | | | |  ___) | || (_) | |_) |
         *     |____/ \__,_|\__|\__\___/|_| |_| |____/ \__\___/| .__/
         *                                                     |_|
         */
        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.CANCEL)) { // => ACL_MATRIX
            final JButton btnStop = new JButton(SYSConst.icon22stop);
            btnStop.setPressedIcon(SYSConst.icon22stopPressed);
            btnStop.setAlignmentX(Component.RIGHT_ALIGNMENT);
            btnStop.setContentAreaFilled(false);
            btnStop.setBorder(null);
            btnStop.setToolTipText(OPDE.lang.getString(internalClassID + ".btnstop.tooltip"));
            btnStop.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    final JidePopup popup = new JidePopup();

                    JPanel dlg = new PnlEval(planung, new Closure() {
                        @Override
                        public void execute(Object o) {
                            if (o != null) {
                                popup.hidePopup();

                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    NursingProcess myOldNP = em.merge(planung);
                                    myOldNP.setAbgesetztDurch(em.merge(OPDE.getLogin().getUser()));
                                    myOldNP.setBis(new Date());
                                    NPControl lastValidation = em.merge(new NPControl(o.toString(), myOldNP));
                                    myOldNP.getKontrollen().add(lastValidation);

                                    // DFNs to delete
                                    Query delQuery = em.createQuery("DELETE FROM DFN dfn WHERE dfn.nursingProcess = :nursingprocess AND dfn.status = :status ");
                                    delQuery.setParameter("nursingprocess", myOldNP);
                                    delQuery.setParameter("status", DFNTools.STATE_OPEN);
                                    delQuery.executeUpdate();

                                    // Refresh Display
                                    planungen.get(planung.getKategorie()).remove(planung);
                                    planungen.get(planung.getKategorie()).add(myOldNP);
                                    Collections.sort(planungen.get(myOldNP.getKategorie()));

                                    em.lock(myOldNP, LockModeType.OPTIMISTIC);
                                    em.getTransaction().commit();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }

                                OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(planung.getStichwort(), "closed"));
                                reloadDisplay();
                            }
                        }
                    });

                    popup.setMovable(false);
                    popup.getContentPane().setLayout(new BoxLayout(popup.getContentPane(), BoxLayout.LINE_AXIS));
                    popup.getContentPane().add(dlg);
                    popup.setOwner(btnStop);
                    popup.removeExcludedComponent(btnStop);
                    popup.setDefaultFocusComponent(dlg);

                    GUITools.showPopup(popup, SwingConstants.WEST);
                }
            });
            btnStop.setEnabled(!planung.isAbgesetzt());
            titlePanelright.add(btnStop);
        }

        /***
         *      ____        _   _                ____       _      _
         *     | __ ) _   _| |_| |_ ___  _ __   |  _ \  ___| | ___| |_ ___
         *     |  _ \| | | | __| __/ _ \| '_ \  | | | |/ _ \ |/ _ \ __/ _ \
         *     | |_) | |_| | |_| || (_) | | | | | |_| |  __/ |  __/ ||  __/
         *     |____/ \__,_|\__|\__\___/|_| |_| |____/ \___|_|\___|\__\___|
         *
         */
        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.DELETE)) {  // => ACL_MATRIX
            JButton btnDelete = new JButton(SYSConst.icon22delete);
            btnDelete.setPressedIcon(SYSConst.icon22deletePressed);
            btnDelete.setAlignmentX(Component.RIGHT_ALIGNMENT);
            btnDelete.setContentAreaFilled(false);
            btnDelete.setBorder(null);
            btnDelete.setToolTipText(SYSTools.toHTML(OPDE.lang.getString(internalClassID + ".btndelete.tooltip" + (btnDelete.isEnabled() ? ".disabled.reason" : ""))));
            btnDelete.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    new DlgYesNo(OPDE.lang.getString("misc.questions.delete1") + "<b>" + planung.getStichwort() + "</b>" + OPDE.lang.getString("misc.questions.delete2"), SYSConst.icon48delete, new Closure() {
                        @Override
                        public void execute(Object o) {
                            if (o.equals(JOptionPane.YES_OPTION)) {
                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    NursingProcess myOldNP = em.merge(planung);

                                    // DFNs to delete
                                    Query delQuery = em.createQuery("DELETE FROM DFN dfn WHERE dfn.nursingProcess = :nursingprocess AND dfn.status = :status ");
                                    delQuery.setParameter("nursingprocess", myOldNP);
                                    delQuery.setParameter("status", DFNTools.STATE_OPEN);
                                    delQuery.executeUpdate();

                                    em.remove(myOldNP);
                                    em.getTransaction().commit();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }

                                OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(planung.getStichwort(), "deleted"));
                                // TODO: das reicht nicht. muss wohl mehr gemacht werden. die gelöschten bleiben stehen
                                reloadDisplay();
                            }
                        }
                    });
                }
            });
            btnDelete.setEnabled(!planung.isAbgesetzt() && numDFNs == 0);
            titlePanelright.add(btnDelete);
        }


        titlePanelleft.setOpaque(false);
        titlePanelright.setOpaque(false);
        JPanel titlePanel = new JPanel();
        titlePanel.setOpaque(false);


        titlePanel.setLayout(new GridBagLayout());
        ((GridBagLayout) titlePanel.getLayout()).columnWidths = new int[]{0, 80};
        ((GridBagLayout) titlePanel.getLayout()).columnWeights = new double[]{1.0, 1.0};

        titlePanel.add(titlePanelleft, new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
                GridBagConstraints.WEST, GridBagConstraints.VERTICAL,
                new Insets(0, 0, 0, 5), 0, 0));

        titlePanel.add(titlePanelright, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0,
                GridBagConstraints.EAST, GridBagConstraints.VERTICAL,
                new Insets(0, 0, 0, 0), 0, 0));

//        titlePanel.add(titlePanelleft);
//        titlePanel.add(titlePanelright);


        panelForPlanung.setTitleLabelComponent(titlePanel);
        panelForPlanung.setSlidingDirection(SwingConstants.SOUTH);
//            panelForPlanung.setStyle(CollapsiblePane.TREE_STYLE);
//            panelForPlanung.setHorizontalAlignment(SwingConstants.LEADING);

//            panelForBWInfoTyp.setEmphasized(bwinfos.get(typ).isEmpty());

//            JPanel contentPanel = new JPanel();
//            contentPanel.setLayout(new VerticalLayout());

        /***
         *       ___ ___  _  _ _____ ___ _  _ _____
         *      / __/ _ \| \| |_   _| __| \| |_   _|
         *     | (_| (_) | .` | | | | _|| .` | | |
         *      \___\___/|_|\_| |_| |___|_|\_| |_|
         *
         */
        JTextPane contentPane = new JTextPane();
        contentPane.setContentType("text/html");
        contentPane.setText(SYSTools.toHTML(NursingProcessTools.getAsHTML(planung, false)));
        panelForPlanung.setContentPane(contentPane);
        try {
            panelForPlanung.setCollapsed(true);
        } catch (PropertyVetoException e) {
            OPDE.error(e);
        }

        panelForPlanung.setSlidingDirection(SwingConstants.SOUTH);
        panelForPlanung.setHorizontalAlignment(SwingConstants.LEADING);
        panelForPlanung.setBackground(planung.isAbgesetzt() ? Color.lightGray : planung.getKategorie().getBackgroundContent());
        panelForPlanung.setForeground(planung.isAbgesetzt() ? SYSConst.grey80 : planung.getKategorie().getForegroundContent());
        panelForPlanung.setOpaque(false);

        panelForPlanung.setVisible(tbInactive.isSelected() || !planung.isAbgesetzt());

        return panelForPlanung;
    }

    public void refreshDisplay() {
        for (ResInfoCategory category : kategorien) {
            for (NursingProcess planung : planungen.get(category)) {
                planungCollapsiblePaneMap.get(planung).setVisible(tbInactive.isSelected() || !planung.isAbgesetzt());
            }
        }
    }

    private void prepareSearchArea() {
        searchPanes = new CollapsiblePanes();
        searchPanes.setLayout(new JideBoxLayout(searchPanes, JideBoxLayout.Y_AXIS));
        jspSearch.setViewportView(searchPanes);

        JPanel mypanel = new JPanel();
        mypanel.setLayout(new VerticalLayout());
        mypanel.setBackground(Color.WHITE);

        CollapsiblePane searchPane = new CollapsiblePane(OPDE.lang.getString(internalClassID));
        searchPane.setStyle(CollapsiblePane.PLAIN_STYLE);
        searchPane.setCollapsible(false);

        try {
            searchPane.setCollapsed(false);
        } catch (PropertyVetoException e) {
            OPDE.error(e);
        }

        GUITools.addAllComponents(mypanel, addCommands());
        GUITools.addAllComponents(mypanel, addFilters());

        searchPane.setContentPane(mypanel);

        searchPanes.add(searchPane);
        searchPanes.addExpansion();
    }

    private String getHyperlinkButtonTextFor(NursingProcess planung) {
        String result = "<b>" + planung.getStichwort() + "</b> ";

        if (planung.isAbgesetzt()) {
            result += DateFormat.getDateInstance().format(planung.getVon()) + " &rarr; " + DateFormat.getDateInstance().format(planung.getBis());
        } else {
            result += DateFormat.getDateInstance().format(planung.getVon()) + " &rarr;| ";
        }

        return SYSTools.toHTMLForScreen(result);
    }


    private List<Component> addFilters() {
        List<Component> list = new ArrayList<Component>();

        txtSearch = new JXSearchField(OPDE.lang.getString("misc.msg.searchphrase"));
        txtSearch.setInstantSearchDelay(750);
        txtSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
        list.add(txtSearch);

        tbInactive = GUITools.getNiceToggleButton(OPDE.lang.getString(internalClassID + ".inactive"));
        tbInactive.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (initPhase) return;
                SYSPropsTools.storeState(internalClassID + ":tbInactive", tbInactive);
                refreshDisplay();
                //TODO: Wenn man die inactives ausblendet müssen auch die Kategorien unsichtbar werden, wenn sie nur unsichtbare enthalten.
            }
        });
        tbInactive.setHorizontalAlignment(SwingConstants.LEFT);
        list.add(tbInactive);
        SYSPropsTools.restoreState(internalClassID + ":tbInactive", tbInactive);
        return list;
    }

    private void addNursingProcessToDisplay(NursingProcess np) {
//        private HashMap<NursingProcess, CollapsiblePane> planungCollapsiblePaneMap;
//    private HashMap<ResInfoCategory, java.util.List<NursingProcess>> planungen;

        if (!planungen.containsKey(np.getKategorie())) {
            planungen.put(np.getKategorie(), new ArrayList<NursingProcess>());
        }
        planungen.get(np.getKategorie()).add(np);
        Collections.sort(planungen.get(np.getKategorie()));

        if (!kategorien.contains(np.getKategorie())) {
            kategorien.add(np.getKategorie());
        }
        Collections.sort(kategorien);
    }

    private List<Component> addCommands() {

        List<Component> list = new ArrayList<Component>();

        /***
         *      _   _
         *     | \ | | _____      __
         *     |  \| |/ _ \ \ /\ / /
         *     | |\  |  __/\ V  V /
         *     |_| \_|\___| \_/\_/
         *
         */
        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.INSERT)) {
            JideButton addButton = GUITools.createHyperlinkButton(OPDE.lang.getString("misc.commands.new"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/add.png")), new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {
                    new DlgNursingProcess(new NursingProcess(bewohner), new Closure() {
                        @Override
                        public void execute(Object planung) {
                            if (planung != null) {
                                EntityManager em = OPDE.createEM();
                                try {
                                    em.getTransaction().begin();
                                    em.lock(em.merge(bewohner), LockModeType.OPTIMISTIC);
                                    Unique unique = UniqueTools.getNewUID(em, NursingProcessTools.UNIQUEID);
                                    NursingProcess myplan = em.merge((NursingProcess) planung);
                                    myplan.setPlanKennung(unique.getUid());
                                    DFNTools.generate(em, myplan.getInterventionSchedule(), new DateMidnight(), true);
                                    em.getTransaction().commit();
                                    addNursingProcessToDisplay(myplan);
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(myplan.getStichwort(), "entered"));
                                    reloadDisplay();
                                } catch (OptimisticLockException ole) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                        OPDE.getMainframe().emptyFrame();
                                        OPDE.getMainframe().afterLogin();
                                    }
                                    OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                } catch (Exception e) {
                                    if (em.getTransaction().isActive()) {
                                        em.getTransaction().rollback();
                                    }
                                    OPDE.fatal(e);
                                } finally {
                                    em.close();
                                }
                            }
                        }
                    });
                }
            });
            list.add(addButton);

            /***
             *      _   _                  _______                    _       _     __
             *     | \ | | _____      __  / /_   _|__ _ __ ___  _ __ | | __ _| |_ __\ \
             *     |  \| |/ _ \ \ /\ / / | |  | |/ _ \ '_ ` _ \| '_ \| |/ _` | __/ _ \ |
             *     | |\  |  __/\ V  V /  | |  | |  __/ | | | | | |_) | | (_| | ||  __/ |
             *     |_| \_|\___| \_/\_/   | |  |_|\___|_| |_| |_| .__/|_|\__,_|\__\___| |
             *                            \_\                  |_|                  /_/
             */
            final JideButton addTemplate = GUITools.createHyperlinkButton(OPDE.lang.getString("misc.commands.newfromtemplate"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/add.png")), null);
            addTemplate.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent actionEvent) {

                    final JidePopup popup = new JidePopup();

                    // first a template is selected
                    JPanel dlg = new PnlTemplate(new Closure() {
                        @Override
                        public void execute(Object o) {
                            if (o != null) {
                                popup.hidePopup();

                                // that selected template is cloned and handed over to the DlgNursingProcess for further editing
                                NursingProcess template = ((NursingProcess) o).clone();
                                template.setPlanKennung(-2); // so the next dialog knows thats a template
                                template.setResident(bewohner);
                                template.setBis(SYSConst.DATE_BIS_AUF_WEITERES);
                                template.setAbgesetztDurch(null);
                                template.setAngesetztDurch(OPDE.getLogin().getUser());
                                template.setNKontrolle(new DateTime().plusWeeks(4).toDate());

                                new DlgNursingProcess(template, new Closure() {
                                    @Override
                                    public void execute(Object planung) {
                                        if (planung != null) {
                                            EntityManager em = OPDE.createEM();
                                            try {
                                                em.getTransaction().begin();
                                                em.lock(em.merge(bewohner), LockModeType.OPTIMISTIC);
                                                Unique unique = UniqueTools.getNewUID(em, NursingProcessTools.UNIQUEID);
                                                NursingProcess myplan = em.merge((NursingProcess) planung);
                                                myplan.setPlanKennung(unique.getUid());
                                                DFNTools.generate(em, myplan.getInterventionSchedule(), new DateMidnight(), true);
                                                em.getTransaction().commit();
                                                addNursingProcessToDisplay(myplan);
                                                OPDE.getDisplayManager().addSubMessage(DisplayManager.getSuccessMessage(myplan.getStichwort(), "entered"));
                                                reloadDisplay();
                                            } catch (OptimisticLockException ole) {
                                                if (em.getTransaction().isActive()) {
                                                    em.getTransaction().rollback();
                                                }
                                                if (ole.getMessage().indexOf("Class> entity.info.Bewohner") > -1) {
                                                    OPDE.getMainframe().emptyFrame();
                                                    OPDE.getMainframe().afterLogin();
                                                }
                                                OPDE.getDisplayManager().addSubMessage(DisplayManager.getLockMessage());
                                            } catch (Exception e) {
                                                if (em.getTransaction().isActive()) {
                                                    em.getTransaction().rollback();
                                                }
                                                OPDE.fatal(e);
                                            } finally {
                                                em.close();
                                            }
                                        }
                                    }
                                });

                            }
                        }
                    });

                    popup.setMovable(false);
                    popup.getContentPane().setLayout(new BoxLayout(popup.getContentPane(), BoxLayout.LINE_AXIS));
                    popup.getContentPane().add(dlg);
                    popup.setOwner(addTemplate);
                    popup.removeExcludedComponent(addTemplate);
                    popup.setDefaultFocusComponent(dlg);

                    GUITools.showPopup(popup, SwingConstants.NORTH_EAST);

                }
            });

            list.add(addTemplate);
        }


        return list;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jspPlanung;
    private CollapsiblePanes cpPlan;
    // End of variables declaration//GEN-END:variables
}

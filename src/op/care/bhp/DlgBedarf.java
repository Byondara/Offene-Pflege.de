/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.bhp;

import entity.Bewohner;
import entity.BewohnerTools;
import entity.verordnungen.*;
import op.OPDE;
import op.tools.SYSConst;
import op.tools.SYSTools;
import tablemodels.TMBedarf;
import tablerenderer.RNDHTML;

import javax.persistence.EntityManager;
import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.*;
import java.util.Date;

/**
 * @author root
 */
public class DlgBedarf extends javax.swing.JDialog {

    private ListSelectionListener lsl;
    private Bewohner bewohner;

    /**
     * Creates new form DlgBedarf
     */
    private void tblBedarfMousePressed(MouseEvent e) {
        Point p = e.getPoint();
        int row = tblBedarf.rowAtPoint(p);
        final ListSelectionModel lsm = tblBedarf.getSelectionModel();
        if (lsm.getMinSelectionIndex() == lsm.getMaxSelectionIndex()) {
            lsm.setSelectionInterval(row, row);
        }
        TMBedarf tm = (TMBedarf) tblBedarf.getModel();

        btnOK.setEnabled(!tm.isMaximaleTagesdosisErreicht(row));
    }

    public DlgBedarf(java.awt.Frame parent, Bewohner bewohner) {
        super(parent, true);
        this.bewohner = bewohner;
        initComponents();
        BewohnerTools.setBWLabel(lblBW, bewohner);
        loadTable();
        SYSTools.centerOnParent(parent, this);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblTitle = new JLabel();
        lblBW = new JLabel();
        jSeparator1 = new JSeparator();
        jspBedarf = new JScrollPane();
        tblBedarf = new JTable();
        btnOK = new JButton();
        btnCancel = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        Container contentPane = getContentPane();

        //---- lblTitle ----
        lblTitle.setFont(new Font("Dialog", Font.BOLD, 24));
        lblTitle.setText("Bedarfsmedikation");

        //---- lblBW ----
        lblBW.setFont(new Font("Dialog", Font.BOLD, 18));
        lblBW.setForeground(new Color(255, 51, 0));
        lblBW.setText("Nachname, Vorname (*GebDatum, 00 Jahre) [??1]");

        //======== jspBedarf ========
        {
            jspBedarf.addComponentListener(new ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    jspBedarfComponentResized(e);
                }
            });

            //---- tblBedarf ----
            tblBedarf.setModel(new DefaultTableModel(
                new Object[][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                },
                new String[] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            tblBedarf.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    tblBedarfMousePressed(e);
                }
            });
            jspBedarf.setViewportView(tblBedarf);
        }

        //---- btnOK ----
        btnOK.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
        btnOK.setText("\u00dcbernehmen");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnOKActionPerformed(e);
            }
        });

        //---- btnCancel ----
        btnCancel.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
        btnCancel.setText("Abbrechen");
        btnCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnCancelActionPerformed(e);
            }
        });

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jspBedarf, GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                        .addComponent(lblTitle, GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                        .addComponent(lblBW, GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                        .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addComponent(btnOK)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCancel)))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblTitle)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblBW)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jspBedarf, GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel)
                        .addComponent(btnOK))
                    .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void jspBedarfComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspBedarfComponentResized
        JScrollPane jsp = (JScrollPane) evt.getComponent();
        Dimension dim = jsp.getSize();
        int textWidth = dim.width - (100);
        TableColumnModel tcm1 = tblBedarf.getColumnModel();
//        if (tcm1.getColumnCount() < 4) {
//            return;
//        }
        tcm1.getColumn(TMBedarf.COL_SIT).setPreferredWidth(textWidth / 3);
        tcm1.getColumn(TMBedarf.COL_MSSN).setPreferredWidth(textWidth / 3);
        tcm1.getColumn(TMBedarf.COL_Dosis).setPreferredWidth(textWidth / 3);
//        tcm1.getColumn(TMBedarf.COL_Hinweis).setPreferredWidth(textWidth / 4);

        tcm1.getColumn(0).setHeaderValue("Situation");
        tcm1.getColumn(1).setHeaderValue("Massnahme");
        tcm1.getColumn(2).setHeaderValue("Dosis / Häufig.");
//        tcm1.getColumn(3).setHeaderValue("Hinweis");

    }//GEN-LAST:event_jspBedarfComponentResized

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        save();
        dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Eine Bedarfsmedikation oder eine Bedarfsmassnahme wird in die BHP
     * gesetzt und direkt abgehakt. Ist DAFID > 0 wird auch das Medikament
     * ausgebucht.
     */
    private void save() {
        int row = tblBedarf.getSelectedRow();
        TMBedarf tm = (TMBedarf) tblBedarf.getModel();
        VerordnungPlanung vp = tm.getVerordnungPlanung(row);
        MedBestand bestand = tm.getBestand(row);
        Date now = new Date();

        BHP bhp = new BHP(vp);
        bhp.setUser(OPDE.getLogin().getUser());
        bhp.setIst(now);
        bhp.setSoll(now);
        bhp.setSollZeit(SYSConst.UZ);
        bhp.setDosis(vp.getMaxEDosis());
        bhp.setStatus(BHPTools.STATUS_ERLEDIGT);
        bhp.setMDate(now);
        bhp.setDauer((short) 0);

        EntityManager em = OPDE.createEM();
        try {
            em.getTransaction().begin();
            em.persist(bhp);
            MedVorratTools.entnahmeVorrat(em, bestand.getVorrat(), vp.getMaxEDosis(), true, bhp);
            em.getTransaction().commit();
        } catch (Exception ex) {
            em.getTransaction().rollback();
            OPDE.fatal(ex);
        } finally {
            em.close();
        }
    }

    public void dispose() {
        SYSTools.unregisterListeners(this);
        super.dispose();
    }


    private void loadTable() {
        tblBedarf.setModel(new TMBedarf(bewohner));
        tblBedarf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jspBedarf.dispatchEvent(new ComponentEvent(jspBedarf, ComponentEvent.COMPONENT_RESIZED));
        tblBedarf.getColumnModel().getColumn(0).setCellRenderer(new RNDHTML());
        tblBedarf.getColumnModel().getColumn(1).setCellRenderer(new RNDHTML());
        tblBedarf.getColumnModel().getColumn(2).setCellRenderer(new RNDHTML());
//        tblBedarf.getColumnModel().getColumn(3).setCellRenderer(new RNDHTML());
    }

    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private JLabel lblTitle;
    private JLabel lblBW;
    private JSeparator jSeparator1;
    private JScrollPane jspBedarf;
    private JTable tblBedarf;
    private JButton btnOK;
    private JButton btnCancel;
    // Ende der Variablendeklaration//GEN-END:variables

}

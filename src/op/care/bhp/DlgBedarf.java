/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.bhp;

import com.jgoodies.forms.factories.CC;
import com.jgoodies.forms.layout.FormLayout;
import entity.info.Resident;
import entity.prescription.*;
import op.OPDE;
import op.threads.DisplayMessage;
import op.tools.CleanablePanel;
import op.tools.SYSConst;
import op.tools.SYSTools;
import org.apache.commons.collections.Closure;
import tablemodels.TMBedarf;
import tablerenderer.RNDHTML;

import javax.persistence.EntityManager;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.util.Date;

/**
 * @author root
 */
public class DlgBedarf extends CleanablePanel {

    private Closure actionBlock;
    private Resident bewohner;
    private BHP bhp;

//    /**
//     * Creates new form DlgBedarf
//     */
//    private void tblBedarfMousePressed(MouseEvent e) {
//        Point p = e.getPoint();
//        int row = tblBedarf.rowAtPoint(p);
//        final ListSelectionModel lsm = tblBedarf.getSelectionModel();
//        if (lsm.getMinSelectionIndex() == lsm.getMaxSelectionIndex()) {
//            lsm.setSelectionInterval(row, row);
//        }
//        TMBedarf tm = (TMBedarf) tblBedarf.getModel();
//
//        btnOK.setEnabled(!tm.isMaximaleTagesdosisErreicht(row));
//    }

    public DlgBedarf(Resident bewohner, Closure actionBlock) {
        super();
        this.bewohner = bewohner;
        this.actionBlock = actionBlock;
        initComponents();
        loadTable();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jspBedarf = new JScrollPane();
        tblBedarf = new JTable();
        panel1 = new JPanel();
        btnCancel = new JButton();
        btnOK = new JButton();

        //======== this ========
        setPreferredSize(new Dimension(800, 400));
        setLayout(new FormLayout(
            "default:grow",
            "fill:default:grow, $rgap, fill:default"));

        //======== jspBedarf ========
        {

            //---- tblBedarf ----
            tblBedarf.setModel(new DefaultTableModel(
                new Object[][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                },
                new String[] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jspBedarf.setViewportView(tblBedarf);
        }
        add(jspBedarf, CC.xy(1, 1));

        //======== panel1 ========
        {
            panel1.setLayout(new BoxLayout(panel1, BoxLayout.LINE_AXIS));

            //---- btnCancel ----
            btnCancel.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
            btnCancel.setHorizontalAlignment(SwingConstants.RIGHT);
            btnCancel.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnCancelActionPerformed(e);
                }
            });
            panel1.add(btnCancel);

            //---- btnOK ----
            btnOK.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
            btnOK.setHorizontalAlignment(SwingConstants.RIGHT);
            btnOK.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnOKActionPerformed(e);
                }
            });
            panel1.add(btnOK);
        }
        add(panel1, CC.xy(1, 3, CC.RIGHT, CC.DEFAULT));
    }// </editor-fold>//GEN-END:initComponents

    private void jspBedarfComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspBedarfComponentResized
        JScrollPane jsp = (JScrollPane) evt.getComponent();
        Dimension dim = jsp.getSize();
        int textWidth = dim.width;
        TableColumnModel tcm1 = tblBedarf.getColumnModel();
//        if (tcm1.getColumnCount() < 4) {
//            return;
//        }
//        tcm1.getColumn(TMBedarf.COL_SIT).setPreferredWidth(textWidth);
//        tcm1.getColumn(TMBedarf.COL_MSSN).setPreferredWidth(textWidth / 3);
//        tcm1.getColumn(TMBedarf.COL_Dosis).setPreferredWidth(textWidth / 3);
//        tcm1.getColumn(TMBedarf.COL_Hinweis).setPreferredWidth(textWidth / 4);

        tcm1.getColumn(0).setHeaderValue("Verordnung");
//        tcm1.getColumn(1).setHeaderValue("Massnahme");
//        tcm1.getColumn(2).setHeaderValue("Dosis / Häufig.");
//        tcm1.getColumn(3).setHeaderValue("Hinweis");

    }//GEN-LAST:event_jspBedarfComponentResized

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        save();
        cleanup();
        actionBlock.execute(bhp);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cleanup();
        actionBlock.execute(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * Eine Bedarfsmedikation oder eine Bedarfsmassnahme wird in die BHP
     * gesetzt und direkt abgehakt. Ist DAFID > 0 wird auch das Medikament
     * ausgebucht.
     */
    private void save() {
        int row = tblBedarf.getSelectedRow();
        TMBedarf tm = (TMBedarf) tblBedarf.getModel();
        if (row < 0) {
            OPDE.getDisplayManager().addSubMessage(new DisplayMessage("Keine Verordnung ausgewählt"));
        } else if (tm.isMaximaleTagesdosisErreicht(row)) {
            OPDE.getDisplayManager().addSubMessage(new DisplayMessage("Maximale Tagesdosis für diese Verordnung erreicht"));
        } else {


            Date now = new Date();

            EntityManager em = OPDE.createEM();
            try {
                em.getTransaction().begin();

                PrescriptionSchedule vp = em.merge(tm.getPrescriptionSchedule(row));

                bhp = em.merge(new BHP(vp));
                bhp.setUser(OPDE.getLogin().getUser());
                bhp.setIst(now);
                bhp.setSoll(now);
                bhp.setSollZeit(SYSConst.UZ);
                bhp.setDosis(vp.getMaxEDosis());
                bhp.setStatus(BHPTools.STATE_DONE);
                bhp.setMDate(now);
                bhp.setDauer((short) 0);

                if (tm.getBestand(row) != null) {
                    MedStock bestand = em.merge(tm.getBestand(row));
                    MedInventoryTools.entnahmeVorrat(em, bestand.getInventory(), vp.getMaxEDosis(), true, bhp);
                }

                em.getTransaction().commit();
            } catch (Exception ex) {
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                OPDE.fatal(ex);
            } finally {
                em.close();
            }
        }
    }

    @Override
    public void cleanup() {
        SYSTools.unregisterListeners(this);
    }

    @Override
    public void reload() {
        //To change body of implemented methods use File | Settings | File Templates.
    }

    private void loadTable() {
        tblBedarf.setModel(new TMBedarf(PrescriptionsTools.getBedarfsliste(bewohner)));
        tblBedarf.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jspBedarf.dispatchEvent(new ComponentEvent(jspBedarf, ComponentEvent.COMPONENT_RESIZED));
        tblBedarf.getColumnModel().getColumn(0).setCellRenderer(new RNDHTML());
//        tblBedarf.getColumnModel().getColumn(1).setCellRenderer(new RNDHTML());
//        tblBedarf.getColumnModel().getColumn(2).setCellRenderer(new RNDHTML());
        tblBedarf.getColumnModel().getColumn(0).setHeaderValue("Verordnung");
    }

    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private JScrollPane jspBedarf;
    private JTable tblBedarf;
    private JPanel panel1;
    private JButton btnCancel;
    private JButton btnOK;
    // Ende der Variablendeklaration//GEN-END:variables

}

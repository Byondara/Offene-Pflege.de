/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.uebergabe;

import com.jgoodies.forms.factories.CC;
import com.jgoodies.forms.layout.FormLayout;
import com.toedter.calendar.JDateChooser;
import entity.*;
import entity.reports.NReport;
import op.FrmMain;
import op.OPDE;
import op.system.InternalClassACL;
import op.tools.*;
import tablerenderer.RNDHTML;

import javax.persistence.EntityManager;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;

/**
 * <I>20.06.2007 - WishID:43</I>
 *
 * @author tloehr
 */
public class PnlUebergabe extends CleanablePanel {

    public static final String internalClassID = "nursingrecords.handover";
    private final int TAB_DATE = 0;
    private final int TAB_SEARCH = 1;
    private ListSelectionListener lsl;
    private boolean initPhase;
    private long selectedTBID = 0;
    private FrmMain pflege;
    private String classname;
//    private OCSec ocs;
    private javax.swing.JFrame parent;
    private JPopupMenu menu;

    /**
     * Creates new form PnlUebergabe
     */
    public PnlUebergabe(FrmMain pflege) {
        this.pflege = pflege;
        this.initPhase = true;
        this.classname = this.getClass().getName();
        this.parent = pflege;
//        ocs = OPDE.getOCSec();
        initComponents();

        EinrichtungenTools.setComboBox(cmbEinrichtung);
        jdcDatum.setDate(SYSCalendar.today_date());

        this.initPhase = false;
        reloadTable();
    }

    public FrmMain getPflege() {
        return pflege;
    }

    @Override
    public void reload() {
        reloadTable();
    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jToolBar1 = new JToolBar();
        btnNew = new JButton();
        btnConfirmAll = new JButton();
        btnLogout = new JButton();
        lblFrage = new JLabel();
        jspUebergabe = new JScrollPane();
        tblUebergabe = new JTable();
        pnlFilter = new JTabbedPane();
        jPanel4 = new JPanel();
        jLabel2 = new JLabel();
        btnToday = new JButton();
        btnBack = new JButton();
        btnLastLogin = new JButton();
        cmbEinrichtung = new JComboBox();
        jdcDatum = new JDateChooser();
        jPanel5 = new JPanel();
        txtSuche1 = new JTextField();
        btnSearch = new JButton();

        //======== this ========
        setLayout(new FormLayout(
                "default:grow",
                "3*(fill:default, $lgap), fill:default"));

        //======== jToolBar1 ========
        {
            jToolBar1.setFloatable(false);

            //---- btnNew ----
            btnNew.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/filenew.png")));
            btnNew.setText("Neue Eingabe");
            btnNew.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnNewActionPerformed(e);
                }
            });
            jToolBar1.add(btnNew);

            //---- btnConfirmAll ----
            btnConfirmAll.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply-all.png")));
            btnConfirmAll.setText("Alle Best\u00e4tigen");
            btnConfirmAll.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnConfirmAllActionPerformed(e);
                }
            });
            jToolBar1.add(btnConfirmAll);

            //---- btnLogout ----
            btnLogout.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/lock.png")));
            btnLogout.setText("Abmelden");
            btnLogout.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnLogoutActionPerformed(e);
                }
            });
            jToolBar1.add(btnLogout);
        }
        add(jToolBar1, CC.xy(1, 1));

        //---- lblFrage ----
        lblFrage.setFont(new Font("Dialog", Font.BOLD, 18));
        lblFrage.setText("\u00dcbergabeprotokoll");
        add(lblFrage, CC.xy(1, 3));

        //======== jspUebergabe ========
        {
            jspUebergabe.addComponentListener(new ComponentAdapter() {
                @Override
                public void componentResized(ComponentEvent e) {
                    jspUebergabeComponentResized(e);
                }
            });

            //---- tblUebergabe ----
            tblUebergabe.setModel(new DefaultTableModel(
                    new Object[][]{
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                            {null, null, null, null},
                    },
                    new String[]{
                            "Title 1", "Title 2", "Title 3", "Title 4"
                    }
            ));
            tblUebergabe.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    tblUebergabeMousePressed(e);
                }
            });
            tblUebergabe.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent e) {
                    tblUebergabePropertyChange(e);
                }
            });
            jspUebergabe.setViewportView(tblUebergabe);
        }
        add(jspUebergabe, CC.xy(1, 7));

        //======== pnlFilter ========
        {
            pnlFilter.addChangeListener(new ChangeListener() {
                @Override
                public void stateChanged(ChangeEvent e) {
                    pnlFilterStateChanged(e);
                }
            });

            //======== jPanel4 ========
            {

                //---- jLabel2 ----
                jLabel2.setText("Berichte anzeigen vom:");

                //---- btnToday ----
                btnToday.setText("Heute");
                btnToday.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btnTodayActionPerformed(e);
                    }
                });

                //---- btnBack ----
                btnBack.setText("einen Tag zur\u00fcck");
                btnBack.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btnBackActionPerformed(e);
                    }
                });

                //---- btnLastLogin ----
                btnLastLogin.setText("letzte Abmeldung");
                btnLastLogin.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btnLastLoginActionPerformed(e);
                    }
                });

                //---- cmbEinrichtung ----
                cmbEinrichtung.setModel(new DefaultComboBoxModel(new String[]{
                        "Item 1",
                        "Item 2",
                        "Item 3",
                        "Item 4"
                }));
                cmbEinrichtung.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        cmbEinrichtungItemStateChanged(e);
                    }
                });

                //---- jdcDatum ----
                jdcDatum.addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        jdcDatumPropertyChange(e);
                    }
                });

                GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
                jPanel4.setLayout(jPanel4Layout);
                jPanel4Layout.setHorizontalGroup(
                        jPanel4Layout.createParallelGroup()
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jdcDatum, GroupLayout.PREFERRED_SIZE, 161, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBack)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLastLogin)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnToday)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbEinrichtung, 0, 0, Short.MAX_VALUE)
                                        .addContainerGap())
                );
                jPanel4Layout.setVerticalGroup(
                        jPanel4Layout.createParallelGroup()
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel4Layout.createParallelGroup()
                                                .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                                                .addComponent(jdcDatum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addComponent(btnBack, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                                                        .addGap(2, 2, 2))
                                                .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addComponent(btnLastLogin)
                                                        .addGap(1, 1, 1))
                                                .addComponent(btnToday, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel4Layout.createSequentialGroup()
                                                        .addComponent(cmbEinrichtung, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addGap(3, 3, 3)))
                                        .addGap(62, 62, 62))
                );
                jPanel4Layout.linkSize(SwingConstants.VERTICAL, new Component[]{cmbEinrichtung, jdcDatum});
            }
            pnlFilter.addTab("Zeiraum", jPanel4);


            //======== jPanel5 ========
            {

                //---- txtSuche1 ----
                txtSuche1.setFont(new Font("Lucida Grande", Font.PLAIN, 18));
                txtSuche1.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        txtSuche1ActionPerformed(e);
                    }
                });

                //---- btnSearch ----
                btnSearch.setText("Los gehts");
                btnSearch.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        btnSearchActionPerformed(e);
                    }
                });

                GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
                jPanel5.setLayout(jPanel5Layout);
                jPanel5Layout.setHorizontalGroup(
                        jPanel5Layout.createParallelGroup()
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(txtSuche1, GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearch)
                                        .addContainerGap())
                );
                jPanel5Layout.setVerticalGroup(
                        jPanel5Layout.createParallelGroup()
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(jPanel5Layout.createParallelGroup()
                                                .addGroup(jPanel5Layout.createSequentialGroup()
                                                        .addComponent(txtSuche1, GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                                        .addGap(3, 3, 3))
                                                .addComponent(btnSearch, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap(52, Short.MAX_VALUE))
                );
                jPanel5Layout.linkSize(SwingConstants.VERTICAL, new Component[]{btnSearch, txtSuche1});
            }
            pnlFilter.addTab("Suchbegriff", jPanel5);

        }
        add(pnlFilter, CC.xy(1, 5));
    }// </editor-fold>//GEN-END:initComponents

    private void tblUebergabePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblUebergabePropertyChange
    }//GEN-LAST:event_tblUebergabePropertyChange

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        btnNew.setEnabled(false);
        new DlgBericht(this, (Einrichtungen) cmbEinrichtung.getSelectedItem(), jdcDatum.getDate());
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
//        OPDE.ocmain.lockOC();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnConfirmAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmAllActionPerformed
        TMUebergabe tm = (TMUebergabe) tblUebergabe.getModel();
        if (tm.getRowCount() > 0) {
            ConfirmWorker work = new ConfirmWorker(tm.getBerichte());
            btnConfirmAll.setEnabled(false);
            work.start();
        }
    }//GEN-LAST:event_btnConfirmAllActionPerformed

    /**
     * Innere Hilfsklasse. Mit ihrer Hilfe erscheint ein kleines Fenster mit einem Progressbar,
     * während die Bestätigungsprozedur abläuft. Dieses Fenster kann man abbrechen,
     * dann werden auch die bisherigen Bestätigung zurück gerollt.
     */
    class ConfirmWorker extends Thread {

        private ArrayList berichte;
        private ProgressMonitor pm;

        public ConfirmWorker(ArrayList berichte) {
            super();
            this.berichte = berichte;
            pm = new ProgressMonitor(pflege, "Bitte warten", "Protokoll wird bestätigt.", 0, berichte.size());
            pm.setMillisToDecideToPopup(0);
            pm.setMillisToPopup(0);
        }

        public void run() {
            confirm();
        }

        private void setProgressFromWorker(final int progress) {
            try {
                javax.swing.SwingUtilities.invokeAndWait(new Runnable() {

                    public void run() {
                        pm.setProgress(progress);
                    }
                });
            } catch (Exception e) {
                // oh well.
            }
        }

        private void confirm() {
            int max = berichte.size();


            EntityManager em = OPDE.createEM();


            try {
                em.getTransaction().begin();
                for (int row = 0; row < max; row++) {
                    setProgressFromWorker(row);
                    Object[] bericht = (Object[]) berichte.get(row);
                    if (((Long) bericht[TMUebergabe.LIST_ACKNOWLEDGED]).longValue() == 0) { // aktueller User hat diesen Bericht noch nicht bestätigt.
                        if (bericht[TMUebergabe.LIST_BERICHT] instanceof Uebergabebuch) {
                            Uebergabebuch uebergabe = (Uebergabebuch) bericht[TMUebergabe.LIST_BERICHT];
                            uebergabe.getUsersAcknowledged().add(new Uebergabe2User(uebergabe, OPDE.getLogin().getUser()));
                            em.merge(uebergabe);
                        } else {
                            NReport pflegebericht = (NReport) bericht[TMUebergabe.LIST_BERICHT];
                            pflegebericht.getUsersAcknowledged().add(new PB2User(pflegebericht, OPDE.getLogin().getUser()));
                            em.merge(pflegebericht);
                        }
                    }
                    if (pm.isCanceled()) {
                        throw new Exception("Bestätigung abgebrochen.");
                    }
                }
                em.getTransaction().commit();
            } catch (Exception e) {
                em.getTransaction().rollback();
            } finally {
                em.close();
            }
            btnConfirmAll.setEnabled(true);
            reloadTable();
            pm.setProgress(max);
            //pm.close();
            try {
                Thread.currentThread().sleep(500);
            } catch (Exception e) {
            }
        }
    }

    private void jspUebergabeComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspUebergabeComponentResized
        JScrollPane jsp = (JScrollPane) evt.getComponent();
        Dimension dim = jsp.getSize();
        // Größe der Text Spalten im DFN ändern.
        // Summe der fixen Spalten  = 175 + ein bisschen
        int textWidth = dim.width - 200 - 200 - 50;
        TableColumnModel tcm1 = tblUebergabe.getColumnModel();
        if (tcm1.getColumnCount() < 3) {
            return;
        }

        tcm1.getColumn(TMUebergabe.COL_PIT).setPreferredWidth(200);
        tcm1.getColumn(TMUebergabe.COL_INFO).setPreferredWidth(200);
        tcm1.getColumn(TMUebergabe.COL_HTML).setPreferredWidth(textWidth);
//        tcm1.getColumn(TMUebergabe.COL_ACKN).setPreferredWidth(50);

        tcm1.getColumn(TMUebergabe.COL_PIT).setHeaderValue("Datum");
        tcm1.getColumn(TMUebergabe.COL_INFO).setHeaderValue("Info");
        tcm1.getColumn(TMUebergabe.COL_HTML).setHeaderValue("Bericht");
//        tcm1.getColumn(TMUebergabe.COL_ACKN).setHeaderValue("Gesehen");

    }//GEN-LAST:event_jspUebergabeComponentResized

    private void cmbEinrichtungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEinrichtungItemStateChanged
        if (initPhase) {
            return;
        }
        reloadTable();
    }//GEN-LAST:event_cmbEinrichtungItemStateChanged

    private void jdcDatumPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcDatumPropertyChange
        if (initPhase) {
            return;
        }
        if (!evt.getPropertyName().equals("date")) {
            return;
        }
        SYSCalendar.checkJDC((JDateChooser) evt.getSource());
        reloadTable();
    }//GEN-LAST:event_jdcDatumPropertyChange

    private void tblUebergabeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUebergabeMousePressed
        Point p = evt.getPoint();
        ListSelectionModel lsm = tblUebergabe.getSelectionModel();

        int row = tblUebergabe.rowAtPoint(p);
        lsm.setSelectionInterval(row, row);

        Object bericht = tblUebergabe.getModel().getValueAt(lsm.getLeadSelectionIndex(), TMUebergabe.COL_BERICHT);

        if (evt.isPopupTrigger()) {

//            JMenuItem itemPopupPrint = new JMenuItem("Markierte Berichte drucken");
//            itemPopupPrint.addActionListener(new java.awt.event.ActionListener() {
//
//                public void actionPerformed(java.awt.event.ActionEvent evt) {
//                    int[] sel = tblTB.getSelectedRows();
//                    printBericht(sel);
//                }
//            });
//            menu.add(itemPopupPrint);

//            itemPopupEdit.setEnabled(OPDE.internalClasses.userHasAccessLevelForThisClass(internalClassID, InternalClassACL.UPDATE));

            menu = new JPopupMenu();
            if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.USER1)) {
                DateFormat df = DateFormat.getDateTimeInstance();
                JMenu menuListAck = new JMenu("Bestätigungen");
                if (bericht instanceof Uebergabebuch) {
                    if (((Uebergabebuch) bericht).getUsersAcknowledged().isEmpty()) {
                        menuListAck.add(new JMenuItem("bisher keine Bestätigungen"));
                    } else {
                        Iterator<Uebergabe2User> it = ((Uebergabebuch) bericht).getUsersAcknowledged().iterator();
                        while (it.hasNext()) {
                            Uebergabe2User u2u = it.next();
                            menuListAck.add(new JMenuItem(u2u.getUser().getFullname() + " <b>[" + df.format(u2u.getPit()) + "]</b>"));
                        }
                    }
                } else {
                    if (((NReport) bericht).getUsersAcknowledged().isEmpty()) {
                        menuListAck.add(new JMenuItem("bisher keine Bestätigungen"));
                    } else {
                        ArrayList<PB2User> usersackn = new ArrayList<PB2User>(((NReport) bericht).getUsersAcknowledged());
                        Collections.sort(usersackn);
                        Iterator<PB2User> it = usersackn.iterator();
                        while (it.hasNext()) {
                            PB2User p2u = it.next();
                            menuListAck.add(new JMenuItem(HTMLTools.toHTML(p2u.getUser().getFullname() + " <b>[" + df.format(p2u.getPit()) + "]</b>")));
                        }
                    }
                }
                menu.add(menuListAck);
            }

            menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());
        }
    }//GEN-LAST:event_tblUebergabeMousePressed

    private void btnTodayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodayActionPerformed
        jdcDatum.setDate(new Date());
    }//GEN-LAST:event_btnTodayActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        jdcDatum.setDate(SYSCalendar.addDate(jdcDatum.getDate(), -1));
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLastLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastLoginActionPerformed
        // Der Tag der letzten Abmeldung
        //jdcDatum.setDate(SYSLoginTools.getPreviousLogin(OPDE.getLogin()).getLogout());

        // Hier muss erst die Infratstruktur für die neue anmeldung rein.
        // Wir brauchen eine HOSTS tabelle, die dann auf Logins verweist.
        // die logins wiederum müssen die internal classes auflisten, die gerade offen sind
        // der Proof of Life muss sich auf den Host beziehen.
        // die collision domains müssen mit in die internalClasses mit rein.
        // die Host kennung kann durch die localproperties überschrieben werden.
        // die Zuordnung welche Maschine welche Station anzeigen soll, findet über die Hosts statt.

    }//GEN-LAST:event_btnLastLoginActionPerformed

    private void txtSuche1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSuche1ActionPerformed
//        if (!txtSuche.equals("")) {
//            reloadTable();
//        }
    }//GEN-LAST:event_txtSuche1ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
//        if (!txtSuche.equals("")) {
//            reloadTable();
//        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void pnlFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pnlFilterStateChanged
        if (pnlFilter.getSelectedIndex() == TAB_SEARCH) {
            //txtSuche.requestFocus();


        }
    }//GEN-LAST:event_pnlFilterStateChanged

    public void cleanup() {
        jdcDatum.cleanup();
        SYSTools.unregisterListeners(this);
    }

    public void reloadTable() {
        btnNew.setEnabled(true);
        // Tagesbericht Liste aktualisieren
        ListSelectionModel lsm = tblUebergabe.getSelectionModel();
        if (lsl != null) {
            lsm.removeListSelectionListener(lsl);

        }
        lsl = new HandleSelections();

        int sort = TMUebergabe.SORT_NAME;
//        if (rbSortUhrzeit.isSelected()) {
//            sort = TMUebergabe.SORT_UHRZEIT;
//        }
        if (pnlFilter.getSelectedIndex() == TAB_DATE) {
            tblUebergabe.setModel(new TMUebergabe(jdcDatum.getDate(), (Einrichtungen) cmbEinrichtung.getSelectedItem()));
        } else {
//            if (!txtSuche.getText().equals("")) {
//                tblUebergabe.setModel(new TMUebergabe(le.getData(), txtSuche.getText(), sort));
//            }
        }

        // Sonst wird der Listenaufbau sehr langsam.
        // tblTB.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblUebergabe.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lsm.addListSelectionListener(lsl);

        jspUebergabe.dispatchEvent(new ComponentEvent(jspUebergabe, ComponentEvent.COMPONENT_RESIZED));

        tblUebergabe.getColumnModel().getColumn(TMUebergabe.COL_PIT).setCellRenderer(new RNDHTML());

        tblUebergabe.getColumnModel().getColumn(TMUebergabe.COL_INFO).setCellRenderer(new RNDHTML());
        tblUebergabe.getColumnModel().getColumn(TMUebergabe.COL_HTML).setCellRenderer(new RNDHTML());
//        tblUebergabe.getColumnModel().getColumn(TMUebergabe.COL_ACKN).setCellRenderer(new RNDUbergabe());

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JToolBar jToolBar1;
    private JButton btnNew;
    private JButton btnConfirmAll;
    private JButton btnLogout;
    private JLabel lblFrage;
    private JScrollPane jspUebergabe;
    private JTable tblUebergabe;
    private JTabbedPane pnlFilter;
    private JPanel jPanel4;
    private JLabel jLabel2;
    private JButton btnToday;
    private JButton btnBack;
    private JButton btnLastLogin;
    private JComboBox cmbEinrichtung;
    private JDateChooser jdcDatum;
    private JPanel jPanel5;
    private JTextField txtSuche1;
    private JButton btnSearch;
    // End of variables declaration//GEN-END:variables

    class HandleSelections implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent lse) {
            // Erst reagieren wenn der Auswahl-Vorgang abgeschlossen ist.
            TableModel tm = tblUebergabe.getModel();
            if (!lse.getValueIsAdjusting()) {
                DefaultListSelectionModel lsm = (DefaultListSelectionModel) lse.getSource();
                btnConfirmAll.setEnabled(true);
//                selectedTBID = ((Long) tm.getValueAt(lsm.getLeadSelectionIndex(), TMUebergabe.COL_TBID)).longValue();
//                long qsuid = ((Long) tm.getValueAt(lsm.getLeadSelectionIndex(), TMUebergabe.COL_QSUID)).longValue();
//                btnConfirm.setEnabled(!lsm.isSelectionEmpty() && qsuid == 0);
                //btnInfo.setEnabled(ocs.mayEnabled(classname, "btnInfo", !lsm.isSelectionEmpty()));


            }
        }
    }
//    private boolean mayEnabled(String sjc, boolean desiredState){
//        HashMap hm = new HashMap();
//        
//        if (OPDE.ocgroups.containsKey("admin") || OPDE.ocgroups.containsKey("pdl")) {
//            hm.put(sjc+".enabled",new Boolean(true));
//        } else {
//            hm.put(sjc+".enabled",new Boolean(false));
//        }
//        
//        // Ohne Eintrag gilt die Erlaubnis als erteilt (!containskey)
//        boolean access = !hm.containsKey(sjc+".enabled") || ((Boolean) hm.get(sjc+".enabled")).booleanValue();
//        
//        return (desiredState && access);
//    }
}

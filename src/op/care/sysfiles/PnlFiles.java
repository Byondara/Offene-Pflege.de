/*
 * OffenePflege
 * Copyright (C) 2011 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License V2 as published by the Free Software Foundation
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program; if not, write to
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License,
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht,
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 */
package op.care.sysfiles;

import com.jidesoft.pane.CollapsiblePane;
import com.jidesoft.pane.CollapsiblePanes;
import com.jidesoft.swing.JideBoxLayout;
import entity.Bewohner;
import entity.BewohnerTools;
import entity.files.SYSFiles;
import entity.files.SYSFilesTools;
import net.iharder.dnd.FileDrop;
import op.OPDE;
import op.system.DlgYesNo;
import op.threads.DisplayMessage;
import op.tools.InternalClassACL;
import op.tools.NursingRecordsPanel;
import op.tools.SYSConst;
import op.tools.SYSTools;
import org.apache.commons.collections.Closure;
import org.jdesktop.swingx.VerticalLayout;
import tablemodels.TMSYSFiles;
import tablerenderer.RNDHTML;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;

/**
 * @author tloehr
 */
public class PnlFiles extends NursingRecordsPanel {
    // Wird für die Zuordnung beim Rechtesystem innerhalb
    // OCRights Tabelle benötigt.

    private static final int DROPPANEL = 1;
    private static final int TABLE = 0;

    public static final String internalClassID = "nursingrecords.files";
    private JPopupMenu menu;
    private Bewohner bewohner;
    private boolean ftpServerReady;
    private JScrollPane jspSearch;
    private CollapsiblePanes searchPanes;

    /**
     * Creates new form PnlFiles
     */
    public PnlFiles(Bewohner bewohner, JScrollPane jspSearch) {
        initComponents();
        this.jspSearch = jspSearch;
        ftpServerReady = SYSFilesTools.isFTPServerReady();
        initPanel();
        change2Bewohner(bewohner);
    }


    private void initPanel() {
        prepareSearchArea();

    }

    @Override
    public void cleanup() {
        SYSTools.unregisterListeners(menu);
        SYSTools.unregisterListeners(this);
    }

    @Override
    public void change2Bewohner(Bewohner bewohner) {
        this.bewohner = bewohner;
        OPDE.getDisplayManager().setMainMessage(BewohnerTools.getBWLabelText(bewohner));
        reloadTable();
    }

    @Override
    public void reload() {
        reloadTable();
    }

    void reloadTable() {

        ArrayList<SYSFiles> files = new ArrayList<SYSFiles>(SYSFilesTools.findByBewohner(bewohner));
        Collections.sort(files);

        tblFiles.setModel(new TMSYSFiles(files));
        tblFiles.getColumnModel().getColumn(0).setCellRenderer(new RNDHTML());
        tblFiles.getColumnModel().getColumn(1).setCellRenderer(new RNDHTML());
        jspFiles.dispatchEvent(new ComponentEvent(jspFiles, ComponentEvent.COMPONENT_RESIZED));
//        tblFiles.getColumnModel().getColumn(2).setCellRenderer(new RNDHTML());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlMain = new JPanel();
        jspFiles = new JScrollPane();
        tblFiles = new JTable();

        //======== this ========
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

        //======== pnlMain ========
        {
            pnlMain.setLayout(new BoxLayout(pnlMain, BoxLayout.X_AXIS));

            //======== jspFiles ========
            {
                jspFiles.addComponentListener(new ComponentAdapter() {
                    @Override
                    public void componentResized(ComponentEvent e) {
                        jspFilesComponentResized(e);
                    }
                });

                //---- tblFiles ----
                tblFiles.setModel(new DefaultTableModel(
                        new Object[][]{
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                                {null, null, null, null},
                        },
                        new String[]{
                                "Title 1", "Title 2", "Title 3", "Title 4"
                        }
                ));
                tblFiles.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                tblFiles.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        tblFilesMousePressed(e);
                    }
                });
                jspFiles.setViewportView(tblFiles);
            }
            pnlMain.add(jspFiles);
        }
        add(pnlMain);
    }// </editor-fold>//GEN-END:initComponents

    private void tblFilesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilesMousePressed

        Point p = evt.getPoint();
        ListSelectionModel lsm = tblFiles.getSelectionModel();

        boolean singleRowSelected = lsm.getMaxSelectionIndex() == lsm.getMinSelectionIndex();

        int row = tblFiles.rowAtPoint(p);
        if (singleRowSelected) {
            lsm.setSelectionInterval(row, row);
        }

        TMSYSFiles tm = (TMSYSFiles) tblFiles.getModel();
        final SYSFiles sysfile = tm.getRow(row);

        if (evt.isPopupTrigger()) {

            SYSTools.unregisterListeners(menu);
            menu = new JPopupMenu();

            // SELECT
            JMenuItem itemPopupShow = new JMenuItem(OPDE.lang.getString("misc.commands.show"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/viewmag1.png")));
            itemPopupShow.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    SYSFilesTools.handleFile(sysfile, Desktop.Action.OPEN);
                }
            });
            menu.add(itemPopupShow);
            itemPopupShow.setEnabled(OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.SELECT));

            JMenuItem itemPopupDelete = new JMenuItem(OPDE.lang.getString("misc.commands.delete"), new ImageIcon(getClass().getResource("/artwork/22x22/bw/trashcan_empty.png")));
            itemPopupDelete.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    new DlgYesNo(OPDE.lang.getString("misc.questions.delete"), new ImageIcon(getClass().getResource("/artwork/48x48/bw/trashcan_empty.png")), new Closure() {
                        @Override
                        public void execute(Object o) {
                            SYSFilesTools.deleteFile(sysfile);
                            reloadTable();
                        }
                    });

                }
            });
            menu.add(itemPopupDelete);
            itemPopupDelete.setEnabled(OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.DELETE));

            menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());
        } else {
            if (evt.getClickCount() == 2 && OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.SELECT)) { // DoppelClick
                SYSFilesTools.handleFile(sysfile, Desktop.Action.OPEN);
            }
        }


    }//GEN-LAST:event_tblFilesMousePressed

    private void jspFilesComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspFilesComponentResized
        JScrollPane jsp = (JScrollPane) evt.getComponent();
        Dimension dim = jsp.getSize();
        // Größe der Text Spalte im TB ändern.
        // Summe der fixen Spalten  = 210 + ein bisschen
        int textWidth = dim.width - 25;
        tblFiles.getColumnModel().getColumn(0).setPreferredWidth(textWidth / 2);
        tblFiles.getColumnModel().getColumn(1).setPreferredWidth(textWidth / 2);
//        tblFiles.getColumnModel().getColumn(2).setPreferredWidth(100);
    }//GEN-LAST:event_jspFilesComponentResized

    private void prepareSearchArea() {
        searchPanes = new CollapsiblePanes();
        searchPanes.setLayout(new JideBoxLayout(searchPanes, JideBoxLayout.Y_AXIS));
        jspSearch.setViewportView(searchPanes);


        searchPanes.add(addCommands());
//        searchPanes.add(addFilters());

        searchPanes.addExpansion();

    }

    private CollapsiblePane addFilters() {
        JPanel labelPanel = new JPanel();
        labelPanel.setBackground(Color.WHITE);
//        labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.PAGE_AXIS));
        labelPanel.setLayout(new VerticalLayout(5));

        CollapsiblePane panelFilter = new CollapsiblePane(OPDE.lang.getString("misc.msg.Filter"));
        panelFilter.setStyle(CollapsiblePane.PLAIN_STYLE);
        panelFilter.setCollapsible(false);

//        tbAbgesetzt = GUITools.getNiceToggleButton("Abgesetzte");
//        tbAbgesetzt.addItemListener(new ItemListener() {
//            @Override
//            public void itemStateChanged(ItemEvent e) {
//                if (initPhase) return;
//                SYSPropsTools.storeState(internalClassID + ":tbAbgesetzt", tbAbgesetzt);
//                reloadTable();
//            }
//        });
//
//        labelPanel.add(tbAbgesetzt);
//        SYSPropsTools.restoreState(internalClassID + ":tbAbgesetzt", tbAbgesetzt);

        panelFilter.setContentPane(labelPanel);

        return panelFilter;
    }

    private CollapsiblePane addCommands() {
        JPanel mypanel = new JPanel();
        mypanel.setLayout(new VerticalLayout());
        mypanel.setBackground(Color.WHITE);

        CollapsiblePane cmdPane = new CollapsiblePane(OPDE.lang.getString(internalClassID));
        cmdPane.setStyle(CollapsiblePane.PLAIN_STYLE);
        cmdPane.setCollapsible(false);

        try {
            cmdPane.setCollapsed(false);
        } catch (PropertyVetoException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        JPanel dropPanel = new JPanel();
        dropPanel.setLayout(new BorderLayout());
        JLabel dropLabel = new JLabel(OPDE.lang.getString(internalClassID + ".drophere"), new ImageIcon(getClass().getResource("/artwork/48x48/kget_dock.png")), SwingConstants.CENTER);
        dropLabel.setFont(SYSConst.ARIAL20);
        dropLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        dropLabel.setVerticalTextPosition(SwingConstants.BOTTOM);
        dropPanel.add(BorderLayout.CENTER, dropLabel);
        dropPanel.setPreferredSize(new Dimension(180, 180));
        dropPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));
        mypanel.add(dropPanel);

        new FileDrop(dropPanel, new FileDrop.Listener() {
            public void filesDropped(java.io.File[] files) {
                java.util.List<SYSFiles> successful = SYSFilesTools.putFiles(files, bewohner);
                if (!successful.isEmpty()){
                    OPDE.getDisplayManager().addSubMessage(new DisplayMessage(successful.size() + " " + OPDE.lang.getString("misc.msg.Files") + " " + OPDE.lang.getString("misc.msg.added")));
                }
                reloadTable();
            }
        });

//        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.UPDATE)) {
//            JideButton buchenButton = GUITools.createHyperlinkButton("Medikamente einbuchen", new ImageIcon(getClass().getResource("/artwork/22x22/shetaddrow.png")), new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent actionEvent) {
//                    new DlgBestand(bewohner);
//                }
//            });
//            mypanel.add(buchenButton);
//        }
//
//
//        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.PRINT)) {
//            JideButton printButton = GUITools.createHyperlinkButton("Verordnungen drucken", new ImageIcon(getClass().getResource("/artwork/22x22/bw/printer.png")), new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent actionEvent) {
//                    printVerordnungen(null);
//                }
//            });
//            mypanel.add(printButton);
//        }
//
//        if (OPDE.getAppInfo().userHasAccessLevelForThisClass(internalClassID, InternalClassACL.PRINT)) {
//            JideButton printButton = GUITools.createHyperlinkButton("Stellplan drucken", new ImageIcon(getClass().getResource("/artwork/22x22/bw/printer.png")), new ActionListener() {
//                @Override
//                public void actionPerformed(ActionEvent actionEvent) {
//                    printStellplan();
//                }
//            });
//            mypanel.add(printButton);
//        }

        cmdPane.setContentPane(mypanel);
        return cmdPane;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel pnlMain;
    private JScrollPane jspFiles;
    private JTable tblFiles;
    // End of variables declaration//GEN-END:variables
}

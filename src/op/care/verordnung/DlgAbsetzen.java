/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */

package op.care.verordnung;

import entity.Arzt;
import entity.ArztTools;
import entity.Krankenhaus;
import entity.KrankenhausTools;
import entity.verordnungen.Verordnung;
import entity.verordnungen.VerordnungTools;
import op.OPDE;
import op.tools.ListElement;
import op.tools.SYSTools;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 * @author root
 */
public class DlgAbsetzen extends javax.swing.JDialog {
    private Verordnung verordnung;

    /**
     * Creates new form DlgAbsetzen
     */
    public DlgAbsetzen(java.awt.Frame parent, String text, Verordnung verordnung) {
        super(parent, true);
        this.verordnung = verordnung;
        initComponents();
        lblText.setText(text);
        fillAerzteUndKHs();
        SYSTools.centerOnParent(parent, this);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSeparator1 = new JSeparator();
        lblVital = new JLabel();
        jLabel4 = new JLabel();
        cmbArztAb = new JComboBox();
        cmbKHAb = new JComboBox();
        btnCancel = new JButton();
        jSeparator2 = new JSeparator();
        btnOK = new JButton();
        lblText = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        Container contentPane = getContentPane();

        //---- lblVital ----
        lblVital.setFont(new Font("Dialog", Font.BOLD, 18));
        lblVital.setText("Verordnung absetzen");

        //---- jLabel4 ----
        jLabel4.setText("Durch:");

        //---- cmbArztAb ----
        cmbArztAb.setModel(new DefaultComboBoxModel(new String[] {
            "Item 1",
            "Item 2",
            "Item 3",
            "Item 4"
        }));
        cmbArztAb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                cmbArztAbItemStateChanged(e);
            }
        });

        //---- cmbKHAb ----
        cmbKHAb.setModel(new DefaultComboBoxModel(new String[] {
            "Item 1",
            "Item 2",
            "Item 3",
            "Item 4"
        }));
        cmbKHAb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                cmbKHAbItemStateChanged(e);
            }
        });

        //---- btnCancel ----
        btnCancel.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/cancel.png")));
        btnCancel.setText("Abbrechen");
        btnCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnCancelActionPerformed(e);
            }
        });

        //---- btnOK ----
        btnOK.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/apply.png")));
        btnOK.setText("Ok");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnOKActionPerformed(e);
            }
        });

        //---- lblText ----
        lblText.setForeground(Color.blue);
        lblText.setText("jLabel1");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                        .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(lblVital, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(contentPaneLayout.createParallelGroup()
                                                .addComponent(cmbKHAb, 0, 452, Short.MAX_VALUE)
                                                .addComponent(cmbArztAb, 0, 452, Short.MAX_VALUE)))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jSeparator2, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(btnOK)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnCancel))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(lblText, GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)))
                        .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblVital)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblText)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(cmbArztAb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbKHAb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnCancel)
                                .addComponent(btnOK))
                        .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        Arzt arzt = (Arzt) cmbArztAb.getSelectedItem();
        Krankenhaus krankenhaus = (Krankenhaus) cmbKHAb.getSelectedItem();
        VerordnungTools.absetzen(verordnung, arzt, krankenhaus);
        dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbKHAbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKHAbItemStateChanged
        btnOK.setEnabled(cmbArztAb.getSelectedIndex() > 0 || cmbKHAb.getSelectedIndex() > 0);
    }//GEN-LAST:event_cmbKHAbItemStateChanged

    private void cmbArztAbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbArztAbItemStateChanged
        btnOK.setEnabled(cmbArztAb.getSelectedIndex() > 0 || cmbKHAb.getSelectedIndex() > 0);
    }//GEN-LAST:event_cmbArztAbItemStateChanged


    private void fillAerzteUndKHs() {
        EntityManager em = OPDE.createEM();
        Query queryArzt = em.createNamedQuery("Arzt.findAll");
        java.util.List<Arzt> listAerzte = queryArzt.getResultList();
        listAerzte.add(0, null);

        Query queryKH = em.createNamedQuery("Krankenhaus.findAll");
        java.util.List<Krankenhaus> listKH = queryKH.getResultList();
        listKH.add(0, null);

        cmbArztAb.setModel(new DefaultComboBoxModel(listAerzte.toArray()));
        cmbArztAb.setRenderer(ArztTools.getArztRenderer());
        cmbArztAb.setSelectedIndex(0);

        cmbKHAb.setModel(new DefaultComboBoxModel(listKH.toArray()));
        cmbKHAb.setRenderer(KrankenhausTools.getKHRenderer());
        cmbKHAb.setSelectedIndex(0);

        em.close();
    }


    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private JSeparator jSeparator1;
    private JLabel lblVital;
    private JLabel jLabel4;
    private JComboBox cmbArztAb;
    private JComboBox cmbKHAb;
    private JButton btnCancel;
    private JSeparator jSeparator2;
    private JButton btnOK;
    private JLabel lblText;
    // Ende der Variablendeklaration//GEN-END:variables

}

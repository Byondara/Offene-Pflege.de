/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.care.verordnung;

import com.toedter.calendar.JDateChooser;
import op.OPDE;
import op.care.bhp.BHPImport;
import op.care.med.DlgMediAssistent;
import op.tools.DBHandling;
import op.tools.DBRetrieve;
import op.tools.*;
import tablerenderer.RNDHTML;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ComponentEvent;
import java.beans.PropertyChangeListener;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class DlgVerordnung extends javax.swing.JDialog {

    public static final int NEW_MODE = 1; // Neu
    public static final int EDIT_MODE = 2; // Korrigieren
    public static final int CHANGE_MODE = 3; // Ändern
    private long verid;
    private long dafid;
    private java.awt.Frame parent;
    private boolean ignoreSitCaret;
    private boolean ignoreEvent;
    //private boolean bhpVorhanden; // true, wenn die Verordnung bereits abgehakte BHPs besitzt. false, sonst.
    private boolean abgesetzt;
    //private boolean ohneMedi; // true, wenn die Verordnung gar nichts mit Medikamenten zu tun hat.
    private boolean beiBedarf; // true, wenn die Verordnung nur bei Bedarf zur Anwendung kommt.
    private JPopupMenu menu;
    private String bwkennung;
    private PropertyChangeListener myPropertyChangeListener;
    private int editMode;
    long verkennung;
    boolean pleaseDropTmp = false; // Sorgt dafür das Eingaben weggeschmissen werden, falls man das Fenster über den Close Button schließt.

    /**
     * Creates new form DlgVerordnung
     */
    public DlgVerordnung(java.awt.Frame parent, String bwkennung, long verid, int mode) {
        super(parent, true);
        this.parent = parent;
        this.bwkennung = bwkennung;
        this.verid = verid;
        this.editMode = mode;
        initDialog();
    }

    public DlgVerordnung(java.awt.Frame parent, String bwkennung) {
        super(parent, true);
        this.parent = parent;
        this.bwkennung = bwkennung;
        this.verid = 0;
        this.editMode = NEW_MODE;
        initDialog();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgMedikament = new javax.swing.ButtonGroup();
        lblBW = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        cmbSit = new javax.swing.JComboBox();
        txtMed = new javax.swing.JTextField();
        cmbMed = new javax.swing.JComboBox();
        cmbMass = new javax.swing.JComboBox();
        txtSit = new javax.swing.JTextField();
        btnBedarf = new javax.swing.JButton();
        btnMed = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jspDosis = new javax.swing.JScrollPane();
        tblDosis = new javax.swing.JTable();
        cbPackEnde = new javax.swing.JCheckBox();
        cbStellplan = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jdcAB = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        cmbAB = new javax.swing.JComboBox();
        cbAB = new javax.swing.JCheckBox();
        lblAB = new javax.swing.JLabel();
        cmbKHAb = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBemerkung = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jdcAN = new com.toedter.calendar.JDateChooser();
        cmbAN = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lblAN = new javax.swing.JLabel();
        cmbKHAn = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblVerordnung = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblBW.setFont(new java.awt.Font("Dialog", 1, 18));
        lblBW.setForeground(new java.awt.Color(255, 51, 0));
        lblBW.setText("Nachname, Vorname (*GebDatum, 00 Jahre) [??1]");

        lblTitle.setFont(new java.awt.Font("Dialog", 1, 24));
        lblTitle.setText("Ärztliche Verordnung");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmbSit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbSit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSitItemStateChanged(evt);
            }
        });

        txtMed.setText("jTextField1");
        txtMed.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtMedCaretUpdate(evt);
            }
        });
        txtMed.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMedFocusGained(evt);
            }
        });

        cmbMed.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbMed.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMedItemStateChanged(evt);
            }
        });

        cmbMass.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbMass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbMassItemStateChanged(evt);
            }
        });

        txtSit.setText("jTextField1");
        txtSit.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSitCaretUpdate(evt);
            }
        });

        btnBedarf.setText("Situation");
        btnBedarf.setEnabled(false);
        btnBedarf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBedarfActionPerformed(evt);
            }
        });

        btnMed.setText("Medikament");
        btnMed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMedActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Dosis / Häufigkeit"));

        jspDosis.setToolTipText("<html>Drücken Sie die <b>rechte</b> Maustaste, wenn Sie neue Dosierungen eintragen wollen.</html>");
        jspDosis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jspDosisMousePressed(evt);
            }
        });
        jspDosis.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jspDosisComponentResized(evt);
            }
        });

        tblDosis.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        tblDosis.setToolTipText("<html>Drücken Sie die <b>rechte</b> Maustaste, wenn Sie Veränderungen vornehmen wollen.</html>");
        tblDosis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblDosisMousePressed(evt);
            }
        });
        jspDosis.setViewportView(tblDosis);

        cbPackEnde.setText("Bis Packungsende");
        cbPackEnde.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbPackEnde.setEnabled(false);
        cbPackEnde.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbPackEnde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPackEndeActionPerformed(evt);
            }
        });

        cbStellplan.setText("Auf den Stellplan, auch wenn kein Medikament");
        cbStellplan.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbStellplan.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel8Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jspDosis, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                                        .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addComponent(cbPackEnde)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbStellplan)))
                                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addComponent(jspDosis, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbPackEnde)
                                        .addComponent(cbStellplan))
                                .addContainerGap())
        );

        jLabel6.setText("Massnahmen:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbMass, 0, 417, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(btnBedarf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnMed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtSit, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                                        .addComponent(txtMed, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(cmbSit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(cmbMed, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnMed)
                                                        .addComponent(txtMed, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(btnBedarf)
                                                        .addComponent(txtSit, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(cmbMed, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbSit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(cmbMass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Absetzung"));

        jLabel3.setText("Am:");

        jdcAB.setEnabled(false);

        jLabel4.setText("Durch:");

        cmbAB.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbAB.setEnabled(false);
        cmbAB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbABItemStateChanged(evt);
            }
        });

        cbAB.setText("Abgesetzt");
        cbAB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cbAB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cbAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbABActionPerformed(evt);
            }
        });

        lblAB.setText("jLabel13");

        cmbKHAb.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbKHAb.setEnabled(false);
        cmbKHAb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKHAbItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cbAB)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cmbAB, 0, 189, Short.MAX_VALUE)
                                                        .addComponent(cmbKHAb, 0, 189, Short.MAX_VALUE)
                                                        .addComponent(jdcAB, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                                        .addComponent(lblAB, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(cbAB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jdcAB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(cmbAB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbKHAb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAB)
                                .addContainerGap())
        );

        txtBemerkung.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtBemerkungCaretUpdate(evt);
            }
        });
        jScrollPane3.setViewportView(txtBemerkung);

        jLabel5.setText("Bemerkung:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ansetzung"));

        jLabel1.setText("Am:");

        cmbAN.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbAN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbANItemStateChanged(evt);
            }
        });

        jLabel2.setText("Durch:");

        lblAN.setText("jLabel11");

        cmbKHAn.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbKHAn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKHAnItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jdcAN, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                        .addComponent(cmbKHAn, 0, 192, Short.MAX_VALUE)
                                        .addComponent(cmbAN, 0, 192, Short.MAX_VALUE)
                                        .addComponent(lblAN, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jdcAN, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(cmbAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbKHAn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAN)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                                .addContainerGap())
        );

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/apply.png"))); // NOI18N
        btnSave.setText("Speichern");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/cancel.png"))); // NOI18N
        btnClose.setText("Schließen");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblVerordnung.setFont(new java.awt.Font("Dialog", 1, 18));
        lblVerordnung.setForeground(new java.awt.Color(0, 51, 255));
        lblVerordnung.setText("jLabel11");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblVerordnung, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblVerordnung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                                        .addComponent(lblBW, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnSave)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnClose))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBW)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnClose)
                                        .addComponent(btnSave))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbABItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbABItemStateChanged
        if (ignoreEvent) {
            return;
        }
        ((JComboBox) evt.getSource()).setToolTipText(((JComboBox) evt.getSource()).getSelectedItem().toString());
        saveOK();
    }//GEN-LAST:event_cmbABItemStateChanged

    private void cmbKHAbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKHAbItemStateChanged
        if (ignoreEvent) {
            return;
        }
        ((JComboBox) evt.getSource()).setToolTipText(((JComboBox) evt.getSource()).getSelectedItem().toString());
        saveOK();
    }//GEN-LAST:event_cmbKHAbItemStateChanged

    private void cmbKHAnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKHAnItemStateChanged
        if (ignoreEvent) {
            return;
        }
        ((JComboBox) evt.getSource()).setToolTipText(((JComboBox) evt.getSource()).getSelectedItem().toString());
        saveOK();
    }//GEN-LAST:event_cmbKHAnItemStateChanged

    public void initDialog() {
        initComponents();
        prepareTMPData();
        SYSTools.setBWLabel(lblBW, bwkennung);
        setTitle(SYSTools.getWindowTitle("Ärztliche Verordnungen, Detailansicht"));
        fillÄrzte();

        ignoreSitCaret = true;
        ignoreEvent = true;
        txtSit.setText("");
        txtMed.setText("");
        cmbMass.setModel(op.care.planung.DBHandling.getMassnahmen(op.care.planung.DBHandling.MSSN_MODE_NUR_BHP));
        jdcAN.setMinSelectableDate(new Date());
        jdcAB.setMinSelectableDate(new Date());
        if (this.editMode == NEW_MODE) { // NewMode
            dafid = 0;
            lblTitle.setText(lblTitle.getText() + " (Neuer Eintrag)");
            jdcAN.setDate(SYSCalendar.today_date());
            cbAB.setSelected(false);
            txtBemerkung.setText("");
            lblAN.setText(OPDE.getLogin().getUser().getUKennung());
            lblAB.setText("");
            cmbMed.setModel(new DefaultComboBoxModel());
            cmbSit.setModel(new DefaultComboBoxModel());
            cmbMass.setSelectedIndex(-1);
            cbStellplan.setEnabled(true);
            cbStellplan.setSelected(false);
            tblDosis.setModel(new DefaultTableModel());
            lblVerordnung.setText(" ");
            verkennung = 0;
            cbPackEnde.setEnabled(false);
        } else { // CHANGE oder EDIT
            lblTitle.setText(lblTitle.getText() + (editMode == EDIT_MODE ? " (Korrektur)" : " (Änderung der bestehenden Verordnung)"));
            // Bei einer Änderung muss sich das Fenster am Anfang in einem Zustand befinden,
            // der ein Save ermöglich
            btnSave.setEnabled(true);
            HashMap verordnung = DBRetrieve.getSingleRecord("BHPVerordnung", new String[]{"AnDatum", "AbDatum", "AnArztID", "AbArztID", "AnKHID", "AbKHID", "AnUKennung", "AbUKennung", "VerKennung", "Bemerkung", "MassID", "DafID", "SitID", "BisPackEnde", "Stellplan"}, "VerID", verid);
            abgesetzt = ((BigInteger) verordnung.get("AbArztID")).longValue() > 0 || ((BigInteger) verordnung.get("AbKHID")).longValue() > 0;
            beiBedarf = ((BigInteger) verordnung.get("SitID")).longValue() > 0;
            verkennung = ((BigInteger) verordnung.get("VerKennung")).longValue();
            jdcAN.setDate(new Date());
            if (this.editMode == EDIT_MODE) {
                lblAN.setText((String) verordnung.get("AnUKennung"));
            } else {
                lblAN.setText(OPDE.getLogin().getUser().getUKennung());
            }
            SYSTools.selectInComboBox(cmbAN, ((BigInteger) verordnung.get("AnArztID")).longValue());
            SYSTools.selectInComboBox(cmbKHAn, ((BigInteger) verordnung.get("AnKHID")).longValue());
            cmbAB.setToolTipText(cmbAB.getSelectedItem().toString());
            cbPackEnde.setSelected(((Boolean) verordnung.get("BisPackEnde")).booleanValue());
            cmbKHAn.setToolTipText(cmbKHAn.getSelectedItem().toString());
            jdcAN.setEnabled(editMode == EDIT_MODE);
            txtBemerkung.setText(SYSTools.catchNull((String) verordnung.get("Bemerkung")));
            dafid = ((BigInteger) verordnung.get("DafID")).longValue();
            cmbMed.setModel(op.care.med.DBHandling.getMedis(dafid));
            cmbMass.setEnabled(cmbMed.getModel().getSize() == 0);
            cbStellplan.setEnabled(cmbMed.getModel().getSize() == 0);
            cbStellplan.setSelected(((Boolean) verordnung.get("Stellplan")).booleanValue());
            //cmbMedItemStateChanged(null);
            cmbSit.setModel(op.care.med.DBHandling.getSit(((BigInteger) verordnung.get("SitID")).longValue()));
            SYSTools.selectInComboBox(cmbMass, ((Long) verordnung.get("MassID")).longValue());
            cmbMed.setEnabled(this.editMode != CHANGE_MODE);
            txtMed.setEnabled(this.editMode != CHANGE_MODE);
            txtSit.setEnabled(this.editMode != CHANGE_MODE);
            cmbSit.setEnabled(this.editMode != CHANGE_MODE);
            if (cmbMed.getSelectedItem() != null) {
                lblVerordnung.setText(cmbMed.getSelectedItem().toString());
                cbPackEnde.setEnabled(true);
            } else {
                lblVerordnung.setText(cmbMass.getSelectedItem().toString());
                cbPackEnde.setEnabled(false);
            }
            if (!abgesetzt) {
                cbAB.setSelected(false);
                lblAB.setText("");
                cmbAB.setSelectedIndex(-1);
            } else {
                cbAB.setSelected(true);
                jdcAB.setDate((Date) verordnung.get("AbDatum"));
                lblAB.setText((String) verordnung.get("AbUKennung"));
                SYSTools.selectInComboBox(cmbAB, ((BigInteger) verordnung.get("AbArztID")).longValue());
                SYSTools.selectInComboBox(cmbKHAb, ((BigInteger) verordnung.get("AbKHID")).longValue());
                cmbAB.setToolTipText(cmbAB.getSelectedItem().toString());
                cmbKHAb.setToolTipText(cmbKHAb.getSelectedItem().toString());
            }
            verordnung.clear();
            verordnung = null;

        }

        reloadTable();
        ignoreSitCaret = false;
        ignoreEvent = false;
        pack();
        SYSTools.centerOnParent(parent, this);
        txtMed.requestFocus();

        myPropertyChangeListener = new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("value")) {
                    JDateChooser jdcDatum = (JDateChooser) ((JComponent) evt.getSource()).getParent();
                    SYSCalendar.checkJDC(jdcDatum);
                }
            }
        };

        jdcAN.getDateEditor().addPropertyChangeListener(myPropertyChangeListener);
        jdcAB.getDateEditor().addPropertyChangeListener(myPropertyChangeListener);
        setVisible(true);
    }

    private void txtMedFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedFocusGained
        SYSTools.markAllTxt(txtMed);
    }//GEN-LAST:event_txtMedFocusGained

    private void cmbMassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMassItemStateChanged
        if (ignoreEvent) {
            return;
        }
        saveOK();
    }//GEN-LAST:event_cmbMassItemStateChanged

    private void btnMedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMedActionPerformed
        //String template = ( txtMed.getText().matches("^ß?\\d{7}") ? "" : txtMed.getText());
        //new DlgMed(this, template);
        ArrayList result = new ArrayList();
        result.add(txtMed.getText());
        new DlgMediAssistent(this, result);
        if (result.size() > 0) {
            ignoreEvent = true;
            txtMed.setText(result.get(0).toString());
            ignoreEvent = false;
            txtMedCaretUpdate(null);
        }
    }//GEN-LAST:event_btnMedActionPerformed

    private void btnBedarfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBedarfActionPerformed
        if (JOptionPane.showConfirmDialog(this, "\"" + txtSit.getText() + "\"", "Situation hinzufügen",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            HashMap hm = new HashMap();
            hm.put("Text", txtSit.getText());
            long sitid = DBHandling.insertRecord("Situationen", hm);
            hm.clear();
            cmbSit.setModel(op.care.med.DBHandling.getSit(sitid));
            cbPackEnde.setEnabled(false);
            ignoreEvent = true;
            cbPackEnde.setSelected(false);
            ignoreEvent = false;
        }
    }//GEN-LAST:event_btnBedarfActionPerformed

    private void jspDosisMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jspDosisMousePressed
        if (!evt.isPopupTrigger()) {
            return;
        }

        // Wenn die Dosis Tabelle leer ist, dann funktioniert da auch kein MousePressed Event
        // In diesem Fall muss die ScrollPane einspringen.
        TableModel tm = tblDosis.getModel();
        if (tm.getRowCount() > 0) {
            return;
        }

        SYSTools.unregisterListeners(menu);
        menu = new JPopupMenu();

        JMenuItem itemPopupNew = new JMenuItem("Neue Dosis eingeben");
        itemPopupNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Date ldatum = null;
                DlgVerabreichung dlg = new DlgVerabreichung(parent, 0, verid, dafid, cmbSit.getSelectedIndex() >= 0);
                dlg = null;
                pleaseDropTmp = true;
                reloadTable();
            }
        });
        menu.add(itemPopupNew);
        Point p = evt.getPoint();
        menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());
    }//GEN-LAST:event_jspDosisMousePressed

    private void cmbMedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbMedItemStateChanged
        if (ignoreEvent) {
            return;
        }
        ListElement df = (ListElement) cmbMed.getSelectedItem();
        // Massnahme passend setzen.
        SYSTools.selectInComboBox(cmbMass, op.care.med.DBHandling.getMassID(df.getPk()));
        cmbMass.setEnabled(false);
        cbStellplan.setEnabled(false);
        cbStellplan.setSelected(false);
        cmbMed.setToolTipText(cmbMed.getSelectedItem().toString());
        lblVerordnung.setText(cmbMed.getSelectedItem().toString());
        dafid = df.getPk();
        // Bestand prüfen
        saveOK();
    }//GEN-LAST:event_cmbMedItemStateChanged

    private void cbPackEndeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPackEndeActionPerformed
        if (ignoreEvent) {
            return;
        }
        saveOK();
    }//GEN-LAST:event_cbPackEndeActionPerformed

    private void saveOK() {
        boolean ansetzungOK = jdcAN.getDate() != null && (cmbAN.getSelectedIndex() > 0 || cmbKHAn.getSelectedIndex() > 0);
        boolean absetzungOK = !cbAB.isSelected() || (jdcAB.getDate() != null && (cmbAB.getSelectedIndex() > 0 || cmbKHAb.getSelectedIndex() > 0));
        boolean medOK = cmbMed.getModel().getSize() == 0 || cmbMed.getSelectedItem() != null;
        boolean massOK = cmbMass.getSelectedItem() != null;
        boolean dosisVorhanden = tblDosis.getModel().getRowCount() > 0;
        btnSave.setEnabled(ansetzungOK && absetzungOK && medOK && massOK && dosisVorhanden);
        cbPackEnde.setEnabled(!beiBedarf && cmbMed.getModel().getSize() > 0);

        if (!btnSave.isEnabled()) {
            String ursache = "<html><body>Es fehlen noch Angaben, bevor Sie speichern können.<ul>";
            ursache += (ansetzungOK ? "" : "<li>Die Informationen zum <b>an</b>setzenden Arzt oder KH sind unvollständig.</li>");
            ursache += (absetzungOK ? "" : "<li>Die Informationen zum <b>ab</b>setzenden Arzt oder KH sind unvollständig.</li>");
            ursache += (medOK ? "" : "<li>Die Medikamentenangabe ist falsch.</li>");
            ursache += (massOK ? "" : "<li>Die Angaben über die Massnahmen sind falsch.</li>");
            ursache += (dosisVorhanden ? "" : "<li>Sie müssen mindestens eine Dosierung angegeben.</li>");
            ursache += "</ul></body></html>";
            btnSave.setToolTipText(ursache);
        } else {
            btnSave.setToolTipText(null);
        }

    }

    private void prepareTMPData() {
        if (this.editMode != NEW_MODE) {
            try {
                op.care.verordnung.DBHandling.copy2tmp(this.verid);
            } catch (SQLException ex) {
                new DlgException(ex);
            }
        }
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        pleaseDropTmp = false;
        save();
        syncBHP();
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    public void dispose() {
        jdcAB.removePropertyChangeListener(myPropertyChangeListener);
        jdcAN.removePropertyChangeListener(myPropertyChangeListener);
        jdcAB.cleanup();
        jdcAN.cleanup();
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void cmbSitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSitItemStateChanged
        if (ignoreEvent) {
            return;
        }
        saveOK();
        beiBedarf = cmbSit.getSelectedIndex() > -1;
    }//GEN-LAST:event_cmbSitItemStateChanged

    private void txtBemerkungCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtBemerkungCaretUpdate
        if (ignoreEvent) {
            return;
        }
        saveOK();
    }//GEN-LAST:event_txtBemerkungCaretUpdate

    private void txtSitCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSitCaretUpdate
        if (!txtSit.isEnabled() || ignoreEvent || ignoreSitCaret) {
            return;
        }
        if (txtSit.getText().equals("")) {
            cmbSit.setModel(new DefaultComboBoxModel());
            btnBedarf.setEnabled(false);
        } else {
            cmbSit.setModel(op.care.med.DBHandling.getSit(txtSit.getText()));
            btnBedarf.setEnabled(cmbSit.getModel().getSize() == 0);
        }
        beiBedarf = cmbSit.getSelectedIndex() > -1;
        saveOK();
    }//GEN-LAST:event_txtSitCaretUpdate

    private void save() {
        try {
            // Hier beginnt eine Transaktion
            OPDE.getDb().db.setAutoCommit(false);
            OPDE.getDb().db.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
            OPDE.getDb().db.commit();

            HashMap hm = new HashMap();
            hm.put("BWKennung", bwkennung);
            if (SYSCalendar.sameDay(jdcAN.getDate(), new Date()) == 0) {
                OPDE.getLogger().debug("jdcAN steht auf HEUTE");
                hm.put("AnDatum", "!NOW!");
            } else {
                OPDE.getLogger().debug("jdcAN steht nicht auf HEUTE");
                hm.put("AnDatum", jdcAN.getDate());
            }

            long abarztid;
            long abkhid;
            if (cbAB.isSelected()) {
                abarztid = ((ListElement) cmbAB.getSelectedItem()).getPk();
                abkhid = ((ListElement) cmbKHAb.getSelectedItem()).getPk();
                if (SYSCalendar.sameDay(jdcAB.getDate(), new Date()) == 0) {
                    OPDE.getLogger().debug("jdcAB steht auf HEUTE");
                    if (SYSCalendar.sameDay(jdcAB.getDate(), jdcAN.getDate()) == 0) {
                        OPDE.getLogger().debug("jdcAB und jdcAN sind gleich");
                        hm.put("AnDatum", new Timestamp(SYSCalendar.startOfDay()));
                        hm.put("AbDatum", new Timestamp(SYSCalendar.endOfDay()));
                    } else {
                        hm.put("AbDatum", "!NOW!");
                    }
                } else {
                    OPDE.getLogger().debug("jdcAB steht nicht auf HEUTE");
                    hm.put("AbDatum", new Timestamp(SYSCalendar.endOfDay(jdcAB.getDate())));
                }
                hm.put("AbUKennung", lblAB.getText());
            } else {
                //abdatum = new Date(SYSConst.BIS_AUF_WEITERES.getTimeInMillis());
                abarztid = 0l;
                abkhid = 0l;
                hm.put("AbDatum", "!BAW!");
            }

            hm.put("AnArztID", ((ListElement) cmbAN.getSelectedItem()).getPk());
            hm.put("AnKHID", ((ListElement) cmbKHAn.getSelectedItem()).getPk());
            hm.put("AbArztID", abarztid);
            hm.put("AbKHID", abkhid);
            hm.put("AnUKennung", lblAN.getText());
            hm.put("Stellplan", cbStellplan.isSelected());
            hm.put("BisPackEnde", cbPackEnde.isSelected());
            hm.put("Bemerkung", txtBemerkung.getText());
            hm.put("MassID", ((ListElement) cmbMass.getSelectedItem()).getPk());
            hm.put("DafID", dafid);
            long sitid = 0;
            if (cmbSit.getSelectedIndex() > -1) {
                sitid = ((ListElement) cmbSit.getSelectedItem()).getPk();
            }
            hm.put("SitID", sitid);

            // Sicherung
            if (editMode == NEW_MODE) { // =================== NEU ====================
                // Bei einer neuen Verordnung kann einfach eingetragen werden. Die BHP spielt hier keine Rolle.
                hm.put("VerKennung", OPDE.getDb().getUID("__verkenn"));
                verid = DBHandling.insertRecord("BHPVerordnung", hm);
                if (verid < 0) {
                    throw new SQLException();
                }
            } else if (editMode == EDIT_MODE) { // =================== KORREKTUR ====================
                // Bei einer Korrektur werden alle bisherigen Einträge aus der BHP zuerst wieder entfernt.
                if (!DBHandling.updateRecord("BHPVerordnung", hm, "VerID", verid)) {
                    throw new SQLException();
                }
                op.care.verordnung.DBHandling.deleteBHP(verid);
            } else if (editMode == CHANGE_MODE) { // =================== VERÄNDERUNG ====================
                // Bei einer Veränderung, wird erst die alte Verordnung durch den ANsetzenden Arzt ABgesetzt.
                // Dann werden die nicht mehr benötigten BHPs entfernt.
                // Dann wird die neue Verordnung angesetzt.
                hm.put("VerKennung", verkennung);
                if (!op.care.verordnung.DBHandling.absetzen(verid, ((ListElement) cmbAN.getSelectedItem()).getPk(), ((ListElement) cmbKHAn.getSelectedItem()).getPk())) {
                    throw new SQLException("Fehler beim Absetzen");
                }
                //op.care.verordnung.DBHandling.cleanBHP(verid, SYSCalendar.nowDB());
                hm.put("AnDatum", "!NOW+1!");
                verid = DBHandling.insertRecord("BHPVerordnung", hm);
            } else {
                throw new SQLException();
            }
            // Die bisher nur als TMP markierten Einträge werden in GÜLTIG geändert.
            op.care.verordnung.DBHandling.tmp2real(verid);

            OPDE.getDb().db.commit();
            OPDE.getDb().db.setAutoCommit(true);

        } catch (SQLException ex) {
            try {
                OPDE.getLogger().debug(ex.getMessage());
                OPDE.getDb().db.rollback();
            } catch (SQLException ex1) {
                new DlgException(ex1);
                ex1.printStackTrace();
                System.exit(1);
            }
            new DlgException(ex);
        }

        // Wenn bisher noch keine Dosierungen eingetragen wurden, dann fragt das System jetzt nach.
//        if (tblDosis.getModel().getRowCount() == 0){
//            DlgVerabreichung dlg = new DlgVerabreichung(parent, 0, verid, dafid, cmbSit.getSelectedIndex() >= 0);
//            dlg = null;
//            //reloadTable();
//        }
    }

    private void syncBHP() {
        // Wenn jetzt Dosierungen da sind, ein Medikament vorhanden ist und keine Bedarfsmedikation,
        // dann können wir auch direkt die BHP anpassen.
        if (tblDosis.getModel().getRowCount() > 0 && cmbSit.getSelectedIndex() < 0) {
            try {
                if (editMode == CHANGE_MODE) {
                    BHPImport.importBHP(verid, SYSCalendar.nowDB(), 0);
                } else {
                    BHPImport.importBHP(verid);
                }
            } catch (Exception e) {
                new DlgException(e);
            }
        }
    }

    private void tblDosisMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDosisMousePressed
        if (!evt.isPopupTrigger()) {
            return;
        }
//        if (formDirty){
//            JOptionPane.showMessageDialog(tblDosis, "Verordnung wurde geändert. Bitte zuerst speichern.");
//            return;
//        }
        if (abgesetzt && !SYSCalendar.isInFuture(jdcAB.getDate().getTime())) {
            JOptionPane.showMessageDialog(tblDosis, "Verordnung wurde bereits abgesetzt. Sie können diese nicht mehr ändern.");
            return;
        }
//        if (bhpVorhanden){
//            JOptionPane.showMessageDialog(tblDosis, "Verordnung ist schon in Betrieb. Sie können diese nicht mehr ändern.");
//            return;
//        }
        final TMDosis tm = (TMDosis) tblDosis.getModel();
        if (tm.getRowCount() == 0) {
            return;
        }
        Point p = evt.getPoint();
        //final int col = tblDosis.columnAtPoint(p);
        final int row = tblDosis.rowAtPoint(p);
        ListSelectionModel lsm = tblDosis.getSelectionModel();
        lsm.setSelectionInterval(row, row);
        final long bhppid = ((Long) tm.getValueAt(row, TMDosis.COL_BHPPID)).longValue();

        // Menüeinträge
        SYSTools.unregisterListeners(menu);
        menu = new JPopupMenu();

        JMenuItem itemPopupNew = new JMenuItem("Neue Dosis eingeben");
        itemPopupNew.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //Date ldatum = null;
                DlgVerabreichung dlg = new DlgVerabreichung(parent, 0, verid, dafid, cmbSit.getSelectedIndex() >= 0);
                dlg = null;
                pleaseDropTmp = true;
                reloadTable();
            }
        });
        menu.add(itemPopupNew);
        // Bei Bedarfsmedikation kann immer nur eine Dosis eingegeben werden.
        itemPopupNew.setEnabled(!beiBedarf || tm.getRowCount() == 0);

        JMenuItem itemPopupEditText = new JMenuItem("Bearbeiten");
        itemPopupEditText.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DlgVerabreichung dlg = new DlgVerabreichung(parent, bhppid, verid, dafid, cmbSit.getSelectedIndex() >= 0);
                dlg = null;
                reloadTable();
            }
        });
        menu.add(itemPopupEditText);
        //ocs.setEnabled(classname, "itemPopupEditText", itemPopupEditText, status > 0 && changeable);

        //-----------------------------------------
        JMenuItem itemPopupDelete = new JMenuItem("löschen");
        itemPopupDelete.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBHandling.deleteRecords("BHPPlanung", "BHPPID", bhppid);
                reloadTable();
            }
        });
        menu.add(itemPopupDelete);
        //ocs.setEnabled(classname, "itemPopupEditVer", itemPopupEditVer, true);
        menu.show(evt.getComponent(), (int) p.getX(), (int) p.getY());

    }//GEN-LAST:event_tblDosisMousePressed

    private void jspDosisComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspDosisComponentResized
    }//GEN-LAST:event_jspDosisComponentResized

    private void txtMedCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtMedCaretUpdate
        if (ignoreEvent) {
            return;
        }
        if (!txtMed.isEnabled() || ignoreEvent) {
            return;
        }
        if (txtMed.getText().equals("")) {
            cmbMed.setModel(new DefaultComboBoxModel());
            dafid = 0;
            cmbMass.setEnabled(true);
            cbStellplan.setEnabled(true);
            cbStellplan.setSelected(false);
            lblVerordnung.setText(" ");
            cmbMed.setToolTipText("");
            ignoreEvent = true;
            cbPackEnde.setSelected(false);
            ignoreEvent = false;
            cbPackEnde.setEnabled(false);
        } else {
            if (txtMed.getText().matches("^ß?\\d{7}")) { // Hier sucht man nach einer PZN. Im Barcode ist das führende 'ß' enthalten.
                String pzn = txtMed.getText();
                pzn = (pzn.startsWith("ß") ? pzn.substring(1) : pzn);
                HashMap pznsuche = op.tools.DBRetrieve.getSingleRecord("MPackung", "PZN", pzn);
                if (pznsuche != null) {
                    long d = ((BigInteger) pznsuche.get("DafID")).longValue();
                    //long mpid = ((BigInteger) pznsuche.get("MPID")).longValue();
                    cmbMed.setModel(op.care.med.DBHandling.getMedis(d));
                }
            } else { // Falls die Suche NICHT nur aus Zahlen besteht, dann nach Namen suchen.
                cmbMed.setModel(op.care.med.DBHandling.getMedis(txtMed.getText()));
            }

            if (cmbMed.getModel().getSize() > 0) {
                cmbMedItemStateChanged(null);
            } else {
                lblVerordnung.setText(" ");
                cmbMed.setToolTipText("");
                cmbMass.setSelectedIndex(-1);
                cmbMass.setEnabled(true);
                cbStellplan.setEnabled(true);
                cbStellplan.setSelected(false);
                ignoreEvent = true;
                cbPackEnde.setSelected(false);
                ignoreEvent = false;
            }
            cbPackEnde.setEnabled(!beiBedarf && cmbMed.getModel().getSize() > 0);
        }
    }//GEN-LAST:event_txtMedCaretUpdate

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        try {
            op.care.verordnung.DBHandling.dropTmp();
            pleaseDropTmp = false;
        } catch (SQLException ex) {
            new DlgException(ex);
        }
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void cmbANItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbANItemStateChanged
        if (ignoreEvent) {
            return;
        }
        ((JComboBox) evt.getSource()).setToolTipText(((JComboBox) evt.getSource()).getSelectedItem().toString());
        saveOK();
    }//GEN-LAST:event_cmbANItemStateChanged

    private void cbABActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbABActionPerformed
        if (ignoreEvent) {
            return;
        }
        jdcAB.setEnabled(cbAB.isSelected());
        cmbAB.setEnabled(cbAB.isSelected());
        cmbKHAb.setEnabled(cbAB.isSelected());
        cmbAB.setSelectedIndex(0);
        cmbKHAb.setSelectedIndex(0);
        jdcAB.setDate(SYSCalendar.today_date());
        jdcAB.setMinSelectableDate(jdcAN.getDate());
        lblAB.setText(cbAB.isSelected() ? OPDE.getLogin().getUser().getUKennung() : "");
        saveOK();
    }//GEN-LAST:event_cbABActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (pleaseDropTmp) {
            try {
                op.care.verordnung.DBHandling.dropTmp();
            } catch (SQLException ex) {
                new DlgException(ex);
            }
        }
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void fillÄrzte() {
        ResultSet rs1 = DBRetrieve.getResultSet("Arzt", new String[]{"ArztID", "Name", "Vorname", "Ort"}, new String[]{"Name", "Vorname"});
        cmbAN.setModel(SYSTools.rs2cmb(rs1, true));
        cmbAB.setModel(SYSTools.rs2cmb(rs1, true));
        cmbAN.setSelectedIndex(0);
        cmbAB.setSelectedIndex(0);
        ResultSet rs2 = DBRetrieve.getResultSet("KH", new String[]{"KHID", "Name", "Ort"}, new String[]{"Name"});
        cmbKHAn.setModel(SYSTools.rs2cmb(rs2, true));
        cmbKHAb.setModel(SYSTools.rs2cmb(rs2, true));
    }

    private void reloadTable() {
        String zubereitung = "x";
        if (dafid > 0) {
            zubereitung = op.care.med.DBHandling.getAnwEinheit(dafid);
        }

        tblDosis.setModel(new TMDosis(zubereitung));
        tblDosis.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspDosis.dispatchEvent(new ComponentEvent(jspDosis, ComponentEvent.COMPONENT_RESIZED));
        tblDosis.getColumnModel().getColumn(TMDosis.COL_Dosis).setCellRenderer(new RNDHTML());
        tblDosis.getColumnModel().getColumn(TMDosis.COL_Dosis).setHeaderValue("Anwendung");
        //tblDosis.getColumnModel().getColumn(1).setCellRenderer(new RNDStandard());

        if (tblDosis.getModel().getRowCount() > 0) { // Sobald etwas in der Tabelle steht, darf man die Situation nicht mehr verändern.
            txtSit.setEnabled(false);
            txtSit.setText("");
        } else {
            txtSit.setEnabled(true);
        }
        saveOK();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMedikament;
    private javax.swing.JButton btnBedarf;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnMed;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox cbAB;
    private javax.swing.JCheckBox cbPackEnde;
    private javax.swing.JCheckBox cbStellplan;
    private javax.swing.JComboBox cmbAB;
    private javax.swing.JComboBox cmbAN;
    private javax.swing.JComboBox cmbKHAb;
    private javax.swing.JComboBox cmbKHAn;
    private javax.swing.JComboBox cmbMass;
    private javax.swing.JComboBox cmbMed;
    private javax.swing.JComboBox cmbSit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private com.toedter.calendar.JDateChooser jdcAB;
    private com.toedter.calendar.JDateChooser jdcAN;
    private javax.swing.JScrollPane jspDosis;
    private javax.swing.JLabel lblAB;
    private javax.swing.JLabel lblAN;
    private javax.swing.JLabel lblBW;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVerordnung;
    private javax.swing.JTable tblDosis;
    private javax.swing.JTextPane txtBemerkung;
    private javax.swing.JTextField txtMed;
    private javax.swing.JTextField txtSit;
    // End of variables declaration//GEN-END:variables
//    class HandleSelections implements ListSelectionListener {
//        public void valueChanged(ListSelectionEvent lse) {
//            // Erst reagieren wenn der Auswahl-Vorgang abgeschlossen ist.
//            TableModel tm = tblDosis.getModel();
//            if (tm.getRowCount() <= 0) {
//                return;
//            }
//
//            if (!lse.getValueIsAdjusting()){
//                DefaultListSelectionModel lsm = (DefaultListSelectionModel) lse.getSource();
//
//                if (lsm.isSelectionEmpty()) {
//                    currentVerID = 0;
//                } else {
//                    currentVerID = ((Long) tm.getValueAt(lsm.getLeadSelectionIndex(), TMVerordnung.COL_VERID)).longValue();
//                }
//            }
//        }
//    }
}

/*
 * OffenePflege
 * Copyright (C) 2006-2012 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */

package op.care.supervisor;

import com.toedter.calendar.JDateChooser;
import entity.HomesTools;
import entity.files.SYSFilesTools;
import entity.info.ResInfoTools;
import entity.info.Resident;
import entity.info.ResidentTools;
import entity.reports.NReportTools;
import op.OPDE;
import op.tools.*;
import org.joda.time.DateMidnight;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class PnlSchichtleitung extends CleanablePanel {
    private javax.swing.JFrame parent;
    private boolean initPhase;

    /**
     * Creates new form PnlSchichtleitung
     */
    public PnlSchichtleitung(javax.swing.JFrame parent) {
        this.parent = parent;
        initPhase = true;
        initComponents();
        initDialog();
        initPhase = false;
    }

    public void initDialog() {

        HomesTools.setComboBox(cmbEinrichtung);

        // Stationsauswahl auf die richtige Station setzen, wenn vorhanden.
//        String station = OPDE.getProps().getProperty("station");
//        if (station != null && !station.equals("")){
//            SYSTools.selectInComboBox(cmbEinrichtung, DBRetrieve.getEinrichtung2Station(station));
//        }
        cmbSchicht.setSelectedIndex(SYSCalendar.ermittleSchicht() + 1);
        jdcDatum.setDate(SYSCalendar.today_date());
        txtHTML.setContentType("text/html");
        reloadDisplay();
    }

    @Override
    public void reload() {
        reloadDisplay();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jToolBar1 = new JToolBar();
        btnPrint = new JButton();
        jdcDatum = new JDateChooser();
        cmbEinrichtung = new JComboBox();
        cmbSchicht = new JComboBox();
        jspHTML = new JScrollPane();
        txtHTML = new JTextPane();
        btnReload = new JButton();
        jSeparator1 = new JSeparator();

        //======== this ========

        //======== jToolBar1 ========
        {
            jToolBar1.setFloatable(false);

            //---- btnPrint ----
            btnPrint.setIcon(new ImageIcon(getClass().getResource("/artwork/22x22/printer.png")));
            btnPrint.setText("Drucken");
            btnPrint.setEnabled(false);
            btnPrint.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnPrintActionPerformed(e);
                }
            });
            jToolBar1.add(btnPrint);
        }

        //---- jdcDatum ----
        jdcDatum.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                jdcDatumPropertyChange(e);
            }
        });

        //---- cmbEinrichtung ----
        cmbEinrichtung.setModel(new DefaultComboBoxModel(new String[]{
                "Item 1",
                "Item 2",
                "Item 3",
                "Item 4"
        }));
        cmbEinrichtung.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                cmbEinrichtungItemStateChanged(e);
            }
        });

        //---- cmbSchicht ----
        cmbSchicht.setModel(new DefaultComboBoxModel(new String[]{
                "Alles",
                "Nacht, morgens",
                "Fr\u00fch",
                "Sp\u00e4t",
                "Nacht, abends"
        }));
        cmbSchicht.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                cmbSchichtItemStateChanged(e);
            }
        });

        //======== jspHTML ========
        {
            jspHTML.setViewportView(txtHTML);
        }

        //---- btnReload ----
        btnReload.setBackground(Color.white);
        btnReload.setIcon(new ImageIcon(getClass().getResource("/artwork/16x16/reload.png")));
        btnReload.setBorderPainted(false);

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jdcDatum, GroupLayout.PREFERRED_SIZE, 219, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbEinrichtung, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSchicht, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReload, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(560, Short.MAX_VALUE))
                        .addComponent(jToolBar1, GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jspHTML, GroupLayout.DEFAULT_SIZE, 1183, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                .addComponent(cmbEinrichtung, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cmbSchicht, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnReload))
                                        .addComponent(jdcDatum, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jspHTML, GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
            // Create temp file.
            File temp = File.createTempFile("supervisor", ".html");

            // Delete temp file when program exits.
            temp.deleteOnExit();

            // Write to temp file
            BufferedWriter out = new BufferedWriter(new FileWriter(temp));
            out.write(txtHTML.getText());
            out.close();
            SYSFilesTools.handleFile(temp, Desktop.Action.OPEN);
        } catch (IOException e) {
//            new DlgException(e);
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cmbSchichtItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSchichtItemStateChanged
        if (initPhase) return;
        reloadDisplay();
    }//GEN-LAST:event_cmbSchichtItemStateChanged

    private void cmbEinrichtungItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEinrichtungItemStateChanged
        if (initPhase) return;
        reloadDisplay();
    }//GEN-LAST:event_cmbEinrichtungItemStateChanged

    private void jdcDatumPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcDatumPropertyChange
        if (initPhase) return;
        if (!evt.getPropertyName().equals("date")) return;
        SYSCalendar.checkJDC((JDateChooser) evt.getSource());
        reloadDisplay();
    }//GEN-LAST:event_jdcDatumPropertyChange

    @Override
    public void cleanup() {
        SYSTools.unregisterListeners(this);
    }

    private String getAuswertung() {
        ListElement le = (ListElement) cmbEinrichtung.getSelectedItem();
        String sSchicht;
        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        int schicht = cmbSchicht.getSelectedIndex() - 1;
        if (schicht != SYSConst.ZEIT_ALLES) {
            sSchicht = SYSConst.ZEIT[schicht + 1];
        } else {
            sSchicht = "Alles";
        }
        String s = "<html><body>";
        s += "<h1>Auswertung für die Schichtleitung: " + sdf.format(jdcDatum.getDate()) + ", Schicht: " + sSchicht + "</h1>";
//        s += DBHandling.leereBHPs(schicht, jdcDatum.getDate(), le.getData());
//        s += DBHandling.keineTBs(jdcDatum.getDate(), le.getData());
//        s += DBHandling.geringeVorraete(le.getData());
        s += "</body></html>";
        return s;
    }

    private void reloadDisplay() {
        txtHTML.setText(getAuswertung());
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JToolBar jToolBar1;
    private JButton btnPrint;
    private JDateChooser jdcDatum;
    private JComboBox cmbEinrichtung;
    private JComboBox cmbSchicht;
    private JScrollPane jspHTML;
    private JTextPane txtHTML;
    private JButton btnReload;
    private JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

}

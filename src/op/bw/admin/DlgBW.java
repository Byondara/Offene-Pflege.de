/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */

package op.bw.admin;

import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import com.toedter.calendar.*;
import op.OPDE;
import op.tools.*;

import javax.swing.*;
import java.beans.PropertyChangeListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class DlgBW extends javax.swing.JDialog {
    private String bwkennung;
    private int dlgMode; // Enthält die Angabe, in welchem Zustand sich der Dialog befindet.
    public static final int MODE_EDIT = 0; // Ein bestehender BW wird korrigiert (UPDATE)
    public static final int MODE_NEW = 1; // Ein neuer BW wird erstmalig eingegeben. (INSERT)
    private PropertyChangeListener pcl;

    /**
     * Creates new form frmBWNeu
     */
    public DlgBW(java.awt.Frame parent, int mode, String bwkennung) {
        super(parent, true);
        initComponents();
        this.dlgMode = mode;
        this.bwkennung = bwkennung;

        pcl = new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("value")) {
                    SYSCalendar.checkJDC(jdcGebDatum);
                }
            }
        };

        jdcGebDatum.getDateEditor().addPropertyChangeListener(pcl);

        if (dlgMode == MODE_NEW) {
            lblText.setText("Neue(n) BewohnerIn anlegen");
            txtName.setText("");
            txtVorname.setText("");
            jdcGebDatum.setDate(new Date());

            rbMann.setSelected(true);
            btnSave.setEnabled(false);

        } else {
            ResultSet rs = DBRetrieve.getResultSet("Bewohner", new String[]{"Nachname", "Vorname", "Geschlecht", "GebDatum"}, "BWKennung", bwkennung, "=");
            lblText.setText("BewohnerIn Grunddaten bearbeiten");
            try {
                rs.first(); // #0000044
                txtName.setText(rs.getString("Nachname"));
                txtVorname.setText(rs.getString("Vorname"));
                rbMann.setSelected(rs.getInt("Geschlecht") == 1);
                rbFrau.setSelected(rs.getInt("Geschlecht") == 2);
                jdcGebDatum.setDate(rs.getDate("GebDatum"));
            } catch (SQLException ex) {
                new DlgException(ex);
            }
        }
        this.setTitle(SYSTools.getWindowTitle(""));

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblText = new JLabel();
        jSeparator1 = new JSeparator();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jdcGebDatum = new JDateChooser();
        txtName = new JTextField();
        txtVorname = new JTextField();
        rbMann = new JRadioButton();
        rbFrau = new JRadioButton();
        btnDiscard = new JButton();
        btnSave = new JButton();
        jSeparator2 = new JSeparator();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        Container contentPane = getContentPane();

        //---- lblText ----
        lblText.setFont(new Font("Dialog", Font.BOLD, 18));
        lblText.setText("Neue(n) BewohnerIn anlegen");

        //---- jLabel2 ----
        jLabel2.setText("Name:");

        //---- jLabel3 ----
        jLabel3.setText("Vorname:");

        //---- jLabel4 ----
        jLabel4.setText("Geburtsdatum:");

        //---- jLabel5 ----
        jLabel5.setText("Geschlecht:");

        //---- txtName ----
        txtName.setText("jTextField1");
        txtName.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                txtNameCaretUpdate(e);
            }
        });

        //---- txtVorname ----
        txtVorname.setText("jTextField2");
        txtVorname.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                txtVornameCaretUpdate(e);
            }
        });

        //---- rbMann ----
        rbMann.setText("m\u00e4nnlich");
        rbMann.setBorder(BorderFactory.createEmptyBorder());
        rbMann.setMargin(new Insets(0, 0, 0, 0));

        //---- rbFrau ----
        rbFrau.setText("weiblich");
        rbFrau.setBorder(BorderFactory.createEmptyBorder());
        rbFrau.setMargin(new Insets(0, 0, 0, 0));

        //---- btnDiscard ----
        btnDiscard.setText("Verwerfen");
        btnDiscard.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnDiscardActionPerformed(e);
            }
        });

        //---- btnSave ----
        btnSave.setText("Speichern");
        btnSave.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnSaveActionPerformed(e);
            }
        });

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jSeparator2, GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                        .addComponent(lblText)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(rbMann)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rbFrau))
                                .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtVorname)
                                    .addComponent(jdcGebDatum, GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                                    .addComponent(txtName, GroupLayout.PREFERRED_SIZE, 196, GroupLayout.PREFERRED_SIZE))))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addComponent(btnSave)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDiscard)))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblText)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtVorname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jLabel4)
                        .addComponent(jdcGebDatum, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGap(14, 14, 14)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(rbMann)
                        .addComponent(rbFrau))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDiscard)
                        .addComponent(btnSave))
                    .addContainerGap())
        );
        setSize(328, 255);
        setLocationRelativeTo(null);

        //---- buttonGroup1 ----
        ButtonGroup buttonGroup1 = new ButtonGroup();
        buttonGroup1.add(rbMann);
        buttonGroup1.add(rbFrau);
    }// </editor-fold>//GEN-END:initComponents

    public String showDialog() {
        this.setVisible(true);
        return this.bwkennung;
    }

    public void dispose() {
        jdcGebDatum.removePropertyChangeListener(pcl);
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (dlgMode == MODE_NEW) {
            PreparedStatement qStmt;

            String s = "SELECT Nachname, Vorname, GebDatum FROM Bewohner WHERE Nachname like ? ORDER BY Nachname, Vorname";
            String muster = "%" + txtName.getText() + "%";
            try {
                qStmt = OPDE.getDb().db.prepareStatement(s);
                qStmt.setString(1, muster);
                ResultSet rs = qStmt.executeQuery();
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

                if (rs.first()) { // Es gibt schon ähnliche Bewohnernamen. Nur Speichern, wenn wirklich gewünscht.
                    rs.beforeFirst();
                    DefaultListModel dlm = new DefaultListModel();
                    while (rs.next()) {
                        dlm.addElement(rs.getString("Nachname") + ", " + rs.getString("Vorname") + " (*" + sdf.format(rs.getDate("GebDatum")) + ")");
                    }
                    DlgBewVorhanden dlg = new DlgBewVorhanden(new java.awt.Frame(), dlm);
                    if (dlg.isOK()) {
                        this.bwkennung = insert();
                    }
                } else {
                    this.bwkennung = insert(); // Es gab keine ähnlichen. Wir können direkt speichern.
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            HashMap hm = new HashMap();
            hm.put("Nachname", txtName.getText());
            hm.put("Vorname", txtVorname.getText());
            hm.put("GebDatum", jdcGebDatum.getDate());
            hm.put("Geschlecht", (rbMann.isSelected() ? 1 : 2));
            DBHandling.updateRecord("Bewohner", hm, "BWKennung", bwkennung);
        }
        dispose();
    }//GEN-LAST:event_btnSaveActionPerformed


    private void txtVornameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtVornameCaretUpdate
        btnSave.setEnabled(txtName.getText().length() > 0 & txtVorname.getText().length() > 0);
    }//GEN-LAST:event_txtVornameCaretUpdate

    private String insert() {
        String prefix = txtName.getText().substring(0, 1) + txtVorname.getText().substring(0, 1);
        prefix = prefix.toUpperCase();
        Long suffix = new Long(OPDE.getDb().getUID(prefix));
        String bwkennung = prefix + suffix.toString();
        int geschlecht = (rbMann.isSelected() ? 1 : 2);

        // Daten in der Tabelle Bewohner
        String preparedQuery = "INSERT INTO Bewohner (Nachname, Vorname, Geschlecht, GebDatum, BWKennung) VALUES (?, ?, ?, ?, ?)";
        try {
            PreparedStatement iStmt = OPDE.getDb().db.prepareStatement(preparedQuery);
            iStmt.setString(1, txtName.getText().trim());
            iStmt.setString(2, txtVorname.getText().trim());
            iStmt.setInt(3, geschlecht);
            iStmt.setDate(4, new java.sql.Date(jdcGebDatum.getDate().getTime()));
            iStmt.setString(5, bwkennung);
            iStmt.executeUpdate();
        } catch (SQLException ex) {
            new DlgException(ex);
        }

        JOptionPane.showMessageDialog(this, "Es wurde ein(e) neue(r) BewohnerIn angelegt. Seine/ihre Kennung lautet: " + bwkennung);
        return bwkennung;
    }

    private void btnDiscardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscardActionPerformed
        this.bwkennung = null;
        dispose();
    }//GEN-LAST:event_btnDiscardActionPerformed

    private void txtNameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtNameCaretUpdate
        btnSave.setEnabled(txtName.getText().length() > 0 & txtVorname.getText().length() > 0);
    }//GEN-LAST:event_txtNameCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel lblText;
    private JSeparator jSeparator1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JDateChooser jdcGebDatum;
    private JTextField txtName;
    private JTextField txtVorname;
    private JRadioButton rbMann;
    private JRadioButton rbFrau;
    private JButton btnDiscard;
    private JButton btnSave;
    private JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

}

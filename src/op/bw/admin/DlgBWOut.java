/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.bw.admin;

import com.sun.xml.internal.bind.v2.TODO;
import entity.vorgang.VorgaengeTools;
import op.OPDE;
import op.tools.*;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;

/**
 * @author tloehr
 */
public class DlgBWOut extends javax.swing.JDialog {

    private String xml;
    private long bwinfoid;
    private String bwkennung;

    /**
     * Creates new form DlgBWOut
     */
    public DlgBWOut(java.awt.Frame parent, Date minDate, long bwinfoid) {
        super(parent, true);
        initComponents();
        this.bwinfoid = bwinfoid;
        bwkennung = (String) DBRetrieve.getSingleValue("BWInfo", "BWKennung", "BWINFOID", bwinfoid);
        jdcDate.setMinSelectableDate(minDate);
        //jdcDate.setMaxSelectableDate(SYSCalendar.today_date());
        jdcDate.setDate(SYSCalendar.today_date());
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        bgGrund = new javax.swing.ButtonGroup();
        lblDaten = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        rbDead = new javax.swing.JRadioButton();
        rbGone = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jdcDate = new com.toedter.calendar.JDateChooser();
        jSeparator2 = new javax.swing.JSeparator();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        lblDaten.setFont(new java.awt.Font("Dialog", 1, 18));
        lblDaten.setText("BewohnerIn verlässt die Einrichtung");

        bgGrund.add(rbDead);
        rbDead.setText("Der/die BewohnerIn ist verstorben.");
        rbDead.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbDead.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rbDead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDeadActionPerformed(evt);
            }
        });

        bgGrund.add(rbGone);
        rbGone.setText("Der/die BewohnerIn ist ausgezogen.");
        rbGone.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbGone.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rbGone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGoneActionPerformed(evt);
            }
        });

        jLabel1.setText("Datum:");

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/cancel.png"))); // NOI18N
        btnCancel.setText("Abbrechen");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/apply.png"))); // NOI18N
        btnOK.setText("Ok");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblDaten, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                        .addComponent(rbDead)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jdcDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addComponent(rbGone, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnOK)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCancel)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblDaten)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbDead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbGone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel1)
                                        .addComponent(jdcDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCancel)
                                        .addComponent(btnOK))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width - 407) / 2, (screenSize.height - 213) / 2, 407, 213);
    }// </editor-fold>                        

    private void rbGoneActionPerformed(java.awt.event.ActionEvent evt) {
        xml = "<hauf value=\"ausgezogen\"/>";
        btnOK.setEnabled(true);
    }

    private void rbDeadActionPerformed(java.awt.event.ActionEvent evt) {
        xml = "<hauf value=\"verstorben\"/>";
        btnOK.setEnabled(true);
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {
        if (!SYSCalendar.isJDCValid(jdcDate)) {
            JOptionPane.showMessageDialog(this, "Das eingegebene Datum ist ungültig.", "Auszug nicht möglich", JOptionPane.INFORMATION_MESSAGE);
        } else {

            Connection db = OPDE.getDb().db;
            boolean doCommit = false;
            try {
                if (db.getAutoCommit()) {
                    db.setAutoCommit(false);
                    db.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);
                    db.commit();
                    doCommit = true;
                }

                HashMap hm = new HashMap();
                hm.put("Bis", jdcDate.getDate());
                //hm.put("_mdate", new Timestamp(SYSCalendar.now()));
                hm.put("AbUKennung", OPDE.getLogin().getUser().getUKennung());
                hm.put("XML", xml);

                if (!DBHandling.updateRecord("BWInfo", hm, "BWINFOID", bwinfoid)) {
                    throw new SQLException("BWInfo");
                }
                hm.clear();

                stopMiscProcesses();

                if (doCommit) {
                    db.commit();
                    db.setAutoCommit(true);
                }

            } catch (SQLException ex) {
                try {
                    if (doCommit) {
                        db.rollback();
                    }
                } catch (SQLException ex1) {
                    new DlgException(ex1);
                    ex1.printStackTrace();
                    System.exit(1);
                }
                new DlgException(ex);
            }
            dispose();
        }
    }

    public void dispose() {
        jdcDate.cleanup();
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    /**
     * Diese Methode beendet verschiedene laufende Prozesse
     * <ul>
     * <li>Pflegeplanungen und in der Folge davon DFNs</li>
     * <li>Verordnungen. Alle Verordnungen werden mit Auszugsdatum abgesetzt.</li>
     * <li>Vorräte. Alle Vorräte werden abgeschlossen.</li>
     * <li>Alle Bewohnerinformationen werden abgeschlossen. </li>
     * <li>Alle Vorgänge werden abgeschlossen. </li>
     * </ul>
     */
    private void stopMiscProcesses() throws SQLException {

        String sql = "UPDATE Planung SET Bis=now(), AbUKennung=? WHERE BWKennung=? AND BIS > now()";
        PreparedStatement stmt = OPDE.getDb().db.prepareStatement(sql);
        // ProblemID: 0000005
        stmt.setString(1, OPDE.getLogin().getUser().getUKennung());
        stmt.setString(2, bwkennung);
        stmt.executeUpdate();

        String sql1 = "UPDATE BHPVerordnung SET AbDatum=now(), AbArztID=AnArztID, AbUKennung=? WHERE BWKennung=? AND AbDatum > NOW()";
        PreparedStatement stmt1 = OPDE.getDb().db.prepareStatement(sql1);
        stmt1.setString(1, OPDE.getLogin().getUser().getUKennung());
        stmt1.setString(2, bwkennung);
        stmt1.executeUpdate();

        // Abwesenheiten korrekt beenden.
        String sql4 = "UPDATE BWInfo SET Bis=?, AbUKennung=?, XML=REPLACE(XML, '<abwe value=\"normal\"/>', '<abwe value=\"gegangen\"/>')" +
                " WHERE BWKennung=? AND BWINFTYP='abwe' AND Bis='9999-12-31 23:59:59'";
        PreparedStatement stmt4 = OPDE.getDb().db.prepareStatement(sql4);
        stmt4.setDate(1, new java.sql.Date(jdcDate.getDate().getTime()));
        stmt4.setString(2, OPDE.getLogin().getUser().getUKennung());
        stmt4.setString(3, bwkennung);
        stmt4.executeUpdate();

        String sql3 = "UPDATE BWInfo SET Bis=?, AbUKennung=? WHERE BWKennung=? " + // AND (BWINFTYP='zimm' OR BWINFTYP = 'pstf')
                "AND Bis='9999-12-31 23:59:59'";
        PreparedStatement stmt3 = OPDE.getDb().db.prepareStatement(sql3);
        stmt3.setDate(1, new java.sql.Date(jdcDate.getDate().getTime()));
        stmt3.setString(2, OPDE.getLogin().getUser().getUKennung());
        stmt3.setString(3, bwkennung);
        stmt3.executeUpdate();


        String sql5 = "SELECT v.VorID FROM MPVorrat v WHERE v.BWKennung=? AND v.Bis = '9999-12-31 23:59:59'";
        PreparedStatement stmt5 = OPDE.getDb().db.prepareStatement(sql5);
        stmt5.setString(1, bwkennung);
        ResultSet rs = stmt5.executeQuery();
        if (rs.first()) {
            rs.beforeFirst();
            while (rs.next()) {
                /*if (!op.care.med.DBHandling.closeVorrat(rs.getLong("VorID"))) {
                    throw new SQLException("closeVorrat");
                }*/
            }
        }
        rs.close();

        //TODO: das hier muss wieder rein
//        VorgaengeTools.endVorgang();
//        op.share.vorgang.DBHandling.endAllVorgaenge(bwkennung);

        // Das hier war draussen
//        String sql4 = "UPDATE BWInfo SET Bis=?, AbUKennung=?, XML=REPLACE(XML, '<abwe value=\"normal\"/>', '<abwe value=\"gegangen\"/>')" +
//                " WHERE BWKennung=? AND BWINFTYP='abwe' AND Bis='9999-12-31 23:59:59'";
//        PreparedStatement stmt4 = OPDE.getDb().db.prepareStatement(sql4);
//        stmt4.setDate(1, new java.sql.Date(jdcDate.getDate().getTime()));
//        stmt4.setString(2, OPDE.getLogin().getUser().getUKennung());
//        stmt4.setString(3, bwkennung);
//        stmt4.executeUpdate();
//
    }

    // Variables declaration - do not modify
    private javax.swing.ButtonGroup bgGrund;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private com.toedter.calendar.JDateChooser jdcDate;
    private javax.swing.JLabel lblDaten;
    private javax.swing.JRadioButton rbDead;
    private javax.swing.JRadioButton rbGone;
    // End of variables declaration                   
}

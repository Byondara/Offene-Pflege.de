/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 */
package op.tools;

import entity.SYSLoginTools;
import entity.SYSRunningClasses;
import entity.SYSRunningClassesTools;
import op.OPDE;

import javax.swing.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * @author __USER__
 */
public class DlgLogin extends javax.swing.JDialog {

    Thread thread = null;

    /**
     * Creates new form DlgLogin
     */
    public DlgLogin(java.awt.Frame parent, String preMessage) {
        super(parent, true);
        //Tools.center(this);
        OPDE.setLogin(null);
        try {
            if (OPDE.getDb() != null && !OPDE.getDb().db.isClosed()) {
                OPDE.getDb().db.close();
            }
        } catch (SQLException se) {
            System.out.println(se.getMessage());
        }

        initComponents();
        lblMessage.setText(SYSTools.catchNull(preMessage));
//        this.setLocation(500, 350);
//        this.requestFocus();

        txtUsername.requestFocus();

        String defaultlogin = "";

        String defaultpw = "";
        if (OPDE.getLocalProps().containsKey("defaultlogin")) {
            defaultlogin = OPDE.getLocalProps().getProperty("defaultlogin");
        }
        if (OPDE.getLocalProps().containsKey("defaultpw")) {
            defaultpw = OPDE.getLocalProps().getProperty("defaultpw");
        }
        txtUsername.setText(defaultlogin);
        txtPassword.setText(defaultpw);

        try {
            linkOPDE.setURI(new URI("http://www.offene-pflege.de"));
            linkOPDE.setText("Offene-Pflege.de");
        } catch (URISyntaxException ex) {
            new DlgException(ex);
        }

        SYSTools.centerOnParent(parent, this);
        if (OPDE.isAnimation()) {
            animateLogo();
        } else {
            btnAbout.setIcon(new ImageIcon(getClass().getResource("/artwork/animation/opde-52.png")));
        }
        setVisible(true);
    }

    private void animateLogo() {
        thread = new Thread() {

            public void run() {

                int maxIconsNum = 85;

                try {
                    int i = 0;
                    while (true) {
                        if (i == OPDE.getAnimationCache().size()) {
                            OPDE.getAnimationCache().add(new ImageIcon(getClass().getResource("/artwork/animation/opde-" + (i + 1) + ".png")));
                        }
                        btnAbout.setIcon(OPDE.getAnimationCache().get(i));

                        Thread.sleep(55);
                        if (i == maxIconsNum) {
                            i = 0;
                        } else {
                            i++;
                        }
                    }
                } catch (InterruptedException e) {
                }
            }
        };
        thread.start();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLogin = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblMessage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAbout = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        linkOPDE = new org.jdesktop.swingx.JXHyperlink();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Anmeldung");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnLogin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/apply.png"))); // NOI18N
        btnLogin.setText("Anmelden");
        btnLogin.setActionCommand("btnLogin");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoLogin(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Benutzername");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsernameFocusGained(evt);
            }
        });

        jLabel1.setText("Passwort");
        jLabel1.setPreferredSize(new java.awt.Dimension(4, 19));

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }
        });

        lblMessage.setForeground(new java.awt.Color(255, 0, 51));
        lblMessage.setText("jLabel3");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, lblMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                                        .add(jLabel2))
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                        .add(txtPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                                                        .add(txtUsername, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE))
                                                .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(txtUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel2))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(txtPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lblMessage)
                                .addContainerGap())
        );

        jPanel1Layout.linkSize(new java.awt.Component[]{jLabel1, jLabel2}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/animation/opde-58.png"))); // NOI18N
        btnAbout.setToolTipText("Über Offene-Pflege.de...");
        btnAbout.setOpaque(true);
        btnAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAboutActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 13));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("So viel Pflege wie möglich, so viel Technik wie nötig. ");

        linkOPDE.setText("Offene-Pflege.de");
        linkOPDE.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        linkOPDE.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(btnAbout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(linkOPDE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 314, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(8, 8, 8))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .add(btnAbout, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                                        .add(jPanel2Layout.createSequentialGroup()
                                                .add(25, 25, 25)
                                                .add(linkOPDE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jLabel4)))
                                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                                                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .add(btnLogin))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(btnLogin)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPasswordFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtPasswordFocusGained

    private void txtUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusGained
        ((JTextField) evt.getSource()).selectAll();
    }//GEN-LAST:event_txtUsernameFocusGained

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        btnLogin.doClick();
    }//GEN-LAST:event_txtPasswordActionPerformed

    public void dispose() {
        if (thread != null) {
            thread.interrupt();
        }
        SYSTools.unregisterListeners(this);
        super.dispose();
    }

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        txtPassword.requestFocus();
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void DoLogin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoLogin
        String username = txtUsername.getText().trim();
//            char[] password = txtPassword.getPassword();

        try {

            OPDE.initDB();

            // Hier wird erst geprüft, ob Username und Passwort stimmen.
            registerLogin();
            if (OPDE.getLogin() == null) {
                JOptionPane.showMessageDialog(this, "Benutzername oder Passwort falsch.", "Anmeldefehler", JOptionPane.INFORMATION_MESSAGE);
                OPDE.info("Falsches Passwort eingegeben.");
            } else {
                //OPDE.getLogin().getUser().getUKennung() = OPDE.getLogin().getUser().getUKennung();
                //OPDE.UPW = password;


//                    // Letzte Abmeldung ermitteln.
//                    String sql1 = ""
//                            + " SELECT LPOL FROM OCLogin "
//                            + " WHERE UKennung = ? "
//                            + " ORDER BY OCLOGINID DESC "
//                            + " LIMIT 0,1";
//                    PreparedStatement stmt1 = OPDE.getDb().db.prepareStatement(sql1);
//                    stmt1.setString(1, OPDE.getLogin().getUser().getUKennung());
//                    ResultSet rs = stmt1.executeQuery();
//                    if (rs.first()) {
//                        OPDE.lastlogout = rs.getTimestamp("LPOL").getTime();
//                    } else {
//                        OPDE.lastlogout = 0l;
//                    }

//                    PreparedStatement stmt;
//                    String s = "UPDATE Users SET LastLogin = now() WHERE UKennung=?";
//                    stmt = OPDE.getDb().db.prepareStatement(s);
//                    stmt.setString(1, username);

//                    HashMap hm = new HashMap();
//                    hm.put("UKennung", new Object[]{username,"="});
//                    hm.put("GKennung", new Object[]{"admin","="});
//                    BigInteger bi = (BigInteger) DBRetrieve.getSingleValue("OCMember", "OCMID", hm);
//                    OPDE.setAdmin(bi != null);
                //OPDE.setGroups(DBHandling.getGroups(username));
                OPDE.newOCSec();

//                    // Gruppeninfo lesen und in ocgroups schreiben.
//                    s = "SELECT Gruppe FROM oc.OCGroups WHERE UKennung = ?";
//                    PreparedStatement stmt1 = OPDE.getDb().db.prepareStatement(s);
//                    stmt1.setString(1, username);
//                    ResultSet rs = stmt1.executeQuery();
//                    OPDE.ocgroups = new Properties();
//                    while (rs.next()) {
//                        OPDE.ocgroups.put(rs.getString("Gruppe"), "true");
//                    }


                OPDE.initProps();

                OPDE.info("Anmeldung erfolgt: UKennung: " + username);
                OPDE.info("LoginID: " + OPDE.getLogin().getUser().getUKennung());


//                SYSRunningClasses sr = SYSRunningClassesTools.startModule("nursingrecords.bhp", null, SYSRunningClassesTools.STATUS_RW);
//
//                OPDE.debug(SYSRunningClassesTools.getRunning("9823bw", SYSRunningClassesTools.STATUS_DONT_CARE, new String[]{"nursingrecords.prescription", "nursingrecords.bhp", "nursingrecords.bhpimport"}));
//                OPDE.debug(SYSRunningClassesTools.getRunning(null, SYSRunningClassesTools.STATUS_DONT_CARE, new String[]{"nursingrecords.prescription", "nursingrecords.bhp", "nursingrecords.bhpimport"}));
//
//                SYSRunningClassesTools.moduleEnded(sr);




                dispose();
            }

        } catch (SQLException se) {
////                if (se.getErrorCode() == com.mysql.jdbc.MysqlErrorNumbers.ER_ACCESS_DENIED_ERROR) {
////                    JOptionPane.showMessageDialog(this, "Benutzername oder Passwort falsch.", "Anmeldefehler", JOptionPane.INFORMATION_MESSAGE);
////                    OPDE.info("Falsches Passwort eingegeben.");
////                } else {
////                    new DlgException(se);
////                    System.exit(se.getErrorCode());
////                }
//
//                new DlgException(se);
            OPDE.fatal(se);
            System.exit(se.getErrorCode());
        }
    }//GEN-LAST:event_DoLogin

    private void btnAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAboutActionPerformed
        new DlgHTML(this);
    }//GEN-LAST:event_btnAboutActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        OPDE.getPoL().interrupt();

        // Host als "heruntergefahren" deklarieren.
        OPDE.getEM().getTransaction().begin();
        OPDE.getHost().setLpol(null);
        OPDE.getEM().merge(OPDE.getHost());
        OPDE.getEM().getTransaction().commit();

        OPDE.getEM().close();

    }//GEN-LAST:event_formWindowClosing

    /**
     * Trägt ein DlgLogin ein. Es werden alte, zerstörte DlgLogin Reste ebenfalls entfernt und zwar nach dem folgendem Muster:
     * <p/>
     * <li>	Es wird nach DlgLogin Einträgen gesucht, bei denen LOGOUT auf BAW steht. Das bedeutet, dass sie bei der letzten Anmeldung nicht ordnungsgemäß
     * abgeschlossen wurden. Bei diesen Records wird Logout auf LPOL gesetzt. Was ja auch halbwegs der Wahrheit entspricht. Die Sitzung war beendet
     * als die Station abstürzte und das wiederum war kurz nach dem letzten Lebenszeichen.</li>
     * <p/>
     * <li> Alle WorkingOn Einträge dieser (kaputten) LoginID werden auf LPOL gesetzt. Liegt LPOL allerdings weniger als <b>2 Minuten zurück</b>, dann wird
     * der Eintrag verweigert. Dann läuft wohl noch eine andere Sitzung.</li>
     *
     * @return true, wenn die Anmeldung erlaubt ist, false, wenn man noch warten muss.
     */
    private void registerLogin() {
        //long loginid;
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword());

        OPDE.setLogin(SYSLoginTools.login(username, password));

        try {


            // Gibt es noch laufende Sitzungen, die sich innerhalb der vergangenen 2 Minuten als
            // lebendig gemeldet haben ?
//            String sqlRunningSessions = "SELECT OCLoginID FROM OCLogin "
//                    + "WHERE UKennung=? AND IP=? AND Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 2 MINUTE) > now()";
//            PreparedStatement stmt = OPDE.getDb().db.prepareStatement(sqlRunningSessions);
//            stmt.setString(1, username);
//            stmt.setString(2, OPDE.getProps().getProperty("ip"));
//            ResultSet rsRunningSessions = stmt.executeQuery();

//            if (!rsRunningSessions.first()) { // Die Luft ist rein.... Schnell anmelden ;-)
//                String sqlNewSession = "INSERT INTO OCLogin (UKennung, HOST, IP, Login, LPOL, Logout) VALUES (?, ?, ?, NOW(), NOW(), '9999-12-31 23:59:59')";
//                PreparedStatement stmtNewSession = OPDE.getDb().db.prepareStatement(sqlNewSession);
//                stmtNewSession.setString(1, username);
//                stmtNewSession.setString(2, OPDE.getLocalProps().getProperty("hostname"));
//                stmtNewSession.setString(3, OPDE.getLocalProps().getProperty("ip"));
//                stmtNewSession.executeUpdate();
//
//                loginid = OPDE.getDb().getLastInsertedID();

            // Aufräumen
            // Zuerst OCWorkingOn von alten Trümmer Einträgen befreien.
//                String sqlWOCleanupSession = "UPDATE OCWorkingOn SET Finish=NOW()  WHERE OCLoginID IN ( SELECT OCLoginID FROM OCLogin WHERE Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 3 MINUTE) <= now() )";
//                PreparedStatement stmtWOCleanupSession = OPDE.getDb().db.prepareStatement(sqlWOCleanupSession);
//                stmtWOCleanupSession.executeUpdate();
//
//                // OCMessages löschen, die von toten Logins stammen. Damit ein evtl. BHPImport nicht ewig darauf wartet.
//                String sqlMessageCleanupSession = "DELETE FROM OCMessage WHERE Receiver IN ( SELECT OCLoginID FROM OCLogin WHERE Logout='9999-12-31 23:59:59' AND DATE_ADD(LPOL,INTERVAL 3 MINUTE) <= now() )";
//                PreparedStatement stmtMessageCleanupSession = OPDE.getDb().db.prepareStatement(sqlMessageCleanupSession);
//                stmtMessageCleanupSession.executeUpdate();

            // Dann Verordnungen zur BHP, die aus alten Trümmersitzungen stammen löschen.
            String sqlBHPCleanupSession = "DELETE FROM BHPPlanung WHERE tmp IN ( SELECT l.LoginID FROM SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now() )";
            PreparedStatement stmtBHPCleanupSession = OPDE.getDb().db.prepareStatement(sqlBHPCleanupSession);
            stmtBHPCleanupSession.executeUpdate();

            // Dann MassTermine löschen, die aus alten Trümmersitzungen stammen löschen.
            String sqlMassTerminCleanupSession = "DELETE FROM MassTermin WHERE tmp IN ( SELECT l.LoginID FROM SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now() )";
            PreparedStatement stmtMassTerminCleanupSession = OPDE.getDb().db.prepareStatement(sqlMassTerminCleanupSession);
            stmtMassTerminCleanupSession.executeUpdate();

            // Dann OCLogin bereinigen.
            String sqlCleanupSession = "UPDATE SYSLogin l INNER JOIN SYSHosts h ON l.HostID = h.HostID SET l.Logout=LPOL WHERE l.Logout='9999-12-31 23:59:59' AND DATE_ADD(h.LPOL,INTERVAL 3 MINUTE) <= now()";
            PreparedStatement stmtCleanupSession = OPDE.getDb().db.prepareStatement(sqlCleanupSession);
            stmtCleanupSession.executeUpdate();

//            } else {
//                JOptionPane.showMessageDialog(this, "Sie sind bereits an diesem Computer angemeldet.\n\nFalls Sie den Rechner gerade neu gestartet haben,\ndann warten Sie ca. 1 Minute und versuchen es dann nochmal.", "Anmeldefehler", JOptionPane.INFORMATION_MESSAGE);
//                loginid = 0;
//            }
        } // try
        catch (Exception se) {
            OPDE.fatal(se);
        } // catch
        //return (loginid);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbout;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblMessage;
    private org.jdesktop.swingx.JXHyperlink linkOPDE;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}

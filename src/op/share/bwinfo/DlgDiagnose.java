/*
 * OffenePflege
 * Copyright (C) 2008 Torsten Löhr
 * This program is free software; you can redistribute it and/or modify it under the terms of the 
 * GNU General Public License V2 as published by the Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even 
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General 
 * Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program; if not, write to 
 * the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * www.offene-pflege.de
 * ------------------------ 
 * Auf deutsch (freie Übersetzung. Rechtlich gilt die englische Version)
 * Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License, 
 * wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren, gemäß Version 2 der Lizenz.
 *
 * Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird, aber 
 * OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN 
 * BESTIMMTEN ZWECK. Details finden Sie in der GNU General Public License.
 *
 * Sie sollten ein Exemplar der GNU General Public License zusammen mit diesem Programm erhalten haben. Falls nicht, 
 * schreiben Sie an die Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
 * 
 */
package op.share.bwinfo;

import op.OPDE;
import op.tools.*;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLReaderFactory;
import tablerenderer.RNDStandard;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;

/**
 * @author root
 */
public class DlgDiagnose extends DlgCustom {

    private ListSelectionListener lsl;
    private String icd;
    private String text;
    private JCheckBox[] boxes;

    /**
     * Creates new form DlgVorlage
     */
    public DlgDiagnose(Frame parent, HashMap entry, int mode) {
        super(parent, entry, mode);
        this.entry = entry;
        this.mode = mode;
        if (mode != MODE_EDIT) {
            return;
        } // Diagnosen können nicht verändert werden.
        initComponents();
        SYSTools.centerOnParent(parent, this);
        initDialog();
    }

    public DlgDiagnose(JDialog parent, HashMap entry, int mode) {
        super(parent, entry, mode);
        this.entry = entry;
        this.mode = mode;
        if (mode != MODE_EDIT) {
            return;
        } // Diagnosen können nicht verändert werden.
        initComponents();
        SYSTools.centerOnParent(parent, this);
        initDialog();
    }

    private void initDialog() {
        setTitle(SYSTools.getWindowTitle("Diagnosen nach ICD10"));
        fillÄrzte();
        reloadTable();
        // XML parsen und daten setzen.
        String xml = entry.get("xmlc").toString();
        try {
            String xmltext = "<?xml version=\"1.0\"?><structure>" + xml + "</structure>";
            XMLReader parser = XMLReaderFactory.createXMLReader("org.apache.xerces.parsers.SAXParser");
            InputSource is = new org.xml.sax.InputSource(new java.io.BufferedReader(new java.io.StringReader(xmltext)));

            HandlerDaten h = new HandlerDaten();
            parser.setContentHandler(h);

            parser.parse(is);

        } catch (SAXException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public void showDialog() {
        setVisible(true);
        dispose();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox3 = new javax.swing.JComboBox();
        lblTitel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtSuche = new javax.swing.JTextField();
        jspDiagnosen = new javax.swing.JScrollPane();
        tblDiagnosen = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbArzt = new javax.swing.JComboBox();
        cmbKH = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbKoerper = new javax.swing.JComboBox();
        cmbSicherheit = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBemerkung = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        lblDiagnose = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblTitel.setFont(new java.awt.Font("Dialog", 1, 18));
        lblTitel.setText("Diagnosen nach ICD-10");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtSuche.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSucheCaretUpdate(evt);
            }
        });

        jspDiagnosen.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jspDiagnosenComponentResized(evt);
            }
        });

        tblDiagnosen.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jspDiagnosen.setViewportView(tblDiagnosen);

        jLabel1.setText("Stichwort-Suche:");

        jLabel2.setText("Festgestellt durch:");

        cmbArzt.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbArzt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbArztItemStateChanged(evt);
            }
        });

        cmbKH.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));
        cmbKH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKHItemStateChanged(evt);
            }
        });

        jLabel3.setText("Diagnosesicherheit:");

        jLabel4.setText("Körperseite:");

        cmbKoerper.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Nicht festgelegt", "links", "rechts", "beidseitig"}));

        cmbSicherheit.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Nicht festgelegt", "gesichert", "Verdacht auf", "Ausschluß von", "Zustand nach"}));

        txtBemerkung.setColumns(20);
        txtBemerkung.setRows(5);
        jScrollPane1.setViewportView(txtBemerkung);

        jLabel5.setText("Bemerkung:");

        lblDiagnose.setFont(new java.awt.Font("Dialog", 1, 14));
        lblDiagnose.setForeground(java.awt.Color.blue);
        lblDiagnose.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jspDiagnosen, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtSuche, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(cmbKH, 0, 489, Short.MAX_VALUE)
                                                        .addComponent(cmbArzt, 0, 489, Short.MAX_VALUE)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(cmbKoerper, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cmbSicherheit, 0, 190, Short.MAX_VALUE))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)))
                                        .addComponent(lblDiagnose, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(txtSuche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jspDiagnosen, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDiagnose)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(cmbArzt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addComponent(jLabel4))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(6, 6, 6)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(cmbKoerper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel3)
                                                        .addComponent(cmbSicherheit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                                .addContainerGap())
        );

        btnOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/apply.png"))); // NOI18N
        btnOK.setText("Speichern");
        btnOK.setEnabled(false);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/artwork/22x22/cancel.png"))); // NOI18N
        btnCancel.setText("Schließen");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTitel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnOK)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCancel)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblTitel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCancel)
                                        .addComponent(btnOK))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        save();
        setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void fillÄrzte() {
        ResultSet rs1 = DBRetrieve.getResultSet("Arzt", new String[]{"ArztID", "Name", "Vorname", "Ort"}, new String[]{"Name", "Vorname"});
        cmbArzt.setModel(SYSTools.rs2cmb(rs1, true));
        cmbArzt.setSelectedIndex(0);
        ResultSet rs2 = DBRetrieve.getResultSet("KH", new String[]{"KHID", "Name", "Ort"}, new String[]{"Name"});
        cmbKH.setModel(SYSTools.rs2cmb(rs2, true));
    }

    private void jspDiagnosenComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jspDiagnosenComponentResized
        JScrollPane jsp = (JScrollPane) evt.getComponent();
        Dimension dim = jsp.getSize();
        int textWidth = dim.width - (80 + 25);
        TableColumnModel tcm1 = tblDiagnosen.getColumnModel();
        if (tcm1.getColumnCount() < 2) {
            return;
        }

        tcm1.getColumn(0).setPreferredWidth(80);
        tcm1.getColumn(1).setPreferredWidth(textWidth);

        tcm1.getColumn(0).setHeaderValue("ICD10");
        tcm1.getColumn(1).setHeaderValue("Text");
    }//GEN-LAST:event_jspDiagnosenComponentResized

    private void txtSucheCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSucheCaretUpdate
        reloadTable();
    }//GEN-LAST:event_txtSucheCaretUpdate

    private void cmbArztItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbArztItemStateChanged
        saveOK();
    }//GEN-LAST:event_cmbArztItemStateChanged

    private void cmbKHItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKHItemStateChanged
        saveOK();
    }//GEN-LAST:event_cmbKHItemStateChanged

    private void save() {
        long bwinfoid = ((Long) entry.get("bwinfoid")).longValue();
        HashMap hm = new HashMap();
        hm.put("XML", toXML());
        hm.put("Bemerkung", txtBemerkung.getText());
        op.tools.DBHandling.updateRecord("BWInfo", hm, "BWInfoID", bwinfoid);
    }

    private void saveOK() {
        boolean arztOK = cmbArzt.getSelectedIndex() > 0 || cmbKH.getSelectedIndex() > 0;
//        boolean koerperOK = cmbKoerper.getSelectedIndex() > 0;
//        boolean sicherheitOK = cmbSicherheit.getSelectedIndex() > 0;

        btnOK.setEnabled((!SYSTools.catchNull(icd).equalsIgnoreCase("") || tblDiagnosen.getSelectedRow() >= 0) && arztOK);
        if (!btnOK.isEnabled()) {
            String ursache = "<html><body>Es fehlen noch Angaben, bevor Sie speichern können.<ul>";
            ursache += (arztOK ? "" : "<li>Die Informationen zum Arzt oder zum KH sind unvollständig.</li>");
            ursache += "</ul></body></html>";
            btnOK.setToolTipText(ursache);
        } else {
            btnOK.setToolTipText(null);
        }

    }


    private String toXML() {
        ListElement arzt = (ListElement) cmbArzt.getSelectedItem();
        ListElement kh = (ListElement) cmbKH.getSelectedItem();
        long arztid = 0;
        if (arzt != null) {
            arztid = arzt.getPk();
        }
        long khid = 0;
        if (kh != null) {
            khid = kh.getPk();
        }
        String xml = "<java icd=\"" + icd.toUpperCase() + "\" text=\"" + text + "\" ";
        xml += "arztid=\"" + arztid + "\" khid=\"" + khid + "\" ";
        xml += "koerperseite=\"" + cmbKoerper.getSelectedItem().toString() + "\" ";
        xml += "diagnosesicherheit=\"" + cmbSicherheit.getSelectedItem().toString() + "\" ";

        String html = "";
        html += "&lt;br/&gt;&lt;b&gt;" + lblDiagnose.getText() + "&lt;/b&gt;&lt;br/&gt;";
        html += "Festgestellt durch: ";
        if (khid > 0) {
            HashMap hmkh = DBRetrieve.getSingleRecord("KH", "KHID", khid);
            html += "&lt;b&gt;" + hmkh.get("Name").toString() + " " + hmkh.get("Ort").toString() + "&lt;/b&gt;";
        }
        if (arztid > 0) {
            if (khid > 0) {
                html += "&lt;br/&gt;bestätigt durch: ";
            }
            HashMap hmarzt = DBRetrieve.getSingleRecord("Arzt", "ArztID", arztid);
            html += "&lt;b&gt;" + hmarzt.get("Anrede").toString() + " " + hmarzt.get("Titel").toString() + " " + hmarzt.get("Name").toString() + "&lt;/b&gt;" + " &lt;br/&gt;";
        }
        html += "Körperseite: &lt;b&gt;" + cmbKoerper.getSelectedItem().toString() + "&lt;/b&gt;&lt;br/&gt;";
        html += "Diagnosesicherheit: &lt;b&gt;" + cmbSicherheit.getSelectedItem().toString() + "&lt;/b&gt;";

        xml += "html=\"" + html;
        xml += "\"/>";
        return xml;
    }

    private void reloadTable() {
        if (txtSuche.getText().equals("")) {
            tblDiagnosen.setModel(new DefaultTableModel());
            return;
        }

        PreparedStatement stmt;
        ResultSet rs;

        try {
            String sql = "SELECT" +
                    " ICDID, ICD10, Text " +
                    " FROM ICD " +
                    " WHERE ICD10 like ? OR MATCH (Text) AGAINST(? IN BOOLEAN MODE)";
            stmt = OPDE.getDb().db.prepareStatement(sql);
            stmt.setString(1, "%" + txtSuche.getText() + "%");
            stmt.setString(2, txtSuche.getText() + "*");
            rs = stmt.executeQuery();

            ListSelectionModel lsm = tblDiagnosen.getSelectionModel();
            if (lsl != null) {
                lsm.removeListSelectionListener(lsl);
            }
            lsl = new HandleSelections();

            tblDiagnosen.setModel(new TMResultSet(rs));
            lsm.addListSelectionListener(lsl);
            tblDiagnosen.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            jspDiagnosen.dispatchEvent(new ComponentEvent(jspDiagnosen, ComponentEvent.COMPONENT_RESIZED));
            tblDiagnosen.getColumnModel().getColumn(0).setCellRenderer(new RNDStandard());
            tblDiagnosen.getColumnModel().getColumn(1).setCellRenderer(new RNDStandard());
        } catch (SQLException se) {
            new DlgException(se);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cmbArzt;
    private javax.swing.JComboBox cmbKH;
    private javax.swing.JComboBox cmbKoerper;
    private javax.swing.JComboBox cmbSicherheit;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jspDiagnosen;
    private javax.swing.JLabel lblDiagnose;
    private javax.swing.JLabel lblTitel;
    private javax.swing.JTable tblDiagnosen;
    private javax.swing.JTextArea txtBemerkung;
    private javax.swing.JTextField txtSuche;
    // End of variables declaration//GEN-END:variables

    // End of variables declaration
    private class HandleSelections
            implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent lse) {
            TableModel tm = tblDiagnosen.getModel();
            if (tm.getRowCount() <= 0) {
                return;
            }

            if (!lse.getValueIsAdjusting()) {
                DefaultListSelectionModel lsm = (DefaultListSelectionModel) lse.getSource();
                if (lsm.isSelectionEmpty()) {
                    icd = "";
                    text = "";
                    //btnOK.setEnabled(false);
                    lblDiagnose.setText(" ");
                } else {
                    icd = tm.getValueAt(lsm.getLeadSelectionIndex(), 0).toString();
                    text = tm.getValueAt(lsm.getLeadSelectionIndex(), 1).toString();
                    lblDiagnose.setText(icd + ": " + text);
                    //btnOK.setEnabled(true);
                }
                saveOK();
                //if (ts.)
            }

        }
    }

    /**
     * Dieser Handler nimmt die XML Inhaltsstruktur und setzt die Widgets entsprechend.
     * <ul>
     * <li>Checkboxes: &lt;tnz value="true"&gt;</li>
     * <li>Optiongroups: &lt;jn value="nein"&gt;</li>
     * <li>Textfelder: &lt;kontakt value="Nur Kontakt zu ihrer Schwester."&gt;</li>
     * </ul>
     * <p/>
     * Neben dem einstellen der Widgets, wird ebenfalls die HashMap <code>antwort</code> entsprechend mit gepflegt.
     */
    private class HandlerDaten extends DefaultHandler {

        @Override
        public void startElement(String nsURI, String strippedName, String tagName, Attributes attributes) throws SAXException {
            String value = attributes.getValue("value");
//            if (tagName.equalsIgnoreCase("unbeantwortet")) {
//                btnOK.setEnabled(false);
//            } else 
            if (tagName.equalsIgnoreCase("java")) {
                icd = attributes.getValue("icd");
                text = attributes.getValue("text");
                lblDiagnose.setText(icd + ": " + text);
                txtBemerkung.setText(SYSTools.catchNull(entry.get("bemerkung").toString()));
                long arztid = Long.parseLong(attributes.getValue("arztid"));
                long khid = Long.parseLong(attributes.getValue("khid"));
                String koerperseite = attributes.getValue("koerperseite");
                String diagnosesicherheit = attributes.getValue("diagnosesicherheit");
                SYSTools.selectInComboBox(cmbArzt, arztid);
                SYSTools.selectInComboBox(cmbKH, khid);
                cmbKoerper.setSelectedItem(koerperseite);
                cmbSicherheit.setSelectedItem(diagnosesicherheit);
                saveOK();
                //btnOK.setEnabled(true);
            }

        }
    } // private class HandlerDatenInhalt <jn value="ja"/>
}
